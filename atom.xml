<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山河已无恙</title>
  
  
  <link href="https://liruilongs.github.io/atom.xml" rel="self"/>
  
  <link href="https://liruilongs.github.io/"/>
  <updated>2021-06-26T19:02:59.541Z</updated>
  <id>https://liruilongs.github.io/</id>
  
  <author>
    <name>山河已无恙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于JAVA 反射 基础知识_编码经验的一些总结</title>
    <link href="https://liruilongs.github.io/2021/06/26/%E5%85%B3%E4%BA%8EJAVA%20%E5%8F%8D%E5%B0%84%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BC%96%E7%A0%81%E7%BB%8F%E9%AA%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://liruilongs.github.io/2021/06/26/%E5%85%B3%E4%BA%8EJAVA%20%E5%8F%8D%E5%B0%84%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BC%96%E7%A0%81%E7%BB%8F%E9%AA%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</id>
    <published>2021-06-25T16:00:00.000Z</published>
    <updated>2021-06-26T19:02:59.541Z</updated>
    
    <content type="html"><![CDATA[<p>傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的<code>生命被剥夺</code>了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是<code>比死亡更可怕的事</code>。——–王小波</p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><ul><li>温习一下毕业以来学习的东西。准备做成一个系列。所以对于每一部分技术点进行一个笔记整理。更多详见  <a href="https://blog.csdn.net/sanhewuyang/article/details/118126695">java面试的一些总结</a></li><li>笔记主要是以网上开源的一本<code>《Java核心面试知识整理》</code>面试笔记为原型，结合<code>工作中学习</code>的知识。<code>《Effective Java》</code>、<code>《编写高质量代码(改善Java程序的151个建议)》</code>这两本书为方向进行整理。</li><li>笔记立足<code>DevOps</code>。开发+运维+测试三个方向 ,面向对<code>JAVA有一定了解</code>的小伙伴用于<code>温习</code>，因为<code>理论较多一点</code>。**<font color="#67C23A">在不断更新，博文内容理解不足之处请小伙伴留言指正**。</font></li></ul><p><strong><font color="009688"> 傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的<code>生命被剥夺</code>了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是<code>比死亡更可怕的事</code>。——–王小波</strong></font></p><hr><h1 id="二、JAVA-反射"><a href="#二、JAVA-反射" class="headerlink" title="二、JAVA 反射"></a><font color="#67C23A">二、JAVA 反射</font></h1><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a><code>动态语言</code></h3><p>动态语言，是指程序在运行时可以<code>改变其结构</code>：新的函数可以引进，已有的函数可以被删除等结构上的变化。比如常见的 <code>JavaScript 就是动态语言</code>，除此之外 Ruby,<code>Python 等也属于动态语言</code>，而 C、C++则<code>不属于动态语言</code>。从反射角度说 <code>JAVA 属于半动态语言</code>。</p><h2 id="反射机制概念-运行状态中知道类所有的属性和方法"><a href="#反射机制概念-运行状态中知道类所有的属性和方法" class="headerlink" title="反射机制概念(运行状态中知道类所有的属性和方法)"></a><font color="#409EFF">反射机制概念(运行状态中知道类所有的属性和方法)</font></h2><p><code>反射(Reflection)机制</code>允许程序在运行时借助<code>Reflection API</code>取得任何<code>类</code>的<code>内部信息</code>，并不能直接操作对象的内部属性及方法。反射被视为<code>动态语言的关键</code>。</p><p><code>白话讲解</code>：在 Java 中的<code>反射机制</code>是指在<code>运行状态</code>中，对于<code>任意一个类</code>都能够知道这个类<code>所有的属性和方法</code>；并且对于<code>任意一个对象</code>，都能够调用它的<code>任意一个方法</code>；这种动态获取信息以及动态调用对象方法的功能成为<code> Java 语言的反射机制</code>。</p><h2 id="JAVA-反射-API"><a href="#JAVA-反射-API" class="headerlink" title="JAVA 反射 API"></a><font color="#409EFF">JAVA 反射 API</font></h2><p><strong><font color="#009688">如果面试被问到，对于反射API了你了解多少？怎么回答。</font></strong></p><p><code>Reflection API </code>提供了<code>Constructor</code>，<code>Field</code>和<code>Method</code>类，这三个类定义在<code>java.lang.reflect</code>包中，分别用于描述类的<code>构造方法</code>，<code>属性</code>和<code>方法</code>。<code>JAVA8</code>之后在在<code>java.lang.reflect</code>包中添加了<code>Executable</code>抽象类，<code>parameter</code>l类这两个API，<code>Executable</code>描述类的<code>执行对象</code>，<code>parameter</code>描述方法参数信息。</p><p>当然，获取这些反射APl的实例信息，还需要一个最重要对象<code>元类Class</code>，<code>java.lang.Class</code>类封装一个对象和接口运行时的状态。当<code>类加载</code>时<code>Class</code>类型的对象<code>自动创建</code>，<code>Class</code>没有<code>公共构造方法</code>，其对象是<code>JVM</code>在类加载时通过类加载器中的<code>defineClass()</code>方法自动构造的，不能<code>显示</code>的实例化一个<code>class对象</code>。</p><p><strong><font color="#009688">如果面试被问到你刚才说了<code>类加载</code>，你可以讲讲类加载么？</font></strong></p><p>所谓<code>类加载</code>，就是指将<code>类</code>的<code>class文件</code>读入<code>内存</code>，并为之创建一个<code>Java.lang.class对象</code>。即当<code>线程</code>使用任何一个类时，系统都会为之创建一个<code>java.lang.Class</code>对象。<code>java</code>可以使用使用<code>forName动态加载类文件</code>，<code>动态加载(Dynamic Loading)</code>是指在程序<code>运行时</code>加载需要的<code>类库文件</code>，对Java程序来说，一般情况下，一个<code>类文件</code>在<code>启动</code>时或<code>首次初始化</code>时会被<code>加载到内存中</code>，而反射则可以在运<code>行时决定</code>是否要<code>加载一个类</code>，一个类文件只有在被加载到内存中才可能生成实例对象，即加载到内存中，生成<code>Class</code>对象，通过<code>new</code>关键字生成<code>实例对象</code>。</p><p>每个<code>类被加载</code>之后，会生成一个<code>Class对象</code>，通过<code>Class对象</code>可以访问<code>JVM</code>中该类的信息，一旦类被载入<code>JVM中</code>，<code>同一个类</code>将不会被<code>再次载入</code>，被载入的类都有一个<code>唯一的标识</code>，是该<code>类</code>得到<code>全限定类名(包括包名和类名)</code>。</p><hr><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="Class常用方法："><a href="#Class常用方法：" class="headerlink" title="Class常用方法："></a>Class常用方法：</h4><p><strong><font color="#009688">如果面试被问到你对<code>Class对象</code>了解多少,说几个常用方法，怎么回答？</font></strong></p><table><thead><tr><th align="left"><strong><font color="#67C23A">Class常用方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>static Class forName(String className)</code></td><td align="left">返回<code>指定类名</code>的<code>Class</code>对象</td></tr><tr><td align="left"><code>T newInstance()</code></td><td align="left">调用默认的构造方法，返回该Class对象的<code>一个实例</code></td></tr><tr><td align="left"><code>String getName()</code></td><td align="left">返回<code>Class</code>对象锁对应的<code>类名</code></td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">构造器相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Constructor&lt;?&gt;[] getConstructors()</code></td><td align="left">返回<code>Class</code>对象所对应类的<code>所有public构造方法</code></td></tr><tr><td align="left"><code>Constructor&lt;T&gt;getConstructors(Class&lt;?&gt;...parameterType)</code></td><td align="left">返回Class对象所对应的类的指定参数列表的<code>public构造方法</code></td></tr><tr><td align="left"><code>Constructor&lt;?&gt;[]getDeclaredConstructors()</code></td><td align="left">返回<code>Class</code>对象所对应的<code>所有构造方法</code>，与<code>访问权限无关</code></td></tr><tr><td align="left"><code>Constructor&lt;T&gt;getDeclaredConstructors(Class&lt;?&gt;...parameterTypes)</code></td><td align="left">返回<code>Class对象</code>所对应类的<code>指定参数列表</code>的所有<code>构造方法</code>，<br>与<code>访问权限无关</code>,如果使用私有构造器<br>构造，需要开启访问权限<code>setAccessible(true)</code>：<br>设置通过反射访问该成员变量时取消访问权限检查。</td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">方法相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Method[] getMethod()</code></td><td align="left">返回<code>Class</code>对象所对应类的<code>所有public方法</code></td></tr><tr><td align="left"><code>Method getMethod(String name,Class&lt;?&gt;...parameterType)</code></td><td align="left">返回<code>Class</code>对象所对应的<code>指定参数列表</code>的<code>public方法</code></td></tr><tr><td align="left"><code>Method[] getDeclaredMechods()</code></td><td align="left">返回<code>Class</code>对象所对应的<code>所有方法</code>，与<code>访问权限无关</code></td></tr><tr><td align="left"><code>Method getDeclaredMethod(String name,Class&lt;?&gt;...parameterTypes)</code></td><td align="left">返回<code>Class</code>对象对应类的<code>指定参数列表</code>的方法，与<code>访问权限无关</code></td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">属性相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Field[] getFields()</code></td><td align="left">返回<code>Class</code>对象所对应类的所有<code>public成员变量</code></td></tr><tr><td align="left"><code>Field getField(String name)</code></td><td align="left">返回<code>Class</code>对象所对应的类的<code>指定参数</code>的<code>public成员变量</code></td></tr><tr><td align="left"><code>Field[] getDeclaredFields( )</code></td><td align="left">返回<code>Class</code>对象所对应类的所有<code>成员变量</code>,与<code>访问权限无关</code></td></tr><tr><td align="left"><code>Field getDeclaredField(String name)</code></td><td align="left">返回<code>Class</code>对象所对应类<code>指定参数</code>的<code>成员变量</code>，与<code>访问权限无关</code></td></tr></tbody></table><p><strong><font color="#67C23A">这里需要注意的是(<code>Method</code>、<code>Constructor</code>的也一样):</font></strong></p><ul><li>调用<code>getDeclaredFields()</code>方法可以获取包括<code>私有</code>和<code>受保护</code>的<code>所有属性</code>，但<code>不包括</code>父类的<code>属性</code>；</li><li>调用<code>getField()</code>方法可以获得所有的<code>public属性</code>。包括<code>从父类继承</code>的。</li></ul><table><thead><tr><th align="left"><strong><font color="#67C23A">注解相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Annotation [] getAnnotation()</code></td><td align="left">返回<code>Class对象</code>所对应类上存在的所有<code>注解</code></td></tr><tr><td align="left"><code>&lt; A extends Annotation&gt;A getAnnotation(Class &lt; A &gt;annotationClass )</code></td><td align="left">返回<code>Class对象</code>所对应类上存在的指定类型的<code>注解</code></td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">Class自身信息相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Class&lt;?&gt;getDeclaringClasses()</code></td><td align="left">返回<code>Class</code>对象所对应的<code>外部类</code></td></tr><tr><td align="left"><code>Class&lt;?&gt;[] getDeclaredClasses()</code></td><td align="left">返回<code>Class</code>对象所对应的类里包含的所有<code>内部类</code></td></tr><tr><td align="left"><code>Class&lt;? super T&gt;getSuperclass()</code></td><td align="left">返回<code>Class</code>对象所对应的类里的<code>父类的Class对象</code></td></tr><tr><td align="left"><code>int getModifiers()</code></td><td align="left">返回<code>Class</code>对象所对应类的<code>修饰符</code>，返回的整数是修饰符的对应常量，需要是使用Modified工具类解码</td></tr><tr><td align="left"><code>Class [] getInterfaces()</code></td><td align="left">返回<code>Class</code>对象所对应类实现的<code>所用接口</code></td></tr><tr><td align="left"><code>Class LoadergetClassLoader()</code></td><td align="left">返回该类的<code>类加载器</code></td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">包相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Package getPackage()</code></td><td align="left">返回<code>Class对象</code>所对应的<code>包</code></td></tr></tbody></table><table><thead><tr><th align="left"><strong><font color="#67C23A">Class谓词相关方法</font></strong></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>boolean isArray()</code></td><td align="left">判断<code>Class</code>对象是否表示一个<code>数组类</code></td></tr><tr><td align="left"><code>boolean isEnum()</code></td><td align="left">判断<code>Class</code>对象是否表示一个<code>枚举</code></td></tr><tr><td align="left"><code>boolean isInterface() </code></td><td align="left">判断<code>Class</code>对象是否表示一个<code>接口</code></td></tr><tr><td align="left"><code>boolean isInstance(Object obj)</code></td><td align="left">判断<code>obj对象</code>是否是该<code>Class对象</code>的一个<code>实例</code></td></tr><tr><td align="left"><code>boolean isAnnottation()</code></td><td align="left">返回<code>Class</code>对象是否标识一个<code>注解类型</code></td></tr></tbody></table><h4 id="获取Class对象的四种方式："><a href="#获取Class对象的四种方式：" class="headerlink" title="获取Class对象的四种方式："></a>获取<code>Class对象</code>的四种方式：</h4><p><strong><font color="#009688">如果面试被问到如何获取Class对象，怎么回答？</font></strong></p><ol><li>使用<code>Class类</code>的<code>forName(String classNmae)</code>静态方法,参数<code>class</code>代表所需要<code>类的全限定类名</code>。<code>forName()</code>方法声明抛出<code>ClassNotFoundException</code>受检异常，调用必须<code>捕获或抛出异常</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; reflection_demoClass = Class.forName(<span class="string">&quot;com.liruilong.Reflection.Reflection_Demo&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>调用某个类的<code>class属性</code>来获取该类对应的<code>Class对象</code>，<code>对象.class</code>;类的<code>Class属性</code>获得该类所对应的<code>Class对象</code>，会始代码<code>更安全</code>。<code>程序性更好</code>。<code>string</code>类型的字符串不能使用<code>String.class</code>方式。需要使用<code>Class.forName（“java.lang.String”）</code>，<code>Object</code>类的<code>.class</code>文件默认是不包含参数信息的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Reflection_Demo&gt; reflection_demoClass = Reflection_Demo.class;</span><br></pre></td></tr></table></figure></li><li>调用某个类的<code>getclass()</code>方法来获取该类对应的<code>class对象</code>，该方法是<code>Object类中的一个方法</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;? extends Reflection_Demo&gt; aClass = <span class="keyword">new</span> Reflection_Demo().getClass();</span><br></pre></td></tr></table></figure></li><li>调用元类Class对应的<code>getClassLoader()</code>获取类加载器，<code>ClassLoader</code>，这个有点牵强，姑且算一种吧，嘻嘻。。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = Reflection_Demo.class.getClassLoader();</span><br><span class="line">Class&lt;?&gt; bClass = classLoader.loadClass(<span class="string">&quot;com.liruilong.Reflection.Reflection_Demo&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>下面我们看看剩下的API吧！</p><hr><h3 id="Executable"><a href="#Executable" class="headerlink" title="Executable"></a>Executable</h3><p><code>Executable抽象类</code>：<code>JAVA8</code>在<code>java.lang.reflect</code>包下新增了一个<code>Executable</code>抽象类，代表可执行的类成员。<code>Executable</code>抽象类派生了<code>Constructor</code>和<code>Method</code>两个子类。<code>Executable</code>抽象类提供了大量方法来获取<code>参数</code>，<code>修饰符</code>或<code>注解</code>等信息。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>parameter [] getparameters() </code></td><td align="left">获取<code>所有形参</code>，返回一个parameter [] 数组</td></tr><tr><td align="left"><code>int getParameterCount()</code></td><td align="left">获取<code>形参个数</code></td></tr><tr><td align="left"><code>abstract int getModifiers()</code></td><td align="left">获取<code>修饰符</code>，返回的整数是修饰符关键字对应的常量</td></tr><tr><td align="left"><code>boolean isVarArgs()</code></td><td align="left">判断是否包含数量<code>可变的形参</code></td></tr></tbody></table><hr><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p><code>Constructor类</code>：用于表示类的<code>构造方法</code>。通过<code>Class</code>的<code>getConstructor()</code>方法来获取<code>构造方法</code>的<code>集合</code>。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>String getName()</code></td><td align="left">返回构造器的名称</td></tr><tr><td align="left"><code>Class [] getParameterTypes()</code></td><td align="left">返回当前构造方法的参数类型</td></tr><tr><td align="left"><code>int getModifiers()</code></td><td align="left">返回<code>修饰符</code>的<code>整型标识</code>，返回的整数是修饰符是标识常量，需要使用Modified工具类方法解码Modified.toSting(int mod),可以通过Modified.PUBLIC 查看对应的值</td></tr></tbody></table><hr><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p><code>Method类</code>：用于封装方法的信息，调用<code>Class</code>对象的<code>getMethods(）</code>方法或<code>getMethod()</code>可以获取当前类的所有方法或指定的方法。</p><table><thead><tr><th align="left">常用方法</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left"><code>String getName(）</code></td><td align="left">返回方法的<code>名称</code></td></tr><tr><td align="left"><code>Class[] getparameterType()</code></td><td align="left">返回方法的<code>参数类型</code></td></tr><tr><td align="left"><code>int  getModifieds()</code></td><td align="left">返回<code>修饰符</code>的<code>整型标识</code></td></tr><tr><td align="left"><code>Class getReturnType()</code></td><td align="left">返回当前方法的<code>返回类型</code></td></tr></tbody></table><hr><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p><code>Field类</code>：用于封装属性信息，调用<code>Class</code>对象的<code>getFields()</code>或<code>getField()</code>方法可以获取当前类的<code>所有属性</code>或<code>指定属性</code>。</p><table><thead><tr><th>常用方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getName() </code></td><td>获取属性的名称</td></tr><tr><td><code>int getMOdifiers()</code></td><td>返回修饰符的整型标识</td></tr><tr><td><code>getXxx(Object obj)</code></td><td>获取属性的值，此处的Xxx对应的java8中的基本类型，如果属性是引用类型，直接使用get(Object obj)方法</td></tr><tr><td><code>setXxx(Object obj,Xxx val)</code></td><td>设置属性的值，此处的Xxx对应Java8中的基本类型，如果属性是引用类型，直接使用set(Object obj，Object val)方法</td></tr><tr><td><code>Class [] getType()</code></td><td>返回当前属性的类型</td></tr></tbody></table><hr><h3 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h3><p><code>parameter类</code>：是JAVA8中新增的API，每个paramtete 对象代表一个参数。Parameter类提供许多方法来获取参数信息</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>int getModifiers()</code></td><td>获取参数的<code>修饰符</code></td></tr><tr><td><code>String getName()</code></td><td>获取参数的<code>形参名</code></td></tr><tr><td><code>Type getparameterizedType()</code></td><td>获取<code>带泛型</code>的<code>形参类型</code></td></tr><tr><td><code>Class&lt;?&gt;getType()</code></td><td>获取<code>形参类型</code></td></tr><tr><td><code>boolean isVarArgs()</code></td><td>判断该参数是否为<code>可变参数</code></td></tr><tr><td><code>boolean isNamePreaent()</code></td><td>判断<code>.class</code>文件中是否包含方法的形参名信息</td></tr></tbody></table><h4 id="利用反射创建对象的的两种方式："><a href="#利用反射创建对象的的两种方式：" class="headerlink" title="利用反射创建对象的的两种方式："></a>利用反射创建<code>对象</code>的的两种方式：</h4><p><strong><font color="#009688">如果面试被问到使用反射如何创建对象，怎么回答？</font></strong></p><ul><li><code>Class 对象的 newInstance()</code>: 使用 <code>Class </code>对象的 <code>newInstance()</code>方法来创建该<code> Class</code> 对象对应类的实例，但是这种方法要求该 <code>Class </code>对象对应的<code>类有默认</code>的<code>空构造器</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; reflection_demoClass = Class.forName(<span class="string">&quot;com.liruilong.Reflection.Reflection_Demo&quot;</span>);</span><br><span class="line">           Reflection_Demo o = (Reflection_Demo) reflection_demoClass.newInstance();</span><br><span class="line"></span><br><span class="line">           System.out.println(o);<span class="comment">// com.liruilong.Reflection.Reflection_Demo@677327b6</span></span><br></pre></td></tr></table></figure></li><li>调用<code>Constructor</code>对象的<code> newInstance()</code>: 先使用 <code>Class </code>对象获取指定的 <code>Constructor </code>对象，再调用<code>Constructor</code>对象的<code>newInstance()    </code>方法来创建 <code>Class</code> 对象对应类的实例,通过这种方法可以<code>选定构造方法创建实例</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; reflection_demoClass = Class.forName(<span class="string">&quot;com.liruilong.Reflection.Reflection_Demo&quot;</span>);</span><br><span class="line"> Constructor&lt;?&gt; constructors = reflection_demoClass.getConstructor(<span class="keyword">null</span>);</span><br><span class="line">           Reflection_Demo o1 = (Reflection_Demo) constructors.newInstance(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">           System.out.println(o1); <span class="comment">// com.liruilong.Reflection.Reflection_Demo@14ae5a5</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="关于反射的一些其他编码经验："><a href="#关于反射的一些其他编码经验：" class="headerlink" title="关于反射的一些其他编码经验："></a>关于反射的一些其他编码经验：</h2><p><strong><font color="#009688">如果面试问关于反射，平常开发中有哪些经验，要怎么回答？</font></strong></p><ul><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF">**注意<code>Class类本身</code>的特殊性</font>**：Java语言把<code>Java源文件编译</code>为后缀为<code>class</code>的<code>字节码文件</code>，然后通过<code>ClassLocale</code>机制把类文件<code>加载</code>到<code>内存</code>中，最后<code>生成实例执行</code>，Java使用<code>元类(MetaClass）</code>来描述<code>加载</code>到<code>内存中</code>的<code>类数据</code>，即<code>Class类</code>，描述<code>类</code>的<code>类对象</code>，需要注意<code>Class的一些特性</code>。<ul><li><input checked="" disabled="" type="checkbox"> <code>无构造函数</code>，不能主动实例化，Class对象在加载时由java虚拟机通过类加载器中的defineClass自动构造。</li><li><input checked="" disabled="" type="checkbox"> <code>可以描述基本类型 Class as=int.class;</code>8个基本类型执行<code>JVM</code>中并不是<code>一个对象</code>，一般<code>存在</code>于<code>栈中</code>，通过<code>Class</code>可以<code>描述</code>它们，可以使用<code>int.calss</code>描述<code>int类型</code>的<code>类对象</code>。</li><li><input checked="" disabled="" type="checkbox"> <code>Class对象都是单例模式</code>，一个Class对象描述<code>一个类</code>，只描述一个类，即一个类只有<code>一个Class对象</code>。<code>Class是java 的反射入口</code>，只有在获得一个类的<code>动态描述</code>时才能<code>动态的加载调用</code>。</li></ul></li><li><input checked="" disabled="" type="checkbox"> **<font color="#409EFF">适时选择<code>getDeclaredXXX</code>和<code>getXXX</code></font>**：<code>getDeclaredMethod</code>方法获得的是所有<code>public访问级别</code>的方法，包括从<code>父类继承来</code>的方法，而<code>getDeclareMethod</code>获得自身类的<code>所有方法</code>，包括<code>公有的(public)</code>，<code>私有(private)</code>,方法等，不受<code>访问权限限制</code>。如果需要<code>列出</code>所有<code>继承自父类的方法</code>，可以<code>先获得父类</code>，然后<code>使用getDeclareMethods</code>，之后<code>持续递归</code>。</li><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>反射访问<code>属性</code>或<code>方法</code>时将<code>Accessible</code>设置为<code>true</code></strong></font>，<code>java</code>中通过<code>反射执行方法</code>的步骤，获取一个<code>对象的方法</code>，然后根据<code>isAccessible</code>返回值确定是<code>否能执行</code>，如果返回<code>false</code>，则需要调用<code>setAccessible(true)</code>,在调用<code>invoke</code>执行方法。<ul><li><input checked="" disabled="" type="checkbox"> <code>Access</code>并不是<code>语法层次</code>理解的<code>访问权限</code>，而是指<code>是否更容易获得</code>，<code>是否进行安全检查</code>。动态的<code>修改</code>一个类或方法或执行方法时都会受到<code>Java安全体系的制约</code>，而<code>安全处理</code>非常<code>消耗资源</code>，所以对于<code>运行期</code>要执行的方法或修改的属性就<code>提供了Accessible可选项</code>，由开发者决定是否要<code>逃避安全体系的检查</code>。</li><li><input checked="" disabled="" type="checkbox"> <code>AccessibleObject</code>是<code>field</code>，<code>Method</code>，<code>constructor</code>的<code>父类</code>，<code>决定</code>其<code>是否</code>可以<code>快速访问</code>而不进行<code>访问控制检查</code>，<code>AccessobleObject</code>类中是以<code>override</code>变量保存该值的。</li></ul></li><li><input checked="" disabled="" type="checkbox"> <code>Accessible</code>属性只是用来判断是否需要进行安全检查的，如果不需要则直接执行，可以<code>提升系统性能</code>. <code>AccessibleObject</code>的其他两个子类<code>field</code>和 <code>constructor</code>也相似，所以要设置<code>Accessible</code>为<code>true</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Method  method= genericDemo.class.getMethod(<span class="string">&quot;toArray&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!method.isAccessible())</span><br><span class="line">   method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Do liruilong ___$# ^_^&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, Throwable </span>&#123;</span><br><span class="line">Method method = Foo.class.getMethod(<span class="string">&quot;doStuff&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;可以访问吗！！&quot;</span>+method.isAccessible());</span><br><span class="line">method.invoke(<span class="keyword">new</span> Foo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>动态加载不适合数组</strong></font>，当使用forName加载一个类时，8个基本类型排除，它不是一个具体的类，还要具有可追索的类路径，否则包ClassNotFoundException异常。数组虽然是一个类，但没有定义类路径，可以加载编译后的对象动态动态加载一个对象数组，但是没有意义。在java中数组是定长的，没有长度的数组是不允许存在的。可以使用Array数组反射类来动态加载一个数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态创建一个数组</span></span><br><span class="line">String [] strs = (String[]) Array.newInstance(String.class,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span>[][] ints = (<span class="keyword">int</span> [][])Array.newInstance(<span class="keyword">int</span>.class,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>元素类型</th><th>编译后的类型</th></tr></thead><tbody><tr><td>byte[]</td><td>[B</td></tr><tr><td>char[]</td><td>[C</td></tr><tr><td>Double[]</td><td>[D</td></tr><tr><td>Float[]</td><td>[F</td></tr><tr><td>Int[]</td><td>[I</td></tr><tr><td>Long[]</td><td>[J</td></tr><tr><td>Short[]</td><td>[S</td></tr><tr><td>Boolean</td><td>[Z</td></tr><tr><td>引用类型(如String)</td><td>[L引用类型</td></tr></tbody></table><ul><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>动态可以让代理模式更灵活</strong></font>，java的反射框架提供了动态代理(Dynamic Proxy)机制，允许在运行期对目标对象生成代理，静态代理：通过代理主题角色和具体主题角色共同实现抽象主题角色的逻辑的，只是代理主题角色把相关的执行逻辑委托给了具体主题角色而已。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> subject subjects = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        subjects = <span class="keyword">new</span>  RealSubject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(subject subjects)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjects =subjects; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        befoer();</span><br><span class="line">        subjects.request();</span><br><span class="line">        afert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">befoer</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afert</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>java基于java.lang.reflect.Proxy用于实现动态代理，使SubjectHandler作为主要的逻辑委托对象，invoke是必须要实现的，完成对真实方法的调用。即通过InvocationHandler接口的实现类来实现，所有被代理的方法都是由InvocationHandler接管实际的处理任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> subject subjects;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SubjectHandler</span><span class="params">(subject subjects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjects = subjects;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;预处理&quot;</span>);</span><br><span class="line">        Object obj = method.invoke(subjects,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;后处理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//场景类</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">      </span><br><span class="line">      subject subjects = <span class="keyword">new</span> RealSubject();</span><br><span class="line">      InvocationHandler handler = <span class="keyword">new</span> SubjectHandler(subjects);</span><br><span class="line">      <span class="comment">//当前加载器</span></span><br><span class="line">      ClassLoader cl = subjects.getClass().getClassLoader();</span><br><span class="line">      <span class="comment">//动态代理</span></span><br><span class="line">      subject proxy = (subject) Proxy.newProxyInstance(cl,subjects.getClass().getInterfaces().request(),handler);</span><br><span class="line">      <span class="comment">//执行具体的角色方法</span></span><br><span class="line">      proxy.request();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>使用反射增加装饰模式的普遍性</strong></font>，装饰模式：动态的给一个对象添加一些额外的职责。使用动态代理可以实现装饰模式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//老鼠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Jetty Tom&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义某种能力</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Featuer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyFeatuer</span> <span class="keyword">implements</span> <span class="title">Featuer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加 一支翅膀&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigFeatuer</span> <span class="keyword">implements</span> <span class="title">Featuer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加钻地能力！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecorateAnimal</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends Featuer&gt; clz;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecorateAnimal</span><span class="params">(Animal animal,Class&lt;? extends Featuer&gt; clz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">        <span class="keyword">this</span>.clz = clz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">//具体的包装行为</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//设置包装</span></span><br><span class="line">                <span class="comment">// public class Modifier</span></span><br><span class="line">                <span class="comment">// extends ObjectModifier类提供了static方法和常量来解码类和成员访问修饰符。 修饰符集合被表示为具有表示不同修饰符的不同位位置的整数。</span></span><br><span class="line">        <span class="comment">//method.getModifiers()返回由该对象表示的可执行文件的Java语言modifiers 。</span></span><br><span class="line">         <span class="keyword">if</span> (Modifier.isPublic(method.getModifiers()))&#123;</span><br><span class="line">                obj = method.invoke(clz.newInstance(),args);</span><br><span class="line">         &#125;</span><br><span class="line">         animal.doStuff();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ClassLoader cl = getClass().getClassLoader();</span><br><span class="line">        Featuer Proxy = (Featuer) java.lang.reflect.Proxy.newProxyInstance(cl,clz.getInterfaces(),handler);</span><br><span class="line">        Proxy.load();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//定义Jerry老树</span></span><br><span class="line">        Animal Jerry = <span class="keyword">new</span> Rat();</span><br><span class="line">        Jerry = <span class="keyword">new</span> DecorateAnimal(Jerry,FlyFeatuer.class);</span><br><span class="line">        Jerry = <span class="keyword">new</span> DecorateAnimal(Jerry,DigFeatuer.class);</span><br><span class="line">        Jerry.doStuff();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>反射让模板方法模式更强大</strong></font>，模板方法模式：定义一个操作中的算法骨架，将一些步骤延迟到子类中，使子类不改变一个算法的结构即可定义该算法的某些特定的步骤，即父类定义抽象模板为骨架，其中包括基本方法(由子类实现的方法，并且在模板方法被调用)和模板方法(实现对基本方法的调用，完成固定的逻辑)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsPopulator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">dataInitialing</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        doInit();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">protected</span>  <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPopulator</span> <span class="keyword">extends</span> <span class="title">AbsPopulator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*初始化用户表，如创建，加载数据等*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基于反射增强的模板方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsPopulator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">dataInitialing</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        doInit();</span><br><span class="line">        <span class="comment">//获得所有public方法</span></span><br><span class="line">        Method[] methods = getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m:methods)&#123;</span><br><span class="line">            <span class="comment">//判断是否是数据初始化方法</span></span><br><span class="line">            <span class="keyword">if</span>(isIinitDataMethod(m))&#123;</span><br><span class="line">                m.invoke(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIinitDataMethod</span><span class="params">(Method m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.getName().startsWith(<span class="string">&quot;init&quot;</span>)&amp;&amp;<span class="comment">//init开始</span></span><br><span class="line">                Modifier.isPublic(m.getModifiers())&amp;&amp;<span class="comment">//公开的方法</span></span><br><span class="line">                m.getReturnType().equals(<span class="string">&quot;Void.Type&quot;</span>)&amp;&amp;<span class="comment">//返回类型为void</span></span><br><span class="line">                !m.isVarArgs()&amp;&amp;<span class="comment">//输入参数不为空</span></span><br><span class="line">                 !Modifier.isAbstract(m.getModifiers());<span class="comment">//不能为抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPopulator</span> <span class="keyword">extends</span> <span class="title">AbsPopulator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inituser</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitPassword</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitJobz</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inituser</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*初始化用户表，如创建，加载数据等*/</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用反射后，不需要定义任何抽象方法，只需要定义一个基本的方法鉴别器，即可加载否和规则的基本方法，模板方法根据鉴别器返回执行相应的方法。</p><ul><li><input checked="" disabled="" type="checkbox"> <font color="#409EFF"><strong>不需要太多的关注反射效率</strong></font>，获得一个泛型类的实际泛型类型。这个Demo有点问题，以后再研究</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span>&#123;</span><br><span class="line">    <span class="comment">//获得一个泛型类的实际泛型类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Class&lt;T&gt; <span class="title">getGenricClassType</span><span class="params">(Class clz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回 Type表示此所表示的实体（类，接口，基本类型或void）的直接超类 类</span></span><br><span class="line">        Type type = clz.getGenericSuperclass();</span><br><span class="line">        <span class="comment">//ParameterizedType表示一个参数化类型，如Collection &lt;String&gt;。</span></span><br><span class="line">        <span class="keyword">if</span>(type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            ParameterizedType pt = (ParameterizedType)&#123;</span><br><span class="line">                ParameterizedType pt = (ParameterizedType)type;</span><br><span class="line">                Type[] types = pt.getActualTypeArguments();</span><br><span class="line">                <span class="keyword">if</span> (types.length&gt;<span class="number">0</span>&amp;&amp;types[<span class="number">0</span>] <span class="keyword">instanceof</span> Class)&#123;</span><br><span class="line">                    <span class="keyword">return</span> (Class)types[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (Class)Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的&lt;code&gt;生命被剥夺&lt;/code&gt;了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是&lt;code&gt;比死亡更可怕的事&lt;/code&gt;。——–王小波&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://liruilongs.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://liruilongs.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JAVA" scheme="https://liruilongs.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>关于 MVVM和MVC的一些总结</title>
    <link href="https://liruilongs.github.io/2021/06/26/%E5%85%B3%E4%BA%8E%20MVVM%E5%92%8CMVC%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://liruilongs.github.io/2021/06/26/%E5%85%B3%E4%BA%8E%20MVVM%E5%92%8CMVC%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</id>
    <published>2021-06-25T16:00:00.000Z</published>
    <updated>2021-06-26T19:02:59.410Z</updated>
    
    <content type="html"><![CDATA[<p>爱自己，是终生浪漫的开始    ——王尔德</p><span id="more"></span><hr><h3 id="我的需求："><a href="#我的需求：" class="headerlink" title="我的需求："></a><font color="#F56C6C">我的需求</font>：</h3><ul><li>晚上练完车之后,之前参考我毕设的一个小伙伴要答辩，问了我一个问题，结果问的一下不知道怎么回答….<code>以下是我回答他问题的答案</code>：所以在回答完他之后，赶快整理一波..<br><img src="https://img-blog.csdnimg.cn/20210609154655919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="我需要解决的问题："><a href="#我需要解决的问题：" class="headerlink" title="我需要解决的问题："></a><font color="#F56C6C">我需要解决的问题</font>：</h3><ul><li>MVVM到底是个什么东东，和前后端有没有关系，它和MVC区别是啥，有啥优势。</li></ul><h3 id="我是这样做的："><a href="#我是这样做的：" class="headerlink" title="我是这样做的："></a><font color="#F56C6C">我是这样做的</font>：</h3><ul><li><code>百度</code>寻找，找了一些关于MVVM论文，博客，梳理出自己的答案。</li><li>嗯，资源比较零散，准确性有待考量，**<font color="#F56C6C">所以不对的地方请小伙伴指出来</font>**。</li></ul><p><strong><font color="009688">爱自己，是终生浪漫的开始    ——王尔德</font></strong></p><hr><p>对于MVC想来小伙伴是不陌生的，但是网上的资源各抒己见….我也整的晕头转向的，可能有<code>前(后)端</code>,有<code>胖(瘦)客户端</code>框架应用，具体还有细微的差异。</p><blockquote><p>If you put ten software architects into a room and have them discuss what the Model-View-Controller pattern is, you will end up with twelve different opinions. –Josh Smith[^3]<br>如果你把10个软件架构师放在一个房间里，让他们讨论模型-视图-控制器模式是什么，你最终会得到12种不同的观点。</p></blockquote><p><strong><font color="#67C23A">我们这里讨论的<code>MVC</code>和<code>MVVM</code>是以<code>BS架构</code>为基础的<code>java Web</code>中的应用，因为博主只接触了这方面的，关于网上提到的<code>IOS</code>和一些<code>客户端</code>框架，没有接触过。本博客也不涉及。所以如果听都没听过<code>java Web</code>的,或者没了解过 <code>Web框架</code>的小伙伴个人感觉这篇博客不太适合，不太建议继续读下去。</font></strong></p><p>我们先看看MVVM吧！嘻嘻  ^ _ ^</p><h4 id="MVVM-名词解释："><a href="#MVVM-名词解释：" class="headerlink" title="MVVM 名词解释："></a>MVVM 名词解释：</h4><p>   <code>MVVM</code>是<code>Model-View-ViewModel</code>的简写。它本质上就是<code>MVC</code>的改进版。MVVM 就是将其中的<code>View的状态和行为抽象化</code>，让我们将<code>视图 UI </code>和<code>业务逻辑</code>分开。当然这些事<code>ViewModel</code>已经帮我们做了，它可以取出 <code>Model</code> 的数据同时帮忙处理<code>View</code>中由于需要展示内容而涉及的业务逻辑。<code>MVVM（Model-View-ViewModel）框架</code>的由来便是<code>MVP（Model-View-Presenter）模式</code>与<code>WPF</code>结合的应用方式时发展演变过来的一种<code>新型架构框架</code>。它立足于原有<code>MVP</code>框架并且把<code>WPF</code>的新特性糅合进去，以应对客户日益复杂的需求变化。<a href="%5B%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%5Bdb/ol%5D.https://baike.baidu.com/item/MVVM/96310?fr=aladdin%5D(https://baike.baidu.com/item/MVVM/96310?fr=aladdin)">^1</a></p><p> <code>MVVM</code>upright=1.5 <code>MVVM（Model–view–viewmodel）</code>是一种<code>软件架构模式</code>。 <code>MVVM</code>有助于将<code>图形用户界面的开发</code>与<code>business logic</code>(业务逻辑)或<code>后端逻辑</code>（数据模型）的开发<code>分离</code>开来，这是通过置标语言或GUI代码实现的。MVVM的视图模型是一个<code>值转换器</code>， 这意味着<code>视图模型</code>负责从<code>模型</code>中<code>暴露（转换）数据对象</code>，以便轻<code>松管理和呈现对象</code>。在这方面，<code>视图模型</code>比<code>视图</code>做得更多，并且处理大部分<code>视图</code>的<code>显示逻辑</code>。 视图模型可以实现<code>中介者模式</code>，组织对视图所支持的用例集(Model)的后端逻辑的访问。 <a href="%5B%E4%B8%8A%E6%B5%B7%E7%A7%91%E5%88%9B%E6%95%B0%E6%8D%AE%E8%B5%84%E6%BA%90%E4%B8%AD%E5%BF%83%5Bdb/ol%5D.http://www.sstir.cn/search/list?keyword=MVVM%5D(http://www.sstir.cn/search/list?keyword=MVVM)">^2</a></p><h4 id="MVVM-的发展历程"><a href="#MVVM-的发展历程" class="headerlink" title="MVVM 的发展历程"></a>MVVM 的发展历程</h4><p><code>MVVM</code>是<code>马丁·福勒</code>的<code>PM（Presentation Model）设计模式</code>的变体。<code>MVVM</code>以相同的方式<code>抽象</code>出<code>视图的状态和行为</code>， 但<code>PM</code>以<code>不依赖于特定用户界面平台</code>的方式抽象出<code>视图</code>（建立了视图模型）。 <code>MVVM</code>和<code>PM</code>都来自<code>MVC模式</code>。 <code>MVVM</code>由微软架构师<code>Ken Cooper</code>和<code>Ted Peters</code>开发，通过利用<code>WPF（微软.NET图形系统）</code>和<code>Silverlight（WPF的互联网应用衍生品）</code>的特性来<code>简化用户界面</code>的<code>事件驱动程式设计</code>。 微软的WPF和Silverlight架构师之一<code>John Gossman</code>于<code>2005</code>年在他的博客上发表了<code>MVVM</code>。 MVVM也被称为<code>model-view-binder</code>，特别是在不涉及<code>.NET平台</code>的实现中。ZK（Java写的一个Web应用框架）和KnockoutJS（一个JavaScript库）使用<code>model-view-binder</code>。<a href="%5B%E4%B8%8A%E6%B5%B7%E7%A7%91%E5%88%9B%E6%95%B0%E6%8D%AE%E8%B5%84%E6%BA%90%E4%B8%AD%E5%BF%83%5Bdb/ol%5D.http://www.sstir.cn/search/list?keyword=MVVM%5D(http://www.sstir.cn/search/list?keyword=MVVM)">^2</a></p><h4 id="MVC到MVVM-的发展历程"><a href="#MVC到MVVM-的发展历程" class="headerlink" title="MVC到MVVM 的发展历程"></a>MVC到MVVM 的发展历程</h4><p>二十世纪八十年代<code>施乐帕克实验室</code>提出了<code>MVC</code>的概念，MVC的全称即<code>Model-View-Controller</code>，是<code>模型(model)</code>一<code>视图(view)</code>一<code>控制器(controller)</code>的缩写“…，它是一种<code>客户端软件开发框架</code>[^4]，个人认为，其实最初的<code>Java Web</code>来讲，<code>Model2</code> 即<code>Servlet+JSP</code>也是用的这个结构，所以说<code>Model2(MVC)</code>它相对已<code>Model1(Javabean+JSP)</code>来讲，已经实现了<code>View</code>和<code>Model</code>的部分解耦，但是不彻底，如图</p><p><img src="https://img-blog.csdnimg.cn/2021061311434099.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="Java Web Model2"><br><code>view</code>负责显示，<code>Model</code>负责提供数据，<code>Controller</code>负责逻辑的处理，其实现的流程大概是：[^4]</p><ul><li>(1)当用户需要发送请求时，首先是在View发送请求，由View将指令传送到Controller里。</li><li>(2)Controller接收到指令之后，先完成所需要的业务逻辑，然后要求Model根据业务逻辑改变状态；</li><li>(3)Model将新的数据发送给View，View则根据新的数据更新视图，从而用户的请求得到反馈。</li></ul><p>在<code>MVC</code>框架中，<code>View</code>是可以直接访问<code>Model</code>的(JSP里直接使用<code>JavaBean</code>)，这样不可避免的使<code>View</code>里面也需要包括一些<code>业务逻辑</code>，同时还需要<code>Model</code>保持不变，而<code>Model</code>又对应着多个不同的显示(View)，所以总体说来就是，在MVC模型里面，<code>Model</code>不依赖<code>View</code>，但是<code>View</code>是依赖于<code>Model</code>的。这样就导致更改<code>View</code>比较困难，且<code>业务无法重用</code>。从而<code>MVC框架的弊端就显现出来</code>[^4]，这也是使用<code>Servlet+JSP</code>的弊端。前后端没有解耦，<code>Model</code>与<code>View</code>没有彻底解耦。</p><p><strong><font color="#F56C6C">为了解决<code>MVC</code>框架中<code>View</code>和<code>Model</code>联系紧密的问题，开发者研究开发了<code>MVP</code>模式，</font></strong><code>MVP</code>即<code>Model-View-Presenter</code>，即把MVC中的<code>Controller</code>换成了<code>Presenter</code>，目的就是为了完全切断<code>View</code>跟<code>Model</code>之间的联系，在MVP模式中，<code>View</code>负责<code>视图的显示</code>,<code>Model</code>负责<code>提供数据</code>，<code>Presenter</code>则主要负责<code>逻辑业务</code>的处理。[^4] </p><p><strong><font color="#009688">有些<code>SSM+JSP</code>的开发方式也是基于这种，我之前的公司就这样写，前后端不分离使用的<code>JSP</code>，但是交互全是<code>Ajax</code>，传递的全是<code>JSON</code>，也没有返回<code>ModelAndView</code>，个人感觉这里其实是使用了<code>MVP</code>的模式。以前后端<code>不分离</code>的方式<code>丢弃模板引擎的服务端渲染</code>，追求前后端<code>分离</code>中<code>彻底解耦了View和Model</code>。看上去怪怪的，其实有时候项目开发更多的是和<code>业务</code>、<code>体量</code>、<code>成本</code>、<code>效益</code>等有关系，综合考虑，选最合适，不一定要按照<code>常规</code>的<code>构建方式</code>考虑，比如正常思考可能<code>不分离</code>是为了<code>服务端渲染</code>，<code>首屏快载</code>，<code>SEO</code>等，分离是为了<code>降低服务器压力</code>，<code>接口复用</code>，前后端<code>工作职责解耦</code>.</font></strong></p><p>对于<code>SSM</code>+<code>模板引擎</code>的开发方式</p><ul><li>如何是返回<code>Modelandview</code>的话，那<code>缺点</code>就是<code>后端路由</code>，前后端没有<code>彻底解耦</code>，优点就是<code>服务端渲染</code>，返回的是整个<code>构建好的页面</code>.</li><li>如果返回<code>JSON</code>的话，那优点就是<code>前后端彻底解耦</code>，<code>接口复用</code>，但是没有利用模板引擎的<code>服务端渲染</code>。</li><li>如果体量很大，那前后端是两个人写，那使用<code>Modelandview</code>的方式就很麻烦，需要<code>接口协调</code>，而且工作<code>职责不清晰</code>。会浪费好多时间。JSON就方便很多。</li><li>如果体量不是他大，前端的东西也不是特别多，考虑成本问题，前后端一个人写，那<code>Modelandview</code>就很合适，节省了接口协调，对接等时间成本问题。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210613133912429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在<code>MVP</code>框架中，<code>View</code>无法直接再与<code>Model</code>交互，<code>View</code>和<code>Model</code>之间的通信都是通过<code>Presenter</code>进行完成的，所有的交互都在<code>Presenter</code>内部发生，即由<code>Presenter</code>充当了<code>View</code>和<code>Model</code>的桥梁，做到<code>View-Model</code>之间通信的<code>完全隔离</code>。<code>Presenter</code>完全把<code>Model</code>和<code>View</code>进行分离，将主要的程序逻辑放在Presenter里实现。[^4]</p><p>**<font color="##00C5CD"><code>Presenter</code>与<code>View</code>也是没有直接相关联的，而是通过已定义的<code>接口进行交互</code></font>**，从而使得在变更<code>View</code>的时候可以保持<code>Presenter</code>的不变，即保证了<code>Presenter</code>的可重用性(接口的复用性)，同时也解决了<code>MVC</code>框架中的<code>View</code>和<code>Model</code>关联紧密的问题。[^4]</p><p>这样之后，对于<code>Web</code>项目来讲，前后端都是通过数据进行交互，那<code>路由</code>怎么处理，前端只能实现简单一部分跳转，涉及到复杂的需要<code>通过Controller(Presenter)来处理的路由</code>怎么处理，或者带状态的路由如何跳转，即<code>Controller无法控制使用那个View</code>。个人感觉，<code>Web</code>系统来讲这个时候<code>完全的前后端分离</code>可能不是适合所有项目，而且分离之后留给<code>前端要解决的问题</code>可能也不是能很好的解决。所以这个时候….</p><p>有个叫<code>Rod Johnson </code>带领一帮人搞出的<code>SpringMVC</code>，不像桌面应用的<code>MVC</code>， 这里的Model没法给View 发通知。[^5]也不像<code>MVP</code>, 这里的<code>Controller </code>可以控制<code>View</code>来实现路由。即前后后端没有分离，但是将原来的<code>View的构建解耦</code>了。由<code>模板</code>和<code>数据</code>构成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">customException</span><span class="params">(MaxUploadSizeExceededException e)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;javaboy&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即降低了<code>View</code>和<code>Model</code>耦合，同时又实现了<code>后端路由</code>。<br><img src="https://img-blog.csdnimg.cn/20210613144005943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对于大型项目而言，<code>前端</code>的东西原来越多，造成<code>服务端</code>的压力越来越大，而且由于<code>MVP</code>的出现，逐渐向<code>前后端分离</code>靠拢，分离之后，View分担<code>服务端</code>的压力，或者说是<code>浏览器</code>分担了<code>服务器</code>压力，包括页面渲染，路由等问题，这时侯MVVM出现了..（**<font color="#E6A23C">这里是自己猜的，没找到相关资料</font>**）</p><p><code>MVVM</code>框架便是<code>前后端分离框架发展史</code>上的一次思想的完全变革。它是将<code>数据模型双向绑定</code>的思想作为变革的<code>核心</code>，即<code>View</code>的变动，自动反映在<code>ViewModel</code>上面，而<code>ViewModel</code>的变动也会随即反映在<code>View</code>上面，从而实现<code>数据与模型的双向绑定</code>。[^4]</p><p>在<code>MVVM</code>框架中，<code>View</code>用于发送用户的<code>交互请求</code>，之后将用户请求转交给<code>ViewModel</code>，<code>ViewModel</code>即可根据用户请求操作<code>Model</code>数据更新，待<code>Model</code>数据更新完毕，便会通知<code>ViewModel</code>数据发生了变化，然后<code>ViewModel</code>就会即刻更新<code>View</code>数据，完成视图的更新，从而完成用户的请求。[^4]<br><img src="https://img-blog.csdnimg.cn/20210613192219620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>虽然<code>MVVM</code>框架和之前的<code>MVC</code>、<code>MVP</code>模式的目的相同，即完成<code>视图(View)和模型(Model)的分离</code>，但它却有着明显的优势。[^4]</p><ul><li>首先，MVVM框架中的<code>View</code>完全可以独立于<code>Model</code>发生<code>变化和修改</code>，彻底解耦，View发生变化时Model可以不变，同样，当Model发生变化时View也可以不变化，并且一个<code>ViewModel</code>可以绑定到多个不同的<code>View</code>上面，这就体现了<code>MVVM框架的低耦合性</code>。</li><li>其次，绑定在一个<code>ViewModel</code>上面的多个<code>View</code>都可以使用<code>ViewModel</code>里面的视图逻辑，完成了框架可重用性的特性。除此之外，<code>MVVM框架</code>还具有<code>可独立开发</code>、<code>可测试</code>等特性，把框架作用发挥到最大化，也因此成为了开发者们青睐的框架。。</li></ul><p>对于<code>MVVM</code>这种模式主要用于构建<code>基于事件驱动的 UI 平台</code>，对于前端开发领域中<code>数据与界面相混合</code>的情况特别适用[^6]，其中 </p><ul><li><code>Model</code> 仅仅只是代表应用程序所需的数据信息，它<code>不关注</code>任何行为；</li><li><code>View</code> 是软件中与用户进行直接交互的部分，它需要响应 <code>ViewModel</code> 的事件并格式化数据，<code>不负责</code>控制应用的状态；</li><li><code>ViewModel</code> 用于<code>封装业务逻辑层</code>，这点类似于 MVC 模式中的控制器，它<code>控制View </code>的很多显示逻辑，它可以把<code>数据模型</code>的变化<code>传递</code>给<code>视图</code>，也可以把视图中数据的变化传递给数据模型，即在 Model 和View 之间建立了双向绑定。</li></ul><h5 id="Vue与MVVM"><a href="#Vue与MVVM" class="headerlink" title="Vue与MVVM"></a>Vue与MVVM</h5><p>我第一次看到<code>MVVM</code>是因为<code>Vue</code>，相信好多小伙伴也是<code>Vue</code>认识<code>MVVM</code>架构模式。Vue官网中讲到：**<font color="#67C23A">虽然没有完全遵循 <code>MVVM</code> 模型，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示组件实例</font>**<br><img src="https://img-blog.csdnimg.cn/20210613191156951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过<code>双向数据绑定</code>连接<code>视图</code>层和<code>数据</code>，而实际的<code>界面 UI 操作</code>（<code>DOM 操作</code>）被封装成<code>对应的指令</code>（Directives）和<code>过滤器</code>（Filters）</p><h4 id="MVVM原理：-7"><a href="#MVVM原理：-7" class="headerlink" title="MVVM原理：[^7]"></a>MVVM原理：[^7]</h4><p>实现<code>数据绑定</code>的做法有大致如下几种：</p><ul><li><strong><font color="#009688">脏值检查（angular.js）</font></strong>: <code>angular.js</code> 是通过<code>脏值检测</code>的方式比对数据是否有<code>变更</code>，来决定是否<code>更新视图</code>，最简单的方式就是通过 <code>setInterval()</code> 定时<code>轮询检测</code>数据变动，angular只有在指定的<code>事件触发时</code>进入<code>脏值检测</code>.<ul><li><code>DOM</code>事件，譬如用户输入文本，点击按钮等。( <code>ng-click </code>)</li><li><code>XHR</code>响应事件 (<code> $http</code> )</li><li>浏览器<code>Location</code>变更事件 ( <code>$location</code> )</li><li><code>Timer</code>事件<code>( $timeout , $interval )</code></li><li>执行 <code>$digest()</code> 或 <code>$apply()</code></li></ul></li><li><strong><font color="#009688">数据劫持（vue.js）</font></strong>:<code>数据劫持</code>，指的是在<code>访问</code>或者<code>修改</code>对象的某个属性时，通过一段代码<code>拦截</code>这个行为，进行<code>额外的操作</code>或者<code>修改返回结果</code>。简单地说，就是当我们<code>触发函数</code>的时候 动一些手脚做点我们自己想做的事情，也就是所谓的 <code>&quot;劫持&quot;操作</code><ul><li><blockquote><p>在Vue中其实就是通过<code>Object.defineProperty</code>来劫持对象属性的<code>setter和getter</code>操作，并“种下”一个<code>监听器</code>，当数据发生变化的时候发出通知:<code>Object.defineProperty(obj,prop,descriptor)</code><br><code>参数：</code><br>obj:目标对象<br>prop:需要定义的属性或方法的名称<br>descriptor:目标属性所拥有的特性<br><code>可供定义的特性列表：</code><br>value:属性的值<br>writable:如果为false，属性的值就不能被重写。<br>get: 一旦目标属性被访问就会调回此方法，并将此方法的运算结果返回用户。<br>set:一旦目标属性被赋值，就会调回此方法。<br>configurable:如果为false，则任何尝试删除目标属性或修改属性性以下特性（writable,    configurable, enumerable）的行为将被无效化。<br>enumerable:是否能在for…in循环中遍历出来或在Object.keys中列举出来。</p></blockquote></li><li><blockquote><p><code>Proxy数据代理</code>:Proxy 可以被认为是<code> Object.defineProperty() 的升级版</code>。外界对<code>某个对象的访问</code>，都必须经过这层<code>拦截</code>。因此它是针对 整个<code>对象</code>，而不是 对象的某个<code>属性</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;test&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data,key,&#123;</span><br><span class="line">        <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;监听到数据发生了变化&#x27;</span>);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(‘myText’).value=newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(‘myText’).addEventListener(‘keyup’,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"> data.name=e.target.value; <span class="comment">// 监听 View 的变化，同步更新 Model</span></span><br><span class="line">&#125;);</span><br><span class="line">data.name <span class="comment">//控制台会打印出 “get”</span></span><br><span class="line">data.name = <span class="string">&#x27;hxx&#x27;</span> <span class="comment">//控制台会打印出 &quot;监听到数据发生了变化&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> handle = &#123;</span><br><span class="line">    <span class="comment">//target目标对象 key属性名 receiver实际接受的对象</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key,receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// Reflect相当于映射到目标对象上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,key,value,receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr要拦截的对象，handle定义拦截行为</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(arr,handle)</span><br><span class="line">proxy.push(<span class="number">4</span>) <span class="comment">//可以翻到控制台测试一下会打印出什么</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><strong><font color="#009688">发布者-订阅者模式（backbone.js）</font></strong>:<blockquote><p>上述介绍了简单的<code>一对一双向绑定</code>的实现，即一个<code>数据模型</code>只与一个<code>视图</code>进行绑定。当多个<code>View</code>与一个 <code>Model </code>进行绑定时，每次更新 <code>Model </code>时需要在<code> Model</code> 的<code>set</code>访问器属性中更新多个 <code>View</code>，这样硬编码的方式不利于<code>后期的维护</code>。为了解决<code>硬编码带来的耦合性过强</code>的问题，在在实际实现中，需要使用到设计模式中的<code>发布 - 订阅模式</code>。</p></blockquote></li></ul><p><code>发布 - 订阅模式</code>（又称<code>观察者</code>模式）是一种常用的设计模式，该模式包含<code>发布者</code>和<code>订阅者</code>两种角色。可以让<code>多个订阅者</code>订阅同<code>一个发布者</code>发布的主题，当发布者的主题发生变化时，对外发送一个通知，所有订阅了该主题的订阅者都会接收到更新的消息。因此，观察者模式定义的是<code>一种一对多的关系</code>。发布 - 订阅模式非常适合于 MVVM 双向绑定中多个视图绑定到同一个数据模型的情形。</p><h4 id="实现双向数据绑定步骤-7"><a href="#实现双向数据绑定步骤-7" class="headerlink" title="实现双向数据绑定步骤[^7]"></a>实现双向数据绑定步骤[^7]</h4><p>要实现<code>mvvm</code>的双向绑定，就必须要实现以下几点：</p><ol><li>实现一个<code>指令解析器Compile</code>，对每个元素节点的指令进行扫描和解析，根据<code>指令模板</code>替换数据，以及<code>绑定</code>相应的<code>更新函数</code></li><li>实现一个<code>数据监听器Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并<code>通知订阅者（Dep）</code></li><li>实现一个<code>Watcher</code>，Watcher是订阅 - 发布模式中订阅者的实现，作为连接<code>Observer</code>和<code>Compile</code>的桥梁，能够订阅并收到每个属性变动的通知，<code>执行指令</code>绑定的相应回函数 （发布），从而<code>更新视图</code></li><li>MVVM入口函数，整合以上三者<br><img src="https://img-blog.csdnimg.cn/20210613210828468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当<code>新建</code>一个<code> Vue 对象</code>时，框架进入<code>初始化</code>阶段。Vue 在初始化阶段主要执行两个操作：</li></ol><ul><li>第一个是<code>遍历系统中数据</code>的所有属性，来对各个属性的<code>变化添加监听</code>；</li><li>第二个操作是利用<code>指令编译器 Compile </code>对视图中绑定的指令进行扫描<code>进行视图的初始化</code>，然后订阅 <code>Watcher</code> 来<code>更新视图</code>，此时 <code>Watcher</code> 会将自己添加到<code>消息订阅器Dep</code>中。至此，Vue的初始化过程结束。</li></ul><p>在系统运行过程中，一旦系统中的数据模型发生了变化，<code>观察者 Observer </code>的 setter 访问器属性就会被触发，此时消息<code>订阅中心</code> Dep 会遍历它所维护的所有<code>订阅者</code>，对于每一个订阅了该数据的<code>对象</code>，向它发出一个<code>更新通知</code>，订阅者收到通知后就会对<code>视图</code>进行相应的更新。以上过程不断往复循环，这就是 MVVM 模式在 Vue.js 中的运行原理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Two-way data-binding&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">        &#123;&#123; text &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function observe (obj, vm) &#123;</span><br><span class="line">            Object.keys(obj).forEach(function (key) &#123;</span><br><span class="line">                defineReactive(vm, key, obj[key]);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        function defineReactive (obj, key, val) &#123;</span><br><span class="line">            var dep = new Dep();</span><br><span class="line">            Object.defineProperty(obj, key, &#123;</span><br><span class="line">                get: function () &#123;</span><br><span class="line">                    if (Dep.target) dep.addSub(Dep.target);</span><br><span class="line">                    return val</span><br><span class="line">                &#125;,</span><br><span class="line">                set: function (newVal) &#123;</span><br><span class="line">                    if (newVal === val) return</span><br><span class="line">                    val = newVal;</span><br><span class="line">                    dep.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        function nodeToFragment (node, vm) &#123;</span><br><span class="line">            var flag = document.createDocumentFragment();</span><br><span class="line">            var child;</span><br><span class="line">            while (child = node.firstChild) &#123;</span><br><span class="line">                compile(child, vm);</span><br><span class="line">                flag.appendChild(child);</span><br><span class="line">            &#125;</span><br><span class="line">            return flag;</span><br><span class="line">        &#125;</span><br><span class="line">        function compile (node, vm) &#123;</span><br><span class="line">            var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</span><br><span class="line">            // 节点类型为元素</span><br><span class="line">            if (node.nodeType === 1) &#123;</span><br><span class="line">                var attr = node.attributes;</span><br><span class="line">                // 解析属性</span><br><span class="line">                for (var i = 0; i &lt; attr.length; i++) &#123;</span><br><span class="line">                    if (attr[i].nodeName == &#x27;v-model&#x27;) &#123;</span><br><span class="line">                        var name = attr[i].nodeValue; // 获取v-model绑定的属性名</span><br><span class="line">                        node.addEventListener(&#x27;input&#x27;, function (e) &#123;</span><br><span class="line">                            // 给相应的data属性赋值，进而触发该属性的set方法</span><br><span class="line">                            vm[name] = e.target.value;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        node.value = vm[name]; // 将data的值赋给该node</span><br><span class="line">                        node.removeAttribute(&#x27;v-model&#x27;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                new Watcher(vm, node, name, &#x27;input&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 节点类型为text</span><br><span class="line">            if (node.nodeType === 3) &#123;</span><br><span class="line">                if (reg.test(node.nodeValue)) &#123;</span><br><span class="line">                    var name = RegExp.$1; // 获取匹配到的字符串</span><br><span class="line">                    name = name.trim();</span><br><span class="line">                    new Watcher(vm, node, name, &#x27;text&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        function Watcher (vm, node, name, nodeType) &#123;</span><br><span class="line">        //  this为watcher函数</span><br><span class="line">            Dep.target = this;</span><br><span class="line">        //  console.log(this);</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.node = node;</span><br><span class="line">            this.vm = vm;</span><br><span class="line">            this.nodeType = nodeType;</span><br><span class="line">            this.update();</span><br><span class="line">            Dep.target = null;</span><br><span class="line">        &#125;</span><br><span class="line">        Watcher.prototype = &#123;</span><br><span class="line">            update: function () &#123;</span><br><span class="line">                this.get();</span><br><span class="line">                if (this.nodeType == &#x27;text&#x27;) &#123;</span><br><span class="line">                    this.node.nodeValue = this.value;</span><br><span class="line">                &#125;</span><br><span class="line">                if (this.nodeType == &#x27;input&#x27;) &#123;</span><br><span class="line">                    this.node.value = this.value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 获取daa中的属性值</span><br><span class="line">            get: function () &#123;</span><br><span class="line">                this.value = this.vm[this.name]; // 触发相应属性的get</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function Dep () &#123;</span><br><span class="line">            this.subs = []</span><br><span class="line">        &#125;</span><br><span class="line">        Dep.prototype = &#123;</span><br><span class="line">            addSub: function(sub) &#123;</span><br><span class="line">                this.subs.push(sub);</span><br><span class="line">            &#125;,</span><br><span class="line">            notify: function() &#123;</span><br><span class="line">                this.subs.forEach(function(sub) &#123;</span><br><span class="line">                    sub.update();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        function Vue (options) &#123;</span><br><span class="line">            this.data = options.data;</span><br><span class="line">            var data = this.data;</span><br><span class="line">            observe(data, this);</span><br><span class="line">            var id = options.el;</span><br><span class="line">            var dom = nodeToFragment(document.getElementById(id), this);</span><br><span class="line">            // 编译完成后，将dom返回到app中</span><br><span class="line">            document.getElementById(id).appendChild(dom);</span><br><span class="line">        &#125;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;app&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                text: &#x27;hello world&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h4><ul><li><p>**<font color="#009688">架构意义角度(Web端的角度)</font>**：<code>MVC</code>和<code>MVVM</code>在本质上都是为了<code>实现View和Model的解耦</code>，<code>MVC</code>是通过<code>Controller</code>实现了<code>View</code>和<code>Model</code>的<code>解耦</code>，一般用与客户端，或者<code>Web</code>端的整个架构过程；而<code>MVVM</code>是在<code>MVC</code>发展到<code>MVP</code>后(为了彻底解决View和Model的耦合问题)，在提出<code>前后端分离</code>的基础上(考虑Coltroller的复用性，接口复用性)，对<code>View层</code>进行了<code>增强(Vue.js)</code>，或者说细化了View层的表现手法，提出了通过<code>ViewModel</code>对视图层的<code>View</code>和<code>Model</code>解耦。<br>个人感觉<code>MVVM</code>和<code>MVP</code>的整体<code>架构</code>是有<code>相似</code>的地方的，不同的是面对的<code>问题域</code>不同，<code>MVP</code>是<code>Web</code>架构整体的解决方案，<code>MVVM</code>主要用于构建<code>基于事件驱动的 UI 平台(界面)</code>，适用于<code>前端</code>开发领域中<code>数据与界面相混合</code>的情况，所以它只专注于<code>视图层</code>，<code>抽象</code>出<code>视图</code>的状态和行为，实现了<code>用户界面的UI(View)</code>和<code>数据(Model)</code>的<code>解耦</code>。这个<code>View</code>和<code>Model</code>虽然和<code>MVC</code>中描述的一样，但是不相同的，可以理解为<code>MVC</code>中<code>View</code>中包含了<code>MVVM</code>的架构方式。<br>一般<code>前后端分离</code>的<code>Web</code>开发中会结合<code>MVC</code>和<code>MVVM</code>两种架构模式。使用<code>MVC</code>构建整体的<code>Web</code>架构，使用<code>MVVM</code>解决<code>View</code>层<code>DOM</code>和<code>data</code>的耦合问题。<br><img src="https://img-blog.csdnimg.cn/20210614013954141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong><font color="#009688">设计模式角度考虑</font></strong> ：<code>MVC</code>是基于<code>观察者</code>设计模式的，<code>Model</code>作为一个主题，<code>View</code>作为观察者，当一个<code>Model</code>变化时，会通知更新一个或多个依赖的<code>View</code>，反之；<br>MVVM可以看做是基于<code>中介者</code>设计模式和<code>观察者</code>设计模式，<code>View</code>和<code>Model</code>通过<code>ViewModel</code>这个<code>中介者对象</code>进行交互，解耦了<code>View</code>和<code>Mode</code>l的同时实现<code>数据双向绑定</code>。<br>同时<code>ViewModel</code> 作为一个<code>主题对象</code>，<code>View</code>和<code>Model</code>为两个观察者(或者可以理解为<code>View</code>为主题时，<code>Model</code>为观察者，反之。这里的<code>Model View</code>起到一个<code>注册</code>，<code>通知</code>的作用，对于<code>观察者</code>模式的定义，<code>ModelView</code>是主题的行为，但实际变化的是<code>View</code>或者<code>Model</code>，**<font color="#F56C6C">个人觉得两种理解都没问题，理解不对的请小伙伴指出来</font>**)，当<code>Model</code>变化时，<code>ViewModel</code>由<code>数据绑定</code>通知并更新与之相关的多个<code>View</code>，反之，当<code>View</code>变化时，<code>ViewModel</code>由<code>DOM监听</code>通知更新相关的多个<code>Model</code>。</p></li></ul><h4 id="引用文献资料"><a href="#引用文献资料" class="headerlink" title="引用文献资料"></a>引用文献资料</h4><p>[^3]:<a href="https://zhuanlan.zhihu.com/p/54355504">浅析 web 前端 MVVM[db/ol].https://zhuanlan.zhihu.com/p/54355504</a><br>[^4]:程桂花.MVVM前后端数据交互中安全机制的研究与实现[D].浙江理工大学硕士学位设计,2017:6-7<br>[^5]:<a href="https://blog.csdn.net/wdr2003/article/details/79811767">你真的理解了MVC, MVP, MVVM吗？[db/ol].https://blog.csdn.net/wdr2003/article/details/79811767</a><br>[^6]:易剑波.基于 MVVM 模式的 WEB 前端框架的研究[D].计算机工程应用技术,2016.19:76]<br>[^7]:<a href="https://juejin.cn/post/6844903929298288647">Vue MVVM理解及原理实现[db/ol].https://juejin.cn/post/6844903929298288647</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;爱自己，是终生浪漫的开始    ——王尔德&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://liruilongs.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://liruilongs.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="系统架构" scheme="https://liruilongs.github.io/tags/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>程序人生之缘起</title>
    <link href="https://liruilongs.github.io/2021/06/20/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F%E4%B9%8B%E7%BC%98%E8%B5%B7/"/>
    <id>https://liruilongs.github.io/2021/06/20/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F%E4%B9%8B%E7%BC%98%E8%B5%B7/</id>
    <published>2021-06-19T16:00:00.000Z</published>
    <updated>2021-06-26T18:39:53.896Z</updated>
    
    <content type="html"><![CDATA[<p>傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的<code>生命被剥夺</code>了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是<code>比死亡更可怕的事</code>。——–王小波</p><span id="more"></span><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>看到这个活动，有奖，所以写一波，整理一下自己。</li></ul><p><strong><font color="009688"> 傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的生命被剥夺了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是比死亡更可怕的事。——–王小波</strong></font></p><hr><p><code>毕业</code>刚好满一年了，<code>工作</code>算起来有一年半的时间。编码时间要久一点，从<code>C</code>算起，有大概五六年了，<code>没有刻意选择，走了这条路</code>。可能是运气吧，叔本华说<code>在世上存在三种力：明智、力量、运气。我相信运气至为重要。</code>我喜欢<code>叔本华</code>，喜欢<code>木心先生</code>的<code>《素履之往》</code>，虽然读不太懂。感觉叔本华就像一个混子一样，吃喝不愁，言语无忌，写些让人活不下去的话。自己不痛不痒的。但是我还是喜欢他，比如他在<code>《人生的智慧》</code>(选至《附录和补遗》)里说<code>礼貌</code>的话我就很喜欢。他说</p><p><strong><font color="#009688">礼貌之于人就犹如温暖之于蜡。</font></strong></p><p>他定义<code>人生智慧</code>的话我也很喜欢</p><p><strong><font color="#009688">人生智慧的要点之一，是在<code>关注现在</code>和<code>计划将来</code>这两者之间达到一种恰到好处的<code>平衡</code>，这样，现在与将来才不至于互相干扰。<br>许多人太过沉迷于现在，这些是无忧无虑、漫不经心的人；也有的人则更多地关注将来，他们则是谨小慎微、忧心忡忡的杞人。</font></strong></p><p>选择并热爱编码，可能和性格有一部分原因吧。我喜欢开源精神，喜欢做出东西，学会技术的那种成就感，满足感 。因为程序是写出来了，不是说出来，而且，编码终究是自己的事。作为开发来讲，不需要和人沟通太多，不需要面对人性晦暗的一面。我是一个对不熟悉的人很内向的人，有些厌世，有些社交恐惧。喜欢简单生活的人，</p><p>我不知道大多数程序员是什么状态，聊技术，我可是夸夸其谈，说不完的话，问不完的问题。其实懂得不多，就是感兴趣。聊生活，我可能都不愿意看别人的眼睛，感觉眼睛里更多的是经历了生活磨难的人生，我理解，但不愿意妥协。你可以说我不谙世事，或者说我没情商，不会和人相处。</p><p>我大学学的是<code>信息与计算科学</code>，数学系专业，有一些编程课程，但是同学大都不爱编程，所以学的同学很少，我那时也不爱学，我上大学那时就与旁人有些不一样。总觉的那般活着人生没意义，生命浪费了，放假在家里，夜晚躺着睡不着，看着月光从阳台照进来，照在墙上，就像王小波讲的那样，<code>心里寂寞而凄凉，感到自己的生命被剥夺了</code>。半夜2点多，我绕着县城跑了一圈，我无法承受那种生命之轻。我也不知道自己怎么办。</p><p>所以读完大一，有招兵，想去，所以家里花了点钱，我去<code>当兵</code>了。在部队里的两年在现在看来，是最无忧无虑的两年快乐时光，可那时却想着早些退伍。回来之后，我开始好好学习，可能在部队里好多都是第一，回来有些难受，什么都不懂，不会。之后大概就是一直好好学习，早起晚归的样子。当然和小伙伴们的努力没法子比。</p><p>人生意义吗，那时候还是迷茫，但是自己知道走着了，即使不知道想干啥，活着有啥意义，但是知道不能一步也不走坐在哪里想。班级的学习氛围不是特别好，但是那时候遇到<code>Y</code>，一个学哲学的台湾大学生。打开了我的眼界，对于定义自己未来有了一个大概方向。</p><p>嘻嘻，晒几张大学的早上拍的照片，就是一个楼道，其实没啥可拍的。。。哈哈</p><hr><p><img src="https://img-blog.csdnimg.cn/20210620160436705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210620160553141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>嗯，之后就是一路飘摇，去年毕业后在北京工作，期间情感上遇到了倍受打击的事，一度想离开这个世界。其实是我不懂事。索性都过去了。不能释怀又如何。从那以后，感觉生活也就那样了，可能浪漫这种东西永久的在我身上消失了。我剩下的就只剩焦虑了。曾经深以为然的那种<code>苦难会给人带来崇高感 </code>的感觉消失了。<br><img src="https://img-blog.csdnimg.cn/20210620181416164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>今年5月份，因为要回老家考驾照处理一些其他事，时间定不下，项目又着急，而且家里希望我回去，所以离职了。那是我的第一份正式工作，自己状态一直很不好。很感谢公司的同事，在一个陌生的城市，大概也只有工作中让我时不时有一丝丝的温暖。回老家后，家里不太想让出去，所以离开北京在呼和浩特找了一份工作。谈好了准备入职，结果和我说工资申请不下来，很郁闷，我也不太喜欢这种干啥事都慢半拍的生活节奏，而且好多事太繁琐，一点都不干净利索，所以打算还去北京一次。不管未来怎么样，首先不要让自己内心过不去。</p><p>不管是我选择程序员，还是程序员选择了我，我觉得都挺好，虽然工作一年了，我离自己想的不依靠父母，自己攒首付买房，自己娶媳妇还很远，但是，我至少不用做自己不喜欢的工作，我至少可以通过大学的努力去选择一份自己满意的工作。我总认为，生活不仅仅是工作，但以我现在的能力还做不到，所以为我为之努力。我总认为在当下的年代里，<code>《平凡的世界》</code>里孙少平的那种诗与生活的距离是可以缩短的，因为有那么多大佬见证过。我总认为年轻人不应该读<code>《瓦尔登湖》</code>，因为<code>《瓦尔登湖》</code>中总是诉说着年轻人，希望年轻人怎么样，年轻人不应该被大众期望，应该走自己的路；应该多读读<code>《在路上》</code>、<code>《月亮与六便士》</code>之类的，去做一个年轻人，毕竟生活理想化的那些岁月终究会被无情的抹去，扼杀。剩下的大都是满眼混浊，活着慢慢的就仅仅是活着了，不是说<code>在不疯狂就老了吗？</code> 与其坐以待毙，不如试着杀出一条血路。</p><hr><p><code>最后想说，</code></p><p>人生就这样，其实大家都很忙，没人注意到你，所以，想怎么活就怎么活，如果可能，尽量让爱你的人开心一点。别的不重要。没啥事过不去的，诸多前提，首先要爱自己。生活加油  ^ _ ^  ^ _ ^</p><p>2021年还有5个月，希望努力的小伙伴都能进大厂、发大财。$ _ $ </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的&lt;code&gt;生命被剥夺&lt;/code&gt;了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是&lt;code&gt;比死亡更可怕的事&lt;/code&gt;。——–王小波&lt;/p&gt;</summary>
    
    
    
    <category term="程序人生" scheme="https://liruilongs.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="程序人生" scheme="https://liruilongs.github.io/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    <category term="北漂" scheme="https://liruilongs.github.io/tags/%E5%8C%97%E6%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>《Spring Boot+Vue全栈开发实战》读书笔记</title>
    <link href="https://liruilongs.github.io/2021/06/18/%E3%80%8ASpring%20Boot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://liruilongs.github.io/2021/06/18/%E3%80%8ASpring%20Boot+Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-06-26T19:01:56.116Z</updated>
    
    <content type="html"><![CDATA[<p>傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的<code>生命被剥夺</code>了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是<code>比死亡更可怕的事</code>。——–王小波</p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>嗯，回家处理一些事，所以离职了，之前的公司用开源技术封装了一套自己的低代码平台，所以之前学的spring Boot之类的东西都忘了很多，蹭回家的闲暇时间复习下。</li><li>笔记整体以 <strong>Spring Boot+Vue全栈开发实战</strong>一书为方向，中间穿插一些其他视频(原书作者的视频)的知识点。</li><li>嗯，生活加油，这段时间好好休养，笔记在更新中..整装待发 ^ _ ^，加油生活…</li></ul><p><strong><font color="#009688">我年青时以为金钱至上,而今年事已迈,发现果真如此  —王尔德</font></strong></p><hr><h3 id="使用XML配置搭建SSM项目"><a href="#使用XML配置搭建SSM项目" class="headerlink" title="使用XML配置搭建SSM项目"></a>使用XML配置搭建SSM项目</h3><p> <a href="https://github.com/LIRUILONGS/SSM-XML.git">代码详见：https://github.com/LIRUILONGS/SSM-XML.git</a></p><ul><li><code>新建一个maven工程，构造SSM目录结构</code><br><img src="https://img-blog.csdnimg.cn/20210601102803412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><code>添加依赖，构建配置文件</code><br><img src="https://img-blog.csdnimg.cn/20210601104651750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>SpringMVC是Spring的子容器，所以SpringMVC子容器可以访问Spring父容器，反之则不行。所以Spring的配置文件扫描除了Controller的bean，SpringMVC扫描controller的东西。<br><img src="https://img-blog.csdnimg.cn/20210601114813865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><hr><h3 id="使用-Java配置类搭建SSM项目"><a href="#使用-Java配置类搭建SSM项目" class="headerlink" title="使用 Java配置类搭建SSM项目"></a>使用 Java配置类搭建SSM项目</h3><p><a href="https://github.com/LIRUILONGS/SSM-java.git">代码详见：https://github.com/LIRUILONGS/SSM-java.git</a></p><ul><li><font color="#009688"><strong>@Configuration 注解表示这是一个配置类，在我们这里，这个配置的作用类似于 applicationContext.xml</strong></li><li><font color="#009688"><strong>@ComponentScan 注解表示配置包扫描，里边的属性和 xml 配置中的属性都是一一对应的，useDefaultFilters 表示使用默认的过滤器，然后又除去 Controller 注解，即在 Spring 容器中扫描除了 Controller 之外的其他所有 Bean 。</strong></li><li><font color="#009688"><strong>使用 Java 代码去代替 web.xml 文件，这里会用到 WebApplicationInitializer ，WebInit 的作用类似于 web.xml，这个类需要实现 WebApplicationInitializer 接口，并实现接口中的方法，当项目启动时，onStartup 方法会被自动执行，我们可以在这个方法中做一些项目初始化操作，例如加载 SpringMVC 容器，添加过滤器，添加 Listener、添加 Servlet 等。具体定义如下：</strong><br><img src="https://img-blog.csdnimg.cn/20210602140442899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><blockquote><p><code>注意</code>：<br>由于我们在 WebInit 中只是添加了 SpringMVC 的配置，这样项目在启动时只会去加载 SpringMVC 容器，而不会去加载 Spring 容器，如果一定要加载 Spring 容器，需要我们修改 SpringMVC 的配置，在 SpringMVC 配置的包扫描中也去扫描 @Configuration 注解，进而加载 Spring 容器，还有一种方案可以解决这个问题，就是直接在项目中舍弃 Spring 配置，直接将所有配置放到 SpringMVC 的配置中来完成，这个在 SSM 整合时是没有问题的，在实际开发中，较多采用第二种方案，第二种方案，SpringMVC 的配置如下：</p></blockquote><ul><li><p><font color="#009688"><strong>静态资源过滤:重写 addResourceHandlers 方法，在这个方法中配置静态资源过滤，这里我将静态资源放在 resources 目录下，所以资源位置是 classpath:/ ，当然，资源也可以放在 webapp 目录下，此时只需要修改配置中的资源位置即可。如果采用 Java 来配置 SSM 环境，一般来说，可以不必使用 webapp 目录，除非要使用 JSP 做页面模板，否则可以忽略 webapp 目录。</strong></p></li><li><p><font color="#009688"><strong>视图解析器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.javaboy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.jsp(<span class="string">&quot;/jsp/&quot;</span>, <span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径映射:控制器的作用仅仅只是一个跳转，就像上面小节中的控制器，里边没有任何业务逻辑，像这种情况，可以不用定义方法，可以直接通过路径映射来实现页面访问。如果在 XML 中配置路径映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">status-code</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这行配置，表示如果用户访问 /hello 这个路径，则直接将名为 hello 的视图返回给用户，并且响应码为 200，这个配置就可以替代 Controller 中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.javaboy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello3&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="#009688"><strong><code>JSON 配置</code>SpringMVC 可以接收JSON 参数，也可以返回 JSON 参数，这一切依赖于 HttpMessageConverter。</strong></font></p><blockquote><p>HttpMessageConverter 可以将一个 JSON 字符串转为 对象，也可以将一个对象转为 JSON 字符串，实际上它的底层还是依赖于具体的 JSON 库。<br>所有的 JSON 库要在 SpringMVC 中自动返回或者接收 JSON，都必须提供和自己相关的 HttpMessageConverter 。<br>SpringMVC 中，默认提供了 Jackson 和 gson 的 HttpMessageConverter ，分别是：MappingJackson2HttpMessageConverter 和 GsonHttpMessageConverter 。<br>正因为如此，我们在 SpringMVC 中，如果要使用 JSON ，对于 jackson 和 gson 我们只需要添加依赖，加完依赖就可以直接使用了。具体的配置是在 AllEncompassingFormHttpMessageConverter 类中完成的。<br>如果开发者使用了 fastjson，那么默认情况下，SpringMVC 并没有提供 fastjson 的 HttpMessageConverter ，这个需要我们自己提供，如果是在 XML 配置中，fastjson 除了加依赖，还要显式配置 HttpMessageConverter，如下：</p></blockquote></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="第1章Spring-Boot入门"><a href="#第1章Spring-Boot入门" class="headerlink" title="第1章Spring Boot入门"></a>第1章Spring Boot入门</h2><ul><li>提供一个快速的Spring项目搭建渠道</li><li>开箱即用,很少的Spring 配置就能运行一个Java EE项目。</li><li>提供了生产级的服务监控方案。</li><li>内嵌服务器,可以快速部署。</li><li>提供了一系列非功能性的通用配置。</li><li>纯Java配置,没有代码生成,也不需要XML配置。</li></ul><hr><h2 id="第2章-Spring-Boot基础配置"><a href="#第2章-Spring-Boot基础配置" class="headerlink" title="第2章 Spring Boot基础配置"></a>第2章 Spring Boot基础配置</h2><p>工程创建的三种方式：</p><ol><li>在线创建</li><li>通过 IDE 来创建（IntelliJ IDEA、STS）</li><li>通过改造一个普通的 Maven 工程来实现<h3 id="2-1不使用spring-boot-starter-parent"><a href="#2-1不使用spring-boot-starter-parent" class="headerlink" title="2.1不使用spring-boot-starter-parent"></a>2.1不使用spring-boot-starter-parent</h3><code>spring-boot-starter-parent</code>主要提供了如下默认配置:</li></ol><ul><li>Java版本默认使用1.8.编码格式</li><li>默认使用UTF-8.</li><li>提供Dependency Management进行项目依赖的版本管理。</li><li>默认的资源过滤与插件配置<h3 id="2-2-Spring-BootApplication"><a href="#2-2-Spring-BootApplication" class="headerlink" title="2.2 @Spring BootApplication."></a>2.2 @Spring BootApplication.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>@Spring BootApplication 是一个组合注解：</li><li>@SpringBootConfiguration原来就是一个@Configuration,所以@Spring BootConfiguration的功能就是表明这是一个配置类。开发者可以在这个类中配置Bean。从这个角度来讲,这个类所扮演的角色有点类似于Spring中applicationContext.xml文件的角色。</li><li>第二个注解@EnableAutoConfiguration表示开启自动化配置。 Spring Boot中的自动化配置是非侵入式的,在任意时刻,开发者都可以使用自定义配置代替自动化配置中的某一个配置。</li><li>第三个注解@ComponentScan完成包扫描,也是Spring中的功能。由于@ComponentScan注解默认扫描的类都位于当前类所在包的下面,因此建议在实际项目开发中把项目启动类放在根包。</li></ul><h3 id="2-3定制banner"><a href="#2-3定制banner" class="headerlink" title="2.3定制banner"></a>2.3定制banner</h3><ul><li>Spring Boot项目在启动时会打印一个banne</li><li>定制网站：<a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplicationBuilder builder = <span class="keyword">new</span> SpringApplicationBuilder(SpringBootDemoApplication.class);</span><br><span class="line">        builder.bannerMode(Banner.Mode.OFF).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Web容器配置"><a href="#2-4-Web容器配置" class="headerlink" title="2.4 Web容器配置"></a>2.4 Web容器配置</h3><h5 id="2-4-1-Tomcat配置"><a href="#2-4-1-Tomcat配置" class="headerlink" title="2.4.1 Tomcat配置"></a>2.4.1 Tomcat配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##配置了Web容器的端口号。</span></span><br><span class="line">server.port=8081  </span><br><span class="line"><span class="comment">##配置了当项目出错时跳转去的页面。</span></span><br><span class="line">server.error.path=/error  </span><br><span class="line"><span class="comment">##配置了session失效时间, 30m表示30分钟,如果不写单位,默认单位是秒。由于Tomcat中配置session过期时间以分钟为单位,因此这里单位如果是秒的话,该时间会被转换为一个不超过所配置秒数的最大分钟数,例如这里配置了119,默认单位为秒,则实际session过期时间为1分钟。</span></span><br><span class="line">server.servlet.session.timeout=30m</span><br><span class="line"><span class="comment">##表示项目名称,不配置时默认为/,如果配置了,就要在访问路径中加上配置的路径。</span></span><br><span class="line">server.servlet.context-path=/  </span><br><span class="line"><span class="comment">##表示配置Tomcat请求编码。</span></span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line"><span class="comment">##表示Tomcat最大线程数。</span></span><br><span class="line">server.tomcat.threads.max=500  </span><br><span class="line"><span class="comment">##是一个存放Tomcat运行日志和临时文件的目录,若不配置,则默认使用系统的临时目录。</span></span><br><span class="line">server.tomcat.basedir=/home/sang/tmp  </span><br><span class="line"><span class="comment">##</span></span><br></pre></td></tr></table></figure><h6 id="HTTPS的配置："><a href="#HTTPS的配置：" class="headerlink" title="HTTPS的配置："></a>HTTPS的配置：</h6><img src="https://img-blog.csdnimg.cn/20210603092337271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 密匙文件</span></span><br><span class="line">server.ssl.key-store=sang.p12</span><br><span class="line"><span class="comment">## 密匙别名</span></span><br><span class="line">server.ssl.key-alias=tomcathttps</span><br><span class="line"><span class="comment">## 就是在cmd命令执行过程中输入的密码</span></span><br><span class="line">server.ssl.key-store-password=123456</span><br></pre></td></tr></table></figure>Spring Boot不支持同时在配置中启动<code>HTTP</code>和<code>HTTPS</code>,这个时候可以配置请求重定向,将HTTP请求重定向为HTTPS请求。配置方式如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @Description : TODO 配置一个 TomcatServletWebServerFactory 的Bean，</span></span><br><span class="line"><span class="comment">     * @author Liruilong</span></span><br><span class="line"><span class="comment">     * @date  2021/6/3  11:47</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(createTomcatConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     * @Description</span></span><br><span class="line"><span class="comment">     * @author Liruilong</span></span><br><span class="line"><span class="comment">     * @date  2021/6/3  11:45</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">createTomcatConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(<span class="number">8081</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里首先配置一个TomcatServletWebServerFactory,然后添加一个Tomcat中的Connector (监听8080端口) ,并将请求转发到8081上去。<h5 id="2-4-2-Jetty配置"><a href="#2-4-2-Jetty配置" class="headerlink" title="2.4.2 Jetty配置"></a>2.4.2 Jetty配置</h5>除了Tomcat外,也可以在Spring Boot中嵌入Jetty,从spring-boot-starter-web中除去默认的Tomcat,然后加入Jetty的依赖即可配置方式如下:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-3-Undertow配置"><a href="#2-4-3-Undertow配置" class="headerlink" title="2.4.3 Undertow配置"></a>2.4.3 Undertow配置</h5>Undertow是一个红帽公司开源的Java服务器,具有非常好的性能,在Spring Boot中也得到了很好的支持,配置方式与Jetty类似。<h3 id="2-5-Properties配置"><a href="#2-5-Properties配置" class="headerlink" title="2.5 Properties配置"></a>2.5 Properties配置</h3>Spring Boot项目中的·<code>application.properties</code>配置文件一共可以出现在如下4个位置:加载的优先级从1到4依次降低<blockquote><p><img src="https://img-blog.csdnimg.cn/20210603212527840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>项目根目录下的config文件夹中。</li><li>项目根目录下。</li><li>classpath 下的config文件夹中。</li><li>classpath 下</li></ol></blockquote></li></ul><p><code>application.yml</code>配置文件的优先级与上面一致默认情况下, 如果开发者不想使用<code>application.properties</code>作为配置文件名,也可以自己定义。例如,在resources目录下创建一个配置文件<code>app.properties</code>,然后将项目打成jar包,打包成功后,使用如下命令运行:<br><img src="https://img-blog.csdnimg.cn/20210603213601202.png" alt="在这里插入图片描述"></p><h3 id="2-6类型安全配置属性"><a href="#2-6类型安全配置属性" class="headerlink" title="2.6类型安全配置属性."></a>2.6类型安全配置属性.</h3><p>Spring提供了<code>@Value注解</code>以及<code>EnvironmentAware接口</code>来将<code>Spring Environment</code>中的数据注入到属性上, Spring Boot对此进一步提出了<code>类型安全配置属性</code>(Type-safe ConfigurationProperties) ,这样即使在数据量非常庞大的情况下,也可以更加方便地将配置文件中的数据注入Bean中.<br><img src="https://img-blog.csdnimg.cn/20210603220903768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>yml类型配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">江南一点雨</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">China</span></span><br><span class="line">      <span class="attr">favorites:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">足球</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">徒步</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sang</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">GZ</span></span><br><span class="line">      <span class="attr">favorites:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">阅读</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">吉他</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sang on 2018/7/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-YAML配置"><a href="#2-7-YAML配置" class="headerlink" title="2.7 YAML配置"></a>2.7 YAML配置</h3><p><code>YAML</code>是<code>JSON的超集</code>,简洁而强大,是一种专门用来书写<code>配置文件</code>的语言,可以替代application.properties。在创建一个Spring Boot项目时,引入的<code>spring-boot-starter-web</code>依赖间接地引入了<code>snakeyaml</code>依赖, snakeyaml会<code>实现对YAML配置的解析</code>。YAML的使用非常简单,利用缩进来表示层级关系,并且<code>大小写敏感</code>。在Spring Boot项目中使用YAML只需要在<code>resources</code>目录下创建一个<code>application.yml</code>文件即可,然后向application.yml中添加配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/chapter02</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">江南一点雨</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">China</span></span><br><span class="line">      <span class="attr">favorites:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">足球</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">徒步</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sang</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">GZ</span></span><br><span class="line">      <span class="attr">favorites:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">阅读</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">吉他</span></span><br></pre></td></tr></table></figure><h3 id="2-8-Profile"><a href="#2-8-Profile" class="headerlink" title="2.8 Profile"></a>2.8 Profile</h3><p>开发者在项目发布之前,配置需要频繁更改,例如<code>数据库配置、redis配置、mongodb配置、jms配置</code>等。频·繁修改带来了巨大的工作量, Spring对此提供了解决方案(<code>@Profile注解</code>) , Spring Boot则更进一步提供了更加简洁的解决方案, Spring Boot中约定的不同环境下配置文件名称规则为<code>application-&#123;profile&#125;.properties</code>, profile占位符表示当前环境的名称,具体配置步骤如下:</p><h5 id="不同的环境指定不同的配置文件"><a href="#不同的环境指定不同的配置文件" class="headerlink" title="不同的环境指定不同的配置文件"></a>不同的环境指定不同的配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021060321383934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="第3章Spring-Boot整合视图层技术"><a href="#第3章Spring-Boot整合视图层技术" class="headerlink" title="第3章Spring Boot整合视图层技术"></a>第3章Spring Boot整合视图层技术</h2><p>Spring Boot官方推荐使用的模板引擎是Thymeleaf,不过像FreeMarker也支持, JSP技术在这里并不推荐使用。下面分别向读者介绍Spring Boot整合Thymeleaf和FreeMarker两种视图层技术。</p><h3 id="3-1整合Thymeleaf"><a href="#3-1整合Thymeleaf" class="headerlink" title="3.1整合Thymeleaf"></a>3.1整合Thymeleaf</h3><p><code>Thymeleaf</code>是新一代<code>Java模板引擎</code>,类似于<code>Velocity</code>, <code>FreeMarker</code>等传统<code>Java模板引擎</code>。与传统Java模板引擎不同的是, <code>Thymeleaf支持HTML原型</code>,既可以让前端工程师在浏览器中直接打开查看样式,也可以让后端工程师结合真实数据查看显示效果。同时, <code>Spring Boot提供了Thymeleaf自动化配置解决方案</code>,因此在Spring Boot中使用Thymeleaf非常方便。Spring Boot整合Thymeleaf主要可通过如下步骤:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2．配置Thymeleaf"><a href="#2．配置Thymeleaf" class="headerlink" title="2．配置Thymeleaf"></a>2．配置<code>Thymeleaf</code></h5><p>Spring Boot为<code>Thymeleaf</code>提供了自动化配置类<code>ThymeleafAutoConfiguration</code>,相关的配置属性在<code>ThymeleatProperties</code>类中, ThymeleafProperties部分源码如下:<br><img src="https://img-blog.csdnimg.cn/2021060322360776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果开发者想对<code>默认的Thymeleaf配置参数</code>进行自定义配置,那么可以直接在<code>application.properties</code>中进行配置,部分常见配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开启缓存，开发时可设置为false，默认为true</span></span><br><span class="line">spring.thymeleaf.cache=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否检查模板是否存在，默认为true</span></span><br><span class="line">spring.thymeleaf.check-template=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否检查模板位置是否存在，默认为true</span></span><br><span class="line">spring.thymeleaf.check-template-location=<span class="literal">true</span></span><br><span class="line"><span class="comment">#模板文件编码</span></span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"><span class="comment">#模板文件位置</span></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line"><span class="comment">#Content-Type配置</span></span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line"><span class="comment">#模板文件后缀</span></span><br><span class="line">spring.thymeleaf.suffix=.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210604091750176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210604091841946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>官网： <a href="https://www.thymeleaf.org/">https://www.thymeleaf.org</a></strong></p><h3 id="3-2整合FreeMarke"><a href="#3-2整合FreeMarke" class="headerlink" title="3.2整合FreeMarke"></a>3.2整合FreeMarke</h3><p><code>FreeMarker</code>是一个非常古老的模板引擎,可以用在<code>Web环境或者非Web环境</code>中。与<code>Thymeleaf</code>不同, <code>FreeMarker</code>需要经过解析才能够在浏览器中展示出来。FreeMarker不仅可以用来配置<code>HTML</code>页面模板,也可以作为<code>电子邮件模板</code>、<code>配置文件模板</code>以及<code>源码模板</code>等。Spring Boot中对FreeMarker整合也提供了很好的支持.</p><h5 id="配置FreeMarker"><a href="#配置FreeMarker" class="headerlink" title="配置FreeMarker"></a>配置FreeMarker</h5><p>Spring Boot对<code>FreeMarker</code>也提供了<code>自动化配置类FreeMarkerAutoConfiguration</code>,相关的配置属性在<code>FreeMarkerProperties</code> 中,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HttpServletRequest的属性是否可以覆盖controller中model的同名项</span></span><br><span class="line">spring.freemarker.allow-request-override=<span class="literal">false</span></span><br><span class="line"><span class="comment">#HttpSession的属性是否可以覆盖controller中model的同名项</span></span><br><span class="line">spring.freemarker.allow-session-override=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否开启缓存</span></span><br><span class="line">spring.freemarker.cache=fal se</span><br><span class="line"><span class="comment">#模板文件编码</span></span><br><span class="line">spring.freemarker.charset=UTF-8</span><br><span class="line"><span class="comment">#是否检查模板位置</span></span><br><span class="line">spring.freemarker.check-template-location=<span class="literal">true</span></span><br><span class="line"><span class="comment">#Content-Type的值</span></span><br><span class="line">spring.freemarker.content-type=text/html</span><br><span class="line"><span class="comment">#是否将HttpServletRequest中的属性添加到Model中</span></span><br><span class="line">spring.freemarker.expose-request-attributes=<span class="literal">false</span></span><br><span class="line"><span class="comment">#是否将HttpSession中的属性添加到Model中</span></span><br><span class="line">spring.freemarker.expose-session-attributes=<span class="literal">true</span></span><br><span class="line"><span class="comment">#模板文件后缀</span></span><br><span class="line">spring.freemarker.suffix=.ftl</span><br><span class="line"><span class="comment">#模板文件位置</span></span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021060409293794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210604092951300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>官网：<a href="https://freemarker.apache.org/">https://freemarker.apache.org/</a></strong> </p><h3 id="3-3-整合-JSP"><a href="#3-3-整合-JSP" class="headerlink" title="3.3 整合 JSP"></a>3.3 整合 JSP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liruilong.spring_boot_demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewResolverRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> WebMvcConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> Li Ruilong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/jsp/&quot;</span>, <span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第4章-Spring-Boot整合Web开发"><a href="#第4章-Spring-Boot整合Web开发" class="headerlink" title="第4章 Spring Boot整合Web开发."></a>第4章 Spring Boot整合Web开发.</h2><h3 id="4-1返回JSON数据"><a href="#4-1返回JSON数据" class="headerlink" title="4.1返回JSON数据"></a>4.1返回JSON数据</h3><h5 id="4-1-1-默认实现"><a href="#4-1-1-默认实现" class="headerlink" title="4.1.1 默认实现"></a>4.1.1 默认实现</h5><p><code>JSON</code>是目前主流的前后端数据传输方式, <code>Spring MVC</code>中使用消息转换器<code>HttpMessageConverter</code>对JSON的转换提供了很好的支持,在<code>Spring Boot</code>中更进一步,对相关配置做了更进一步的简化。默认情况下,当开发者新创建一个Spring Boot项目后,添加Web依赖,<br><img src="https://img-blog.csdnimg.cn/20210604103028128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个依赖中默认加入了<code>jackson-databind</code>作为JSON处理器,此时不需要添加额外的JSON处理器就能返回一段JSON了.</p><p>如果需要频繁地用到<code>@ResponseBody</code>注解,那么可以采用<code>@RestController </code>组合注解代替<code>@Controller</code>和<code>@ResponseBody</code></p><blockquote><p>这是Spring Boot自带的处理方式。如果采用这种方式,那么对于字段忽略、日期格式化等常见需求都可以通过注解来解决。这是通过Spring中默认提供的<code>MappingJackson2HttpMessageConverter来实现</code>的.<br><code>HttpMessageConverter</code> ，看名字就知道，这是一个消息转换工具，有两方面的功能：</p><ol><li><code>将服务端返回的对象序列化成 JSON 字符串</code></li><li><code>将前端传来的 JSON 字符串反序列化成 Java 对象</code><br>所有的 JSON 生成都离不开相关的 <code>HttpMessageConverter</code>,SpringMVC 自动配置了<code> Jackson</code> 和 <code>Gson</code> 的 HttpMessageConverter，Spring Boot 中又对此做了自动化配置：</li><li><code>org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</code></li><li><code>org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration</code></li></ol><p>所以，如果用户使用 <code>jackson</code> 和 <code>gson</code> 的话，没有其他额外配置，则只需要添加依赖即可。</p></blockquote><h5 id="修改转化器"><a href="#修改转化器" class="headerlink" title="修改转化器"></a>修改转化器</h5><p>添加一个MappingJackson2HttpMessageConverter，由<code>@ConditionalOnMissingBean</code>确定。<br><font color="#009688"><strong>嗯，我们温习一下条件化注解吧</strong></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210604111015837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202106041104095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210604112518739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然这里我们也可以只定义一个 <code>ObjectMapper </code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liruilong.spring_boot_demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> WebMvcConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/4 10:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> Li Ruilong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span>  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2CborHttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MappingJackson2HttpMessageConverter(objectMapper());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> om;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-2-自定义转换器"><a href="#4-1-2-自定义转换器" class="headerlink" title="4.1.2 自定义转换器"></a>4.1.2 自定义转换器</h5><p>当然开发者在这里也可以根据实际需求<code>自定义JSON转换器</code>。常见的JSON处理器除了<code>jackson-databind</code>之外,还有<code>Gson</code>和<code>fastison</code>,这里针对常见用法分别举例.</p><h6 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a><code>Gson</code></h6><p>Gson是Google的一个开源JSON解析框架。使用Gson,需要先除去默认的jackson-databind,然后加入Gson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>Spring Boot</code>中默认提供了<code>Gson的自动转换类GsonHttpMessageConvertersConfiguration</code>,因此Gson的依赖添加成功后,可以像使用<code>jackson-databind那样直接使用Gson</code>。但是在Gson进行·转换时,如果想对日期数据进行格式化,那么还需要开发者自定义<code>HttpMessageConverter</code>.自定义<code>HttpMessageConverter</code>可以通过如下方式。也可以直接使用Gson对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    GsonBuilder gsonBuilder() &#123;</span></span><br><span class="line"><span class="comment">//        GsonBuilder gsonBuilder = new GsonBuilder();</span></span><br><span class="line"><span class="comment">//        gsonBuilder.setDateFormat(&quot;yyyy-MM-dd&quot;);</span></span><br><span class="line"><span class="comment">//        return gsonBuilder;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GsonBuilder gsonBuilder = <span class="keyword">new</span> GsonBuilder();</span><br><span class="line">        gsonBuilder.setDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">        converter.setGson(gsonBuilder.create());</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="fastison"><a href="#fastison" class="headerlink" title="fastison"></a><code>fastison</code></h6><p><code>fastjson</code>是阿里巴巴的一个开源JSON解析框架,是目前JSON解析速度最快的开源框架,该框架也可以集成到Spring Boot中。不同于<code>Gson</code>, <code>fastjson</code>继承完成之后并不能立马使用,需要开发者提供相应的<code>HttpMessageConverter</code>后才能使用,集成fastison的步骤如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.encoding.force-response=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对于<code>FastlsonHttpMessageConverter</code>的配置,除了<code>FastJsonHttpMessageConverter </code>这种方式之外,还有另一种方式。在Spring Boot项目中,当开发者引入<code>spring-boo-starter-web</code>依赖之后,该依赖又依赖了<code>spring-boot-autoconfigure</code>,在这个自动化配置中,有一个<code>webMvcAutoConfiguration</code>类提供了对Spring MVC最基本的配置,如果某一项自动化配置不满足开发需求,开发者可以针对该项自定义配置,只需要实现<code>WebMveConfigurer</code>接口即可(在Spring 5.0之前是通过继承<code>WebMvcConfigurerAdapter</code>类来实现的) ,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converter.setDefaultCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    FastJsonHttpMessageConverter fastJsonHttpMessageConverter() &#123;</span></span><br><span class="line"><span class="comment">//        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();</span></span><br><span class="line"><span class="comment">//        FastJsonConfig fastJsonConfig = new FastJsonConfig();</span></span><br><span class="line"><span class="comment">//        fastJsonConfig.setCharset(Charset.forName(&quot;UTF-8&quot;));</span></span><br><span class="line"><span class="comment">//        fastJsonConfig.setDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class="line"><span class="comment">//        converter.setFastJsonConfig(fastJsonConfig);</span></span><br><span class="line"><span class="comment">//        converter.setDefaultCharset(Charset.forName(&quot;UTF-8&quot;));</span></span><br><span class="line"><span class="comment">//        return converter;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2静态资源访问"><a href="#4-2静态资源访问" class="headerlink" title="4.2静态资源访问"></a>4.2静态资源访问</h3><p>在<code>Spring MVC</code>中,对于静态资源都需要开发者手动配置静态资源过滤。Spring Boot中对此也提供了<code>自动化配置</code>,可以简化静态资源过滤配置。</p><h6 id="Spring-MVC中的配置："><a href="#Spring-MVC中的配置：" class="headerlink" title="Spring MVC中的配置："></a>Spring MVC中的配置：</h6><p><code>xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/html/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>由于这是一种Ant风格的路径匹配符，/** 表示可以匹配任意层级的路径，因此上面的代码也可以像下面这样简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>java</code>:重写 WebMvcConfigurationSupport 类中的addResourceHandlers方法，在该方法中配置静态资源位置即可</p><h5 id="4-2-1默认策略"><a href="#4-2-1默认策略" class="headerlink" title="4.2.1默认策略"></a>4.2.1默认策略</h5><p>Spring Boot中对于Spring MVC的自动化配置都在<code>webMvcAutoConfiguration</code>类中,因此对于默认的静态资源过滤策略可以从这个类中一窥究竟。在WebMvcAutoConfiguration类中有一个静态内部类<code>webMvcAutoConfigurationAdapter</code>,实现了4.1节提到的<code>WebMvcConfigurer</code>接口。<code>webMvcConfigurer</code>接口中有一个方法<code>addResourceHandlers</code>是用来配置静态资源过滤的。方法在<code>WebMvcAutoConfigurationAdapter</code>类中得到了实现,部分核心代码如下<br><img src="https://img-blog.csdnimg.cn/20210604122648530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Spring Boot在这里进行了<code>默认的静态资源过滤配置</code>,其中<code>staticPathPattern</code>默认定义在<code>WebMvcProperties</code> 中<br><img src="https://img-blog.csdnimg.cn/20210604122743210.png" alt="在这里插入图片描述"><br><code>registration.addResourceLocations(this.resourceProperties.getStaticLocations());</code>获取到的默认静态资源位置定义在<code>ResourceProperties</code><br><img src="https://img-blog.csdnimg.cn/20210604123003358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>在一个新创建的Spring Boot项目中,添加了<code>spring-boot-starter-web</code>依赖之后,在<code>resources</code>目录下分别创建<code>4个目录</code>, 4个目录中放入同名的静态资源(如图4-4所示,数字表示不同位置资源的优先级)<br><img src="https://img-blog.csdnimg.cn/20210604123624305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h5 id="4-2-2自定义策略"><a href="#4-2-2自定义策略" class="headerlink" title="4.2.2自定义策略"></a>4.2.2自定义策略</h5><p>自定义静态资源过滤策略有以下两种方式;</p><ol><li><p>在配置文件中定义可以在<code>application.properties</code>中直接定义过滤规则和静态资源位置,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态资源位置</span></span><br><span class="line">spring.web.resources.static-locations=classpath:/static/</span><br><span class="line"><span class="comment"># 过滤规则</span></span><br><span class="line">spring.mvc.static-path-pattern=/static/**  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210604124502468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p> <code>Java编码定义</code>也可以通过Java编码方式来定义,此时只需要实现<code>WebMveConfigurer接口</code>即可,然后实现该接口的<code>addResourceHandlers</code>方法,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3文件上传"><a href="#4-3文件上传" class="headerlink" title="4.3文件上传."></a>4.3文件上传.</h3><p><code>Spring MVC</code>对文件上传做了简化,在Spring Boot中对此做了更进一步的简化,文件上传更为方便。Java中的文件上传一共涉及两个组件,一个是<code>CommonsMultipartResolver</code>,另一个是<code>StandardServletMultipartResolver</code>.<br>其中<code>CommonsMultipartResolver</code>使用<code>commons-fileupload</code>来处理multipart请求,而<code>StandardServletMultipartResolver</code>则是基于<code>Servlet 3.0</code>来处理multipart请求的,因此若使用StandardServletMultipartResolver,则不需要添加额外的jar包。<code>Tomcat 7.0</code>开始就支持Servlet3.0.</p><blockquote><p>Spring Boot提供的文件上传自动化配置类<code>MultiparAutoConfiguraton中</code>,默认也是采用<code>StandardServletMultipartResolver</code><br><img src="https://img-blog.csdnimg.cn/20210604135451417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size=1KB</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h5 id="4-3-1单文件上传"><a href="#4-3-1单文件上传" class="headerlink" title="4.3.1单文件上传"></a>4.3.1单文件上传</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;/yyyy/MM/dd/&quot;</span>);</span><br><span class="line">   <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">       String realPath = req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">       String format = LocalDate.now().format(dateTimeFormatter);</span><br><span class="line">       String path = realPath + format;</span><br><span class="line">       File folder = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">           folder.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       String oldName = file.getOriginalFilename();</span><br><span class="line">       String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           file.transferTo(<span class="keyword">new</span> File(folder, newName));</span><br><span class="line">           String s = req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName;</span><br><span class="line">           <span class="keyword">return</span> s;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2多文件上传"><a href="#4-3-2多文件上传" class="headerlink" title="4.3.2多文件上传"></a>4.3.2多文件上传</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(MultipartFile[] files, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">       String realPath = req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">       String format = LocalDate.now().format(dateTimeFormatter);</span><br><span class="line">       String path = realPath + format;</span><br><span class="line">       File folder = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">           folder.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">               String oldName = file.getOriginalFilename();</span><br><span class="line">               String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">               file.transferTo(<span class="keyword">new</span> File(folder, newName));</span><br><span class="line">               String s = req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName;</span><br><span class="line">               System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload3&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(MultipartFile file1, MultipartFile file2, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        String realPath = req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        String format = LocalDate.now().format(dateTimeFormatter);</span><br><span class="line">        String path = realPath + format;</span><br><span class="line">        File folder = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String oldName1 = file1.getOriginalFilename();</span><br><span class="line">            String newName1 = UUID.randomUUID().toString() + oldName1.substring(oldName1.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            file1.transferTo(<span class="keyword">new</span> File(folder, newName1));</span><br><span class="line">            String s1 = req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName1;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 = &quot;</span> + s1);</span><br><span class="line"></span><br><span class="line">            String oldName2 = file2.getOriginalFilename();</span><br><span class="line">            String newName2 = UUID.randomUUID().toString() + oldName2.substring(oldName2.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            file2.transferTo(<span class="keyword">new</span> File(folder, newName2));</span><br><span class="line">            String s2 = req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName2;</span><br><span class="line">            System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-3AJAX文件上传"><a href="#4-3-3AJAX文件上传" class="headerlink" title="4.3.3AJAX文件上传"></a>4.3.3AJAX文件上传</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = $(<span class="string">&quot;#file&quot;</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">        formData.append(<span class="string">&quot;file&quot;</span>, file);</span></span><br><span class="line"><span class="javascript">        formData.append(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;javaboy&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="string">&#x27;/upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">processData</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">contentType</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:formData,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#result&quot;</span>).html(msg);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-ControllerAdvice"><a href="#4-4-ControllerAdvice" class="headerlink" title="4.4 @ControllerAdvice"></a>4.4 @ControllerAdvice</h3><p>顾名思义, <code>@ControllerAdvice</code>就是<code>@Controller</code>的增强版。<code>@ControllerAdvice</code>主要用来<code>处理全局数据</code>,一般搭配<code>@ExceptionHandier</code>. <code>@ModelAttribute</code>以及<code>@InitBinder</code>使用。</p><h5 id="4-4-1-全局异常处理"><a href="#4-4-1-全局异常处理" class="headerlink" title="4.4.1 全局异常处理"></a>4.4.1 全局异常处理</h5><p>上传文件大小超出限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@RestControllerAdvice</span></span><br><span class="line"><span class="comment">//@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">customException</span><span class="params">(MaxUploadSizeExceededException e)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;javaboy&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-添加全局数据"><a href="#4-4-2-添加全局数据" class="headerlink" title="4.4.2 添加全局数据"></a>4.4.2 添加全局数据</h5><p><code>@ControllerAdvice</code>是一个全局数据处理组件,因此也可以在<code>@ControllerAdvice</code>中配置全局数据,使用<code>@ModelAtribute注解进行配置</code>,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ModelAttribute(&quot;info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">mydata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        info.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;javaboy&quot;</span>);</span><br><span class="line">        info.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;www.javaboy.org&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;   </span><br></pre></td></tr></table></figure><p>在全局配置中添加<code>mydata</code>方法,返回一个map.该方法有一个注解<code>@ModelAttribute</code>,其中的value属性表示这条返回数据的<code>key</code>,而方法的返回值是返回数据的<code>value</code>,此时在任意请求的<code>Controller</code>中,通过方法参数中的Model都可以获取info的数据。</p><h5 id="4-4-3-请求参数预处理"><a href="#4-4-3-请求参数预处理" class="headerlink" title="4.4.3 请求参数预处理"></a>4.4.3 请求参数预处理</h5><p><code>@ControllerAdvice</code>结合<code>@InitBinder</code>还能实现<code>请求参数预处理</code>,即将表单中的<code>数据</code>绑定到<code>实体类</code>上时进行一些额外处理。<br>多个实体类存在相同的字段时,会合并字段值，使用ControllerAdvice来做预处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalData</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@InitBinder(&quot;b&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;b.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@InitBinder(&quot;a&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">&quot;a.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(<span class="meta">@ModelAttribute(&quot;b&quot;)</span> Book book, <span class="meta">@ModelAttribute(&quot;a&quot;)</span> Author author)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book = &quot;</span> + book);</span><br><span class="line">        System.out.println(<span class="string">&quot;author = &quot;</span> + author);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><font color="#009688"><strong>在GlobalConfig类中创建两个方法,</strong></p><ul><li>第一个@InitBinder(“b”)表示该方法是处理@ModelAttribute(“)对应的参数的,</li><li>第二个@nitBinder(“a”)表示该方法是处理@ModelAttribute(“a”)对应的参数的。</li></ul><p><font color="#009688"><strong>在WebDataBinder对象中,还可以设置允许的字段、禁止的字段、必填字段以及验证器等。</strong></p></blockquote><h3 id="4-5-自定义错误页"><a href="#4-5-自定义错误页" class="headerlink" title="4.5 自定义错误页"></a>4.5 自定义错误页</h3><p><code>Spring Boot</code>中的全局异常处理。在处理异常时,开发者可以根据实际情况返回不同的页面,但是这种异常处理方式一般用来处理<code>应用级别</code>的异常,有一些<code>容器级别</code>的错误就处理不了,例如<code>Filter 中抛出异常</code>,使用<code>@ControllerAdvice</code>定义的全局异常处理机制就<code>无法处理</code>。</p></li></ol><p>因此, Spring Boot中对于异常的处理还有另外的方式,这就是本节要介绍的内容。在Spring Boot 中,默认情况下,如果用户在发起请求时发生了404错误, Spring Boot会有一个默认的页面展示给用户.<br><img src="https://img-blog.csdnimg.cn/20210604194513830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Spring Boot中的错误默认是由<code>BasicErrorController类</code>来处理的,该类中的核心方法主要有两个:<br><img src="https://img-blog.csdnimg.cn/2021060419542031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>·<code>errorHtml</code>方法用来返回错误<code>HTML</code>页面, <code>error</code>用来返回错误<code>JSON</code>,具体返回的是HTML还是<code>JSON</code>,则要看请求头的<code>Accept参数</code>。返回JSON的逻辑很简单,不必过多介绍,返回HTML的逻辑稍微有些复杂,在<code>errorHtml</code>方法中,通过调用<code>resolveErrorView</code>方法来获取一个错误视图的<code>ModelAndView</code>,而<code>resolveErrorView</code>方法的调用最终会来到<code>DefaultErrorViewResolver</code>类中。<code>DefaultErrorViewResolver</code>类是Spring Boot中默认的错误信息视图解析器,部分源码如下:<br><img src="https://img-blog.csdnimg.cn/20210604201520523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="4-5-1-简单配置-静态页面"><a href="#4-5-1-简单配置-静态页面" class="headerlink" title="4.5.1 简单配置.静态页面"></a>4.5.1 简单配置.静态页面</h5><p>要<code>自定义错误页面</code>其实很简单,提供<code>4xx和Sxx</code>页面即可。如果开发者不需要向用户展示详细的错误信息,那么可以把错误信息定义成静态页面,直接,在<code>resources/static</code> 录下创建<code>error</code>目录,然后在<code>error</code>目录中创建错误展示页面。错误展示页面的命名规则有两种:<br><img src="https://img-blog.csdnimg.cn/202106042213193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>一种是<code>4xx.html</code>、 <code>5xx.html</code>;</li><li>另一种是直接使用响应码命名文件,例如<code>404.html.405.html, 500.html</code>.第二种命名方式划分得更细,当出错时,不同的错误会展示不同的错误页面<h5 id="模板页面"><a href="#模板页面" class="headerlink" title=".模板页面"></a>.模板页面</h5><code>Spring Boot</code>在这里一共返回了<code>5条错误相关</code>的信息,分别是<code>timestamp</code>, <code>status</code>, <code>error</code>, <code>message</code>以及<code>path</code><br><img src="https://img-blog.csdnimg.cn/20210604222146507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><font color="#009688"><strong>若用户定义了多个错误页面,则<code>响应码html页面</code>的优先级<code>高</code>于<code>4xx.html. Sxx.tml页面</code>的优先级,即若当前是一个404错误,则优先展示<code>404.html</code>而不是<code>4xx.html</code>;<code>动态</code>页面的优级<code>高</code>于<code>静态</code>页面,即若<code>resources/templates</code>和<code>resource/static</code> 同时定义了<code>4xx.html</code>,则<code>优先</code>展示<code>resources/templates/4xx.html.</code></strong><h5 id="4-5-2-复杂配置"><a href="#4-5-2-复杂配置" class="headerlink" title="4.5.2 复杂配置"></a>4.5.2 复杂配置</h5>上面这种配置还是不够灵活,只能定义<code>HTML页面</code>,无法处理<code>JSON的定制</code>。Spring Boot中支持对<code>Error信息</code>的深度定制,接下来将从三个方面介绍深度定制:<code>自定义Error数据</code>、<code>自定义Error视图</code>以及<code>完全自定义</code>。</li></ul><h6 id="1-自定义Error数据"><a href="#1-自定义Error数据" class="headerlink" title="1.自定义Error数据"></a>1.自定义Error数据</h6><p>自定义Error数据就是对<code>返回的数据进行自定义</code>。Spring Boot返回的Error信息一共有5条,分别是timestamp, status, error, message以及path,在BasicErrorController的errorHtml方法和error方法中,都是通过<code>getErrorAttributes</code>方法获取<code>Error信息</code>的。该方法最终会调用到<code>DefaultErrorAttributes类</code>的<code>getErrorAttributes</code>方法,而<code>DefaultErrorAttributes类</code>是在<code>ErrorMvcAutoConfiguration</code>中默认提供的.<code>ErrorMvcAutoConfiguration</code>类的<code>errorAttributes方法</code>源码如下:<br><img src="https://img-blog.csdnimg.cn/20210605064916580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>源码中可以看出,当系统<code>没有提供ErrorAttributes</code>时才会采用<code>DefaultErrorAttributes</code>.因此自定义错误提示时,<font color="#009688"><strong>只需要自己提供一个ErrorAttributes 可,而DefaultErroAttributes是ErrorAttributes的子类,因此只需要继承DefaultErrorAttributes即可</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAtributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        <span class="keyword">if</span> ((Integer) map.get(<span class="string">&quot;status&quot;</span>) == <span class="number">404</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;页面不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-自定义Error视图"><a href="#2-自定义Error视图" class="headerlink" title="2,自定义Error视图"></a>2,自定义Error视图</h6><p><code>Error视图</code>是展示给用户的页面,在<code>BasicErrorController </code>的<code>errorHtml</code>方法中调用<code>resolveErrorView</code>方法获取一个<code>ModelAndView</code>实例。 <code>resolveErrorView</code>方法是由<code>ErrorViewResolver</code>提供的,通过<code>ErrorMvcAutoConfiguration</code>类的源码可以看到Spring Boot默认采用的ErrorViewResolver是<code>DefaultErrorViewResolver</code>. ErrorMvcAutoConfiguration部分源码如下:<br><img src="https://img-blog.csdnimg.cn/20210605065831498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">extends</span> <span class="title">DefaultErrorViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorViewResolver</span><span class="params">(ApplicationContext applicationContext, WebProperties.Resources resources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(applicationContext, resources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.putAll(model);</span><br><span class="line">        <span class="keyword">if</span> ((Integer) model.get(<span class="string">&quot;status&quot;</span>) == <span class="number">500</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;服务器内部错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;javaboy/999&quot;</span>,map);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-完全自定义"><a href="#3-完全自定义" class="headerlink" title="3,完全自定义"></a>3,完全自定义</h6><p>前面提到的两种自定义方式都是对<code>BasicErrorController类</code>中的某个环节进行修补。查看Error自动化配置类<code>ErrorMvcAutoConfiguration</code>,读者可以发现<code>BasicErrorController</code> 身只是一个默认的配置,相关源码如下:<br><img src="https://img-blog.csdnimg.cn/20210605070734163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从这段源码中可以看到,若开发者没有提供自己的<code>ErrorController</code>,则<code>Spring Boot</code>提供<code>BasicErrorController</code>作为默认的<code>ErrorController</code>,因此,如果开发者需要更加灵活地对<code>Error视图</code>和<code>数据</code>进行处理,那么只需要提供自己的<code>ErrorController</code>即可。提供自己的<code>ErrorController</code>有两种方式:一种是实现<code>ErrorController接口</code>,另一种是直接继承<code>BasicErrorController</code>,由于<code>ErorController</code>接口只提供一个待实现的方法,而<code>BasicErrorController</code>已经实现了很多功能,因此这里选择第二种方式,即通过继承<code>BasicErrorController</code>来实现自己的<code>ErrorController</code>.具体定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorController</span> <span class="keyword">extends</span> <span class="title">BasicErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorController</span><span class="params">(ErrorAttributes errorAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">                             ServerProperties serverProperties,</span></span></span><br><span class="line"><span class="params"><span class="function">                             List&lt;ErrorViewResolver&gt; errorViewResolvers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, serverProperties.getError(), errorViewResolvers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = getErrorAttributes(</span><br><span class="line">                request, isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class="line">        model.put(<span class="string">&quot;custommsg&quot;</span>, <span class="string">&quot;出错啦！&quot;</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;myErrorPage&quot;</span>, model, status);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">                isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">        body.put(<span class="string">&quot;custommsg&quot;</span>, <span class="string">&quot;出错啦！&quot;</span>);</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="#009688"><strong>自定义<code>MyErrorController</code>继承自<code>BasicErrorController</code>并添加<code>@Controller</code>注解,将MyErrorController <code>注册</code>到<code>Spring MVC容器</code>中·</strong></li><li><font color="#009688"><strong>由于<code>BasicErrorController</code>没有无参构造方法,因此在创建<code>BasicErrorController</code>实例时需要<code>传递参数</code>,在<code>MyErrorController</code>的构造方法上添加<code>@Autowired注解</code>注入<code>所需参数</code>。</strong></li><li><font color="#009688"><strong>参考BasicErrorController中的实现,<code>重写</code>errorHtml和error方法,对Error的视图和数据进行充分的自定义。</strong></li></ul><h3 id="4-6-CORS支持"><a href="#4-6-CORS支持" class="headerlink" title="4.6 CORS支持"></a>4.6 CORS支持</h3><p><code>CORS (Cross-Origin Resource Sharing)</code>是由<code>w3C</code>制定的一种<code>跨域资源共享技术标准</code>,其目的就是为了解决<code>前端的跨域请求</code>。在Java EE开发中,最常见的前端跨域请求解决方案是<code>JSONP</code>,但是<code>JSONP只支持GET请求</code>,这是一个很大的缺陷,而<code>CORS则支持多种HTTP请求方法</code>。以<code>CORS</code><br><img src="https://img-blog.csdnimg.cn/20210605111218572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>响应头中有一个<code>Access-Control-Allow-Origin</code>字段,用来<code>记录</code>可以<code>访问该资源的域</code>。当浏览器收到这样的响应头信息之后,提取出<code>Access-Control-Allow-Origin字段</code>中的值,发现该值包含<code>当前页面</code>所在的<code>域</code>,就知道这个跨域是被允许的,因此就不再对前端的跨域请求进行·限制。这就是GET请求的整个跨域流程,在这个过程中,前端请求的代码不需要修改,主.要是后端进行处理。这个流程主要是针对<code>GET</code>, <code>POST</code>以及<code>HEAD</code>请求,并且没有自定义请求头,如果用户发起一个<code>DELETE</code>请求、<code>PUT</code>请求或者<code>自定义</code>了请求头,流程就会稍微复杂一些。</p><p>以<code>DELETE</code>请求为例,当前端发起<code>一个DELETE请求</code>时,这个请求的处理会经过<code>两个步骤</code>。<br><code>第一步</code>:发送一个OPTIONS请求。代码如下:<br><img src="https://img-blog.csdnimg.cn/20210605112418558.png" alt="在这里插入图片描述"><br>这个请求将向服务端询问是否具备该资源的DELETE权限,服务端会给浏览器一个响应,代码如下:<br><img src="https://img-blog.csdnimg.cn/20210605112630801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>服务端给浏览器的响应, <code>Allow</code>头信息表示服务端支持的请求方法,这个请求相当于一个探测请求,当<code>浏览器</code>分析了请求头字段之后,知道<code>服务端支持本次请</code>求,则进入第二步。<br><code>第二步</code>:<code>发送DELETE请求</code>。接下来浏览器就会发送一个跨域的DELETE请求。</p></blockquote><p>在传统的Java EE开发中,可以通过过滤器统一配置,而Spring Boot中对此则提供了更加简洁的解决方案。在Spring Boot中配置CORS的步骤如下:</p><h6 id="3-配置跨域"><a href="#3-配置跨域" class="headerlink" title="3.配置跨域"></a>3.配置跨域</h6><p>跨域有两个地方可以配置:</p><ol><li>一个是直接在相应的请求方法上加注解: 这种配置方式是一种<code>细粒度的配置</code>.可以控制到每一个方法上。</li></ol><ul><li><code>@CrossOrigin</code>中的<code>value</code>表示支持的<code>域</code>,这里表示来自<code>http://ocalhost:8081</code>域的请求是<code>支持跨域</code>的.</li><li><code>maxAge</code>表示<code>探测请求</code>的<code>有效期</code>,在前面的讲解中,读者已经了解到对于<code>DELETE</code>, <code>PUT</code>请求或者有自定义头信息的请求,在执行过程中会先发送探测请求,<code>探测请求不用每次都发送,可以配置一个有效期,有效期过了之后才会发送探测请求</code>。这个属性默认是1800秒,即30分钟。</li><li><code>allowedHeaders</code>表示<code>允许的请求头</code>,<code> *</code>表示所有的<code>请求头都被允许</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@CrossOrigin(value = &quot;http://localhost:8081&quot;</span></span><br><span class="line"><span class="meta">            ,maxAge = 1800,allowedHeaders = &quot;*&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;receive:&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@CrossOrigin(value = &quot;http://localhost:8081&quot;</span></span><br><span class="line"><span class="meta">            ,maxAge = 1800,allowedHeaders = &quot;*&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteBookById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>另一种全局配置,代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;http://localhost:8081&quot;</span>)</span><br><span class="line">            .maxAge(<span class="number">1800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>全局配置需要自定义类实现<code>WebMvcConfigurer</code>接口,然后实现接口中的<code>addCorsMappings</code>方法。,在<code>addCorsMappings</code>方法中</li></ol><ul><li><code>addMapping</code>表示对哪种格式的请求路径进行跨域处理;</li><li><code>allowedHeaders</code>表示允许的请求头,默认允许所有的请求头信息;</li><li><code>allowedMethods</code>表示允许的请求方法,默认是GET. POST和HEAD,<code>*</code>表示支持所有的请求方法;</li><li> maxAge表示探测请求的有效期; </li><li>allowedOrigins表示支持的域。</li></ul><h3 id="4-7配置类与XML配置"><a href="#4-7配置类与XML配置" class="headerlink" title="4.7配置类与XML配置."></a>4.7配置类与XML配置.</h3><p><code>Spring Boot</code>推荐使用Java来完成相关的配置工作。在项目中,不建议将所有的配置放在一个配置类中,可以根据不同的需求提供不同的<code>配置类</code>,例如专门处理<code>Spring Security的配置类</code>、<code>提供Bean的配置类</code>、<code>Spring MVC相关的配置类</code>。这些配置类上都需要添加<code>@Configuration注解</code>。<br><code>@ComponentScan注解</code>会扫描所有的Spring组件,也包括<code>@Configuration</code>，<code>@ComponentScan</code>注解在项目入口类的<code>@Spring BootApplication</code>注解中已经提供,因此在实际项目中只需要按需提供相关配置类即可。Spring Boot中并不推荐使用XML配置,建议尽量用<code>Java配置代替XML配置</code>,本书中的案例都是以Java配置为主。</p><p>如果开发者需要<code>使用XML配置</code>,只需在<code>resources目录</code>下提供配置文件,然后通过<code>@ImportResource加载配置文件</code>即可。例如,有一个Book类如下:<br><img src="https://img-blog.csdnimg.cn/20210606200304202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-8注册拦截器"><a href="#4-8注册拦截器" class="headerlink" title="4.8注册拦截器"></a>4.8注册拦截器</h3><p><code>Spring MVC中</code>提供了<code>AOP风格</code>的拦截器,拥有更加精细的拦截处理能力。<code>Spring Boot</code>中拦.截器的注册更加方便,步骤如下:</p><h5 id="创建拦截器实现Handlerinterceptor接口"><a href="#创建拦截器实现Handlerinterceptor接口" class="headerlink" title="创建拦截器实现Handlerinterceptor接口"></a>创建拦截器实现Handlerinterceptor接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法返回 false，请求将不再继续往下走</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Controller 执行之后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//preHandle 方法返回 true，afterCompletion 才会执行。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器中的方法将按<code>preHandle</code>-<code>Controller</code>-<code>postHandle</code>-<code>afterCompletion</code>的顺序执行。注意,<strong>只有preHandle方法返回true时后面的方法才会执行</strong>。当拦截器链内存在<code>多个拦截器时</code>, <code>postHandler在拦截器链内的所有拦截器返回成功时才会调用</code>,而<code>afterCompletion只有preHandle返回true才调用</code>,但若拦截器链内的第一个拦截器的<code>preHandle</code>方法返回<code>false</code>,则后面的方法都不会执行。</p><h5 id="配置拦截器。定义配置类进行拦截器的配置-代码如下"><a href="#配置拦截器。定义配置类进行拦截器的配置-代码如下" class="headerlink" title="配置拦截器。定义配置类进行拦截器的配置,代码如下:"></a>配置拦截器。定义配置类进行拦截器的配置,代码如下:</h5><p>自定义类实现<code>webMveConfigurer接口</code>,实现接口中的<code>addInterceptors方法</code>。其中,<code>addPathPatterns 表示拦截路径</code>, <code>excludePathPatterns表示排除的路径</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9启动系统任务"><a href="#4-9启动系统任务" class="headerlink" title="4.9启动系统任务"></a>4.9启动系统任务</h3><p>有一些特殊的任务需要在<code>系统启动时</code>执行,例如<code>配置文件加载</code>、<code>数据库初始化</code>等操作。如果没有<code>使用Spring Boot</code>,这些问题可以在<code>Listener</code>中解决。Spring Boot对此提供了两种解决方案:<code>CommandLineRunner</code>和<code>ApplicationRunner</code>. <code>CommandLineRunner</code>和<code>ApplicationRunner</code>基本一致,差别主要体现在参数上。</p><h5 id="4-9-1-CommandLineRunner"><a href="#4-9-1-CommandLineRunner" class="headerlink" title="4.9.1 CommandLineRunner"></a>4.9.1 CommandLineRunner</h5><p>Spring Boot项目在启动时会遍历所有<code>CommandLineRunner</code>的实现类并调用其中的run方法,如果整个系统中有多个<code>CommandLineRunner的实现类</code>,那么可以使用<code>@Order注解</code>对这些实现类的调用顺序进行排序。<br><img src="https://img-blog.csdnimg.cn/20210606203029267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="4-9-2-ApplicationRunner"><a href="#4-9-2-ApplicationRunner" class="headerlink" title="4.9.2 ApplicationRunner"></a>4.9.2 ApplicationRunner</h5><p><code>ApplicationRunner</code>的用法和<code>CommandLineRunner</code>基本一致,区别主要体现在<code>run方法</code>的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(98)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取没有键的参数，获取到的值和 commandlinerunner 一致</span></span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;nonOptionArgs1 = &quot;</span> + nonOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span> (String optionName : optionNames) &#123;</span><br><span class="line">            System.out.println(optionName + <span class="string">&quot;-1-&gt;&quot;</span> + args.getOptionValues(optionName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取命令行中的所有参数</span></span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;sourceArgs1 = &quot;</span> + Arrays.toString(sourceArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(97)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取没有键的参数，获取到的值和 commandlinerunner 一致</span></span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;nonOptionArgs2 = &quot;</span> + nonOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span> (String optionName : optionNames) &#123;</span><br><span class="line">            System.out.println(optionName + <span class="string">&quot;-2-&gt;&quot;</span> + args.getOptionValues(optionName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取命令行中的所有参数</span></span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;sourceArgs2 = &quot;</span> + Arrays.toString(sourceArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Order注解</code>依然是用来描述执行顺序的,数字越小越优先执行。不同于CommandLineRunner中run方法的String数组参数,这里<code>run方法</code>的参数是一个<code>ApplicationArguments</code>对象,如果想从<code>ApplicationArguments</code>对象中获取入口类中1main方法1接收的参数,调用<code>ApplicationArguments</code>中的<code>getNonOptionArgs方法</code>即可. <code>ApplicationArguments</code>中的<code>getOptionNames方法</code>用来获取项目启动命令行中<code>参数的key</code>,例如将本项目打成<code>jar包</code>,运行<code>java-jar xxx.jar-name-Michael</code>命令来启动项目,此时<code>getOptionNames</code>方法获取到的就是name,而<code>getOptionValues</code>方法则是获取相应的<code>value</code>.</p><h3 id="4-10整合Servlet-Filter和Listener"><a href="#4-10整合Servlet-Filter和Listener" class="headerlink" title="4.10整合Servlet, Filter和Listener."></a>4.10整合Servlet, Filter和Listener.</h3><p>Spring Boot中对于整合这些基本的Web组件也提供了很好的支持。在一个Spring Boot Web项目中添加如下三个组件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFilter&gt;&gt;&gt;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFilter&gt;&gt;&gt;doFilter&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFilter&gt;&gt;&gt;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener&gt;&gt;&gt;requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener&gt;&gt;&gt;requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name&gt;&gt;&gt;&quot;</span>+req.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类需要的配置：<br>在项目入口类上添加<code>@ServletComponentScan注解</code>,实现对<code>Servlet</code>， <code>Filter</code>以及<code>Listener</code>的扫描,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan(&quot;org.javaboy.filter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FilterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-11-路径映射"><a href="#4-11-路径映射" class="headerlink" title="4.11 路径映射."></a>4.11 路径映射.</h3><p>有一些页面在<code>控制器</code>中不需要加载数据,只是完成·<code>简单的跳转</code>,对于这种页面,可以<code>直接配置路径映射</code>,<code>提高访问速度</code>。例如,有两个<code>Thymeleaf做模板</code>的页面<code>login.html</code>和<code>index.tml</code>,直接在MVC配置中重写<code>addViewControllers</code>方法配置映射关系即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        registry.addViewController(&quot;/02&quot;).setViewName(&quot;02&quot;);</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/02&quot;</span>).setViewName(<span class="string">&quot;02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-12-配置AOP"><a href="#4-12-配置AOP" class="headerlink" title="4.12 配置AOP"></a>4.12 配置AOP</h3><h5 id="4-12-1-AOP简介"><a href="#4-12-1-AOP简介" class="headerlink" title="4.12.1 AOP简介"></a>4.12.1 AOP简介</h5><h6 id="AOP中的相关知识"><a href="#AOP中的相关知识" class="headerlink" title="AOP中的相关知识"></a><a href="https://blog.csdn.net/sanhewuyang/article/details/108943497">AOP中的相关知识</a></h6><h5 id="4-12-2-Spring-Boot支持"><a href="#4-12-2-Spring-Boot支持" class="headerlink" title="4.12.2 Spring Boot支持"></a>4.12.2 Spring Boot支持</h5><p><code>Spring Boot</code>在<code>Spring</code>的基础上对<code>AOP</code>的配置提供了<code>自动化配置</code>解决方案<code>spring-boot-starter-aop</code>,使开发者能够更加便捷地在Spring Boot项目中使用AOP,配置步骤如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* org.javaboy.aop.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 方法开始执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 方法执行结束了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pc1()&quot;, returning = &quot;s&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, String s)</span> </span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 方法的返回值是 &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pc1()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp, Exception e)</span> </span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 方法抛出了异常 &quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//类似于反射中的 invoke 方法</span></span><br><span class="line">            Object proceed = pjp.proceed();</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-13-其他"><a href="#4-13-其他" class="headerlink" title="4.13 其他"></a>4.13 其他</h3><h5 id="4-13-1-自定义欢迎页"><a href="#4-13-1-自定义欢迎页" class="headerlink" title="4.13.1 自定义欢迎页"></a>4.13.1 自定义欢迎页</h5><p>Spring Boot项目在启动后,首先会去<code>静态资源</code>路径下查找<code>index.html</code>作为<code>首页文件</code>,若查找不到,则会去查找动态的<code>index文件</code>作为首页文件.</p><ul><li>使用<code>静态的index.html</code>页面作为项目首页,那么只需在<code>resources/static</code>目录下创建<code>index.html</code>文件即可。</li><li>若想使用动态页面作为项目首页,则需在<code>resources/templates</code>目录下创建<code>index.html </code>(使用Thymeleaf模板)或者<code>index.fl (使用FreeMarker模板)</code> ,然后在<code>Controller中返回逻辑视图名</code>,代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-13-2-自定义favicon"><a href="#4-13-2-自定义favicon" class="headerlink" title="4.13.2 自定义favicon"></a>4.13.2 自定义favicon</h5><p><code>favicon.ico</code>是浏览器选项卡左上角的图标,可以放在<code>静态资源路径</code>下或者<code>类路径</code>下,静态资源路径下的<code>favicon.ico</code>优先级<code>高于</code>类路径下的<code>favicon.ico</code>。<br><strong>在线转换网站http:/inaconvert.com/cn/convert-to-ico.php将一张普通图片转为.ico图</strong></p><h5 id="4-13-3-除去某个自动配置"><a href="#4-13-3-除去某个自动配置" class="headerlink" title="4.13.3 除去某个自动配置"></a>4.13.3 除去某个自动配置</h5><p><code>Spring Boot</code>中提供了大量的自动化配置类,例如上文提到过的<code>ErrorMvcAutoConfiguration</code>、<code>ThymeleafAutoConfiguration</code>,<code> FreeMarkerAutoConfiguration</code>, <code>MultipartAutoConfiguration</code>等,这些<code>自动化配置</code>可以减少相应<code>操作的配置</code>,达到开箱即用的效果。在<code>Spring Boot</code>的入口类上有一个<code>@Spring BootApplication</code>注解。该注解是一个组合注解, 由<code>@Spring BootConfiguration</code>、<code>@EnableAutoConfiguration</code>以及<code>@ComponentScan</code>组成,其中<code>@EnableAutoConfiguration</code>注解开启自动化配置,相关的自动化配置类就会被使用。如果开发者不想使用某个自动化配置,按如下方式除去相关配置即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude = &#123;ErrorMvcAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OtherApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-13-4-使用类型转化器"><a href="#4-13-4-使用类型转化器" class="headerlink" title="4.13.4 使用类型转化器"></a>4.13.4 使用类型转化器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第5章Spring-Boot整合持久层技术"><a href="#第5章Spring-Boot整合持久层技术" class="headerlink" title="第5章Spring Boot整合持久层技术."></a>第5章Spring Boot整合持久层技术.</h2><p> <code>Spring Boot</code>中对常见的持久层框架都提供了自动化配置,例如<code>JabcTemplate</code>, <code>JPA</code>等, <code>MyBatis</code>的<code>自动化配置</code>则是MyBatis官方提供的。</p><h3 id="5-1-整合JdbcTemplate"><a href="#5-1-整合JdbcTemplate" class="headerlink" title="5.1 整合JdbcTemplate"></a>5.1 整合JdbcTemplate</h3><p><code>JdbcTemplate</code>是<code>Spring</code>提供的一套<code>JDBC模板框架</code>,利用<code>AOP</code>技术来解决直接使用<code>JDBC时大量重复代码</code>的问题。<code>JdbcTemplate</code>虽然没有<code>MyBatis</code>那么灵活,但是比直接使用<code>JDBC</code>要方便很多。<code>Spring Boot</code>中对<code>JdbcTemplate</code>的使用提供了<code>自动化配置类JdbcTemplateConfiguration</code>,部分源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, JdbcTemplate.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JdbcProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; DatabaseInitializationDependencyConfigurer.class, JdbcTemplateConfiguration.class,</span></span><br><span class="line"><span class="meta">NamedParameterJdbcTemplateConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(JdbcOperations.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function">JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource, JdbcProperties properties)</span> </span>&#123;</span><br><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">JdbcProperties.Template template = properties.getTemplate();</span><br><span class="line">jdbcTemplate.setFetchSize(template.getFetchSize());</span><br><span class="line">jdbcTemplate.setMaxRows(template.getMaxRows());</span><br><span class="line"><span class="keyword">if</span> (template.getQueryTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">jdbcTemplate.setQueryTimeout((<span class="keyword">int</span>) template.getQueryTimeout().getSeconds());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring-bool-starter-jdbc</code> 中提供了<code>spring-jdbc</code>,另外还加入了<code>数据库驱动依赖</code>和<code>数据库连接池依赖</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源1</span></span><br><span class="line">spring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.one.username=root</span><br><span class="line">spring.datasource.one.password=123</span><br><span class="line">spring.datasource.one.url=jdbc:mysql:///chapter05-1</span><br></pre></td></tr></table></figure><ul><li>创建BookDao,注入<code>JdbcTemplate</code>.由于已经添加了<code>spring-jdbc</code>相关的依赖, <code>JabcTemplate</code>会被自动<code>注册</code>到<code>Spring容器</code>中,因此这里可以直接注入JdbcTemplate使用。</li><li>在<code>JdbcTemplate</code>中,<code>增删改</code>三种类型的操作主要使用<code>update</code>和<code>batchUpdate</code>方法来完成.<code>query</code>和<code>queryForObject</code>方法主要用来完成<code>查询</code>功能。另外,还有<code>execute</code>方法可以用来执行任意的<code>sQL</code>. <code>call</code>方法用来调用<code>存储过程</code>等。</li><li>在执行查询操作时,需要有一个<code>RowMapper</code>将查询出来的<code>列和实体类</code>中的属性-一对应起来。如果<code>列名</code>和<code>属性名</code>都是相同的,那么可以直接使用<code>BeanPropertyRowMapper</code>;如果列名和属性名不同,就需要开发者自己实现<code>RowMapper接口</code>,将列和实体类属性-一对应起来。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">&quot;INSERT INTO book(name,author) VALUES (?,?)&quot;</span>,</span><br><span class="line">                book.getName(), book.getAuthor());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">&quot;UPDATE book SET name=?,author=? WHERE id=?&quot;</span>,</span><br><span class="line">                book.getName(), book.getAuthor(), book.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">&quot;DELETE FROM book WHERE id=?&quot;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">&quot;select * from book where id=?&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class), id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">&quot;select * from book&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       GeneratedKeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</span><br><span class="line">       <span class="keyword">int</span> result = jdbcTemplate.update(<span class="keyword">new</span> PreparedStatementCreator() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">               PreparedStatement ps = connection.prepareStatement(<span class="string">&quot;insert into user (username,address) values(?,?)&quot;</span>, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">               ps.setString(<span class="number">1</span>, user.getUsername());</span><br><span class="line">               ps.setString(<span class="number">2</span>, user.getAddress());</span><br><span class="line">               <span class="keyword">return</span> ps;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, keyHolder);</span><br><span class="line">       user.setId(keyHolder.getKey().longValue());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = jdbcTemplate.query(<span class="string">&quot;select * from user&quot;</span>, <span class="keyword">new</span> RowMapper&lt;User&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                String username = resultSet.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                String address = resultSet.getString(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> id = resultSet.getLong(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(id);</span><br><span class="line">                user.setUsername(username);</span><br><span class="line">                user.setAddress(address);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2整合MyBatis"><a href="#5-2整合MyBatis" class="headerlink" title="5.2整合MyBatis"></a>5.2整合MyBatis</h3><code>MyBatis</code>是一款优秀的持久层框架,原名叫作<code>iBaits</code>, 2010年由ApacheSoftwareFoundation迁移到<code>Google Code</code>并改名为<code>MyBatis,</code> 2013年又迁移到<code>GitHub</code>上。<code>MyBatis</code>支持定制化<code>SQL</code>、<code>存储过程</code>以及<code>高级映射</code>。<code>MyBatis</code>几乎避免了所有的<code>JDBC</code>代码手动设置参数以及获取结果集。在传统的<code>SSM</code>框架整合中,使用MyBatis需要大量的<code>XML</code>配置,而在Spring Boot中, MyBatis官方提供了一套自动化配置方案,可以做到MyBatis开箱即用。具体使用步骤如下。</li><li>添加MyBatis依赖、数据库驱动依赖以及数据库连接池<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.url=jdbc:mysql:///chapter05</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br></pre></td></tr></table></figure><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;org.javaboy.mybatis.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>一种简单的方式是在配置类上添加<code>@MapperScan(&quot;org.sang.mapper&quot;)</code>注解,表示扫描<code>org.sang.mapper</code>包下的所有接口作为<code>Mapper</code>,这样就不需要在每个接口上配置<code>@Mapper</code>注解了。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;address&quot;,column = &quot;address1&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (username,address1) values (#&#123;username&#125;,#&#123;address&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@SelectKey(statement = &quot;select last_insert_id()&quot;,keyProperty = &quot;id&quot;,before = false,resultType = Long.class)</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateById</span><span class="params">(String username, Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5>指明该类是一个<code>Mapper</code>:第一种如前面的代码所示,在<code>BookMapper</code>上添加@Mapper注解,表明该接口是一个MyBatis中的Mapper,这种方式需要在每一个Mapper上都添加注解;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBookById</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function">Book <span class="title">getBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.sang.mapper.BookMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.sang.model.Book&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO book(name,author) VALUES (#&#123;name&#125;,#&#123;author&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM book WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.sang.model.Book&quot;</span>&gt;</span></span><br><span class="line">        UPDATE book set name=#&#123;name&#125;,author=#&#123;author&#125; WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.sang.model.Book&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM book WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllBooks&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.sang.model.Book&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM book</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>针对<code>BookMapper</code>接口中的每一个方法都在<code>BookMapper.xml</code>中列出了实现</li><li><code>#&#123;&#125;</code>用来代替接口中的参数,实体类中的属性可以直接通过<code>#(实体类属性名&#125;</code>获取。<h6 id="配置pom-xml文件"><a href="#配置pom-xml文件" class="headerlink" title="配置pom.xml文件"></a>配置pom.xml文件</h6>在<code>Maven</code>工程中, <code>XML</code>配置文件建议写在<code>resources</code>目录下(同包同级目录),当<code>Mapper.xml</code>文件写在包下, ·<code>Maven</code>在运行时会<code>忽略</code>包下的<code>XML文件</code>,因此需要在<code>pom.xml</code>文件中重新指明<code>资源文件位置</code>,配置如下:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>也可以自定义<code>resources</code>下<code>mapper</code>位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><h3 id="5-3整合Spring-Data-JPA"><a href="#5-3整合Spring-Data-JPA" class="headerlink" title="5.3整合Spring Data JPA"></a>5.3整合Spring Data JPA</h3><code>JPA (Java Persistence API)</code>和<code>Spring Data</code>是两个范畴的概念。<code>JPA</code>则是一种<code>ORM</code>规范, <code>JPA</code>和<code>Hibernate</code>的关系就像<code>JDBC</code>与<code>JDBC驱动</code>的关系,即<code>JPA</code>制定了<code>ORM</code>规范,而<code>Hibernate</code>是这些规范的实现(事实上,是先有Hibernate后有JPA, JPA规范的起草者也是Hibernate的作者) ,因此从功能上来说, <code>JPA</code>相当于<code>Hibernate</code>的一个子集。</li></ul><p><code>Spring Data</code>是<code>Spring</code>的一个子项目,致力于<code>简化数据库访问</code>,通过<code>规范的方法名称</code>来分析开发者的意图,进而减少数据库访问层的代码量。<code>Spring Data</code>不仅支持<code>关系型数据库</code>,也支持<code>非关系型数据库</code>。<code>Spring Data JPA</code>可以有效    <code>简化    </code>关系型数据库访问代码。Spring Boot整合<code>Spring Data JPA</code>的步骤如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.url=jdbc:mysql:///jpa</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.jpa.show-sql=<span class="literal">true</span></span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect</span><br><span class="line"><span class="comment">#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57InnoDBDialect</span></span><br><span class="line"><span class="comment">#spring.jpa.properties.database=mysql</span></span><br><span class="line"><span class="comment">#spring.jpa.properties.hibernate.hbm2ddl.auto=update</span></span><br><span class="line"><span class="comment">#spring.jpa.properties.show-sql= true</span></span><br></pre></td></tr></table></figure><ul><li><code>@Entity</code>注解表示该类是一个实体类,在项目启动时会根据该类自动生成一张表,表的名称即<code>@Entity</code>注解中<code>name</code>的值,如果不配置name,默认表名为类名。所有的实体类都要有主键, </li><li><code>@ld</code>注解表示该属性是一个主键, <code>@GeneratedValue</code>注解表示主键自动生成, <code>strategy</code>则表示主键的生成策略。默认情况下,生成的表中字段的名称就是实体类中属性的名称,通过<code>@Column</code>注解可以定制生成的字段的属性, <code>name</code>表示该属性对应的数据表中字段的名称, <code>nullable</code>表示该字段非空。</li><li><code>@Transient</code>注解表示在生成数据库中的表时,该属性被忽略,即不生成对应的字段。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(name = &quot;t_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(name = &quot;book_name&quot;,nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//省略getter/setter</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li><li>自定义<code>BookDao</code>继承自<code>JpaRepository</code>. <code>JpaRepository</code>中提供了一些<code>基本的数据操作方法</code>,有基本的增删改查、分页查询、排序查询等。</li><li>第<code>2行</code>定义的方法表示查询以某个<code>字符开始</code>的所有书。·</li><li>第<code>3行</code>定义的方法表示查询<code>单价大于某个值</code>的所有书。</li><li>在<code>Spring Data JPA</code>中,只要方法的定义符合既定规范, <code>Spring Data</code>就能分析出开发者的意图,从而<code>避免开发者定义SQL</code>所谓的既定规范,就是一定的<code>方法命名规则</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBooksByAuthorStartingWith</span><span class="params">(String author)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBooksByPriceGreaterThan</span><span class="params">(Float price)</span></span>;</span><br><span class="line">    <span class="meta">@Query(value = &quot;select * from t_book where id=(select max(id) from t_book)&quot;,nativeQuery = true)</span></span><br><span class="line">    <span class="function">Book <span class="title">getMaxIdBook</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Query(&quot;select b from t_book b where b.id&gt;:id and b.author=:author&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookByIdAndAuthor</span><span class="params">(<span class="meta">@Param(&quot;author&quot;)</span> String author, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">    <span class="meta">@Query(&quot;select b from t_book b where b.id&lt;?2 and b.name like %?1%&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBooksByIdAndName</span><span class="params">(String name, Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookByAuthorIs</span><span class="params">(String author)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(nativeQuery = true,value = &quot;select * from t_book where id=(select max(id) from t_book)&quot;)</span></span><br><span class="line">    <span class="function">Book <span class="title">maxIdBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;update t_book set b_name=:name where id=:id&quot;)</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateBookById</span><span class="params">(String name, Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>支持的命名规则如表所示:<br><img src="https://img-blog.csdnimg.cn/20210618024953534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>部分方法直接由JpaRepository<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getBookByPage</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooksByAuthorStartingWith</span><span class="params">(String author)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBooksByAuthorStartingWith(author);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooksByPriceGreaterThan</span><span class="params">(Float price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBooksByPriceGreaterThan(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getMaxIdBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getMaxIdBook();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookByIdAndAuthor</span><span class="params">(String author, Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookByIdAndAuthor(author, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooksByIdAndName</span><span class="params">(String name, Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBooksByIdAndName(name, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       PageRequest pageable = PageRequest.of(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">       Page&lt;Book&gt; page = bookService.getBookByPage(pageable);</span><br><span class="line">       System.out.println(<span class="string">&quot;总页数:&quot;</span>+page.getTotalPages());</span><br><span class="line">       System.out.println(<span class="string">&quot;总记录数:&quot;</span>+page.getTotalElements());</span><br><span class="line">       System.out.println(<span class="string">&quot;查询结果:&quot;</span>+page.getContent());</span><br><span class="line">       System.out.println(<span class="string">&quot;当前页数:&quot;</span>+(page.getNumber()+<span class="number">1</span>));</span><br><span class="line">       System.out.println(<span class="string">&quot;当前页记录数:&quot;</span>+page.getNumberOfElements());</span><br><span class="line">       System.out.println(<span class="string">&quot;每页记录数:&quot;</span>+page.getSize());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-4多数据源"><a href="#5-4多数据源" class="headerlink" title="5.4多数据源."></a>5.4多数据源.</h3>所谓<code>多数据源</code>,就是一个<code>Java EE</code>项目中采用了<code>不同数据库实例</code>中的<code>多个库</code>,或者同一个数据库实例中多个不同的库。一般来说,采用<code>MyCat</code>等<code>分布式数据库中间件</code>是比较好的解决方案,这样可以把<code>数据库读写分离、分库分表、备份</code>等操作交给中间件去做, Java代码只需要专注于业务即可。不过,这并不意味着无法使用Java代码解决类似的问题,在<code>Spring Framework</code>中就可以配置多数据源, <code>Spring Boot</code>继承其衣钵,只不过配置方式有所变化。<h5 id="5-4-1-JdbcTemplate多数据源"><a href="#5-4-1-JdbcTemplate多数据源" class="headerlink" title="5.4.1 JdbcTemplate多数据源"></a>5.4.1 JdbcTemplate多数据源</h5><code>JdbcTemplate</code>多数据源的配置是比较简单的,因为一个<code>JdbcTemplate</code>对应一个<code>DataSource</code>,开发者只需要手动提供多个<code>DataSource</code>,再手动配置<code>JdbcTemplate</code>即可。具体步骤如下。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源1</span></span><br><span class="line">spring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.one.username=root</span><br><span class="line">spring.datasource.one.password=123</span><br><span class="line">spring.datasource.one.url=jdbc:mysql:///chapter05-1</span><br><span class="line"><span class="comment"># 数据源2</span></span><br><span class="line">spring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.two.username=root</span><br><span class="line">spring.datasource.two.password=123</span><br><span class="line">spring.datasource.two.url=jdbc:mysql:///chapter05-2</span><br></pre></td></tr></table></figure></li><li><code>DataSourceConfig</code>中提供了两个数据源: <code>dsOne</code>和<code>dsTwo</code>,默认方法名即实例名。</li><li><code>@ConfigurationProperties</code>注解表示使用不同前缀的配置文件来创建不同的<code>DataSource</code>实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.one&quot;)</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.two&quot;)</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateOne</span><span class="params">(<span class="meta">@Qualifier(&quot;dsOne&quot;)</span> DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateTwo</span><span class="params">(<span class="meta">@Qualifier(&quot;dsTwo&quot;)</span> DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>JdbcTemplateConfig</code>中提供两个<code>JdbcTemplate</code>实例。每个<code>JdbcTemplate</code>实例都需要提供-<code>DataSource</code>,由于<code>Spring</code>容器中有两个<code>DataSource</code>实例,因此需要通过方法名查找。<code>@Qualifier</code>注解表示查找不同名称的<code>DataSource</code>实例注入进来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplateOne&quot;)</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;jdbcTemplateTwo&quot;)</span></span><br><span class="line">    JdbcTemplate jdbcTemplateTwo;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br></pre></td></tr></table></figure><h5 id="5-4-2-MyBatis多数据源"><a href="#5-4-2-MyBatis多数据源" class="headerlink" title="5.4.2 MyBatis多数据源"></a>5.4.2 MyBatis多数据源</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 数据源1</span><br><span class="line">spring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.one.username=root</span><br><span class="line">spring.datasource.one.password=123</span><br><span class="line">spring.datasource.one.url=jdbc:mysql:///chapter05-1</span><br><span class="line"># 数据源2</span><br><span class="line">spring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.two.username=root</span><br><span class="line">spring.datasource.two.password=123</span><br><span class="line">spring.datasource.two.url=jdbc:mysql:///chapter05-2</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.one&quot;)</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.two&quot;)</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;org.javaboy.mybatismulti.mapper1&quot;,sqlSessionFactoryRef = &quot;sqlSessionFactory1&quot;,sqlSessionTemplateRef = &quot;sqlSessionTemplate1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigOne</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dsOne&quot;)</span></span><br><span class="line">    DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactory1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">            bean.setDataSource(ds);</span><br><span class="line">            sqlSessionFactory = bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;org.javaboy.mybatismulti.mapper2&quot;,sqlSessionFactoryRef = &quot;sqlSessionFactory2&quot;,sqlSessionTemplateRef = &quot;sqlSessionTemplate2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dsTwo&quot;)</span></span><br><span class="line">    DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactory2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">            bean.setDataSource(ds);</span><br><span class="line">            sqlSessionFactory = bean.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-3-JPA多数据源"><a href="#5-4-3-JPA多数据源" class="headerlink" title="5.4.3 JPA多数据源"></a>5.4.3 JPA多数据源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.one.password=123</span><br><span class="line">spring.datasource.one.username=root</span><br><span class="line">spring.datasource.one.url=jdbc:mysql:///chapter05-1</span><br><span class="line">spring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">spring.datasource.two.password=123</span><br><span class="line">spring.datasource.two.username=root</span><br><span class="line">spring.datasource.two.url=jdbc:mysql:///chapter05-2</span><br><span class="line">spring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57InnoDBDialect</span><br><span class="line">spring.jpa.properties.database=mysql</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class="line">spring.jpa.properties.show-sql= <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里的配置与配置单独的<code>JPA</code>有区别,因为在后文的配置中要从<code>JpaProperties</code>中的<code>getProperties</code>方法中获取所有JPA相关的配置, 因此这里的属性前缀都是<code>spring.jpa.properties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.one&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.two&quot;)</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;org.sang.dao1&quot;,</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef = &quot;entityManagerFactoryBeanOne&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef = &quot;platformTransactionManagerOne&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigOne</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dsOne&quot;)</span></span><br><span class="line">    DataSource dsOne;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBeanOne</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dsOne)</span><br><span class="line">                .properties(jpaProperties.getProperties())</span><br><span class="line">                .packages(<span class="string">&quot;org.sang.model&quot;</span>)</span><br><span class="line">                .persistenceUnit(<span class="string">&quot;pu1&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerOne</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean factoryOne = entityManagerFactoryBeanOne(builder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factoryOne.getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>@EnableJpaRepositories</code>注解来进行<code>JPA</code>的配置,该注解中主要配置三个属性:<code>basePackages</code>, <code>entityManagerFactoryRef</code>以及<code>transactionManagerRef.</code>其中, <code>basePackages</code>用来指定<code>Repository</code>所在的位置, <code>entityManagerFactoryRef</code>用来指定实体类管理工厂<code>Bean</code>的名称,<code>transactionManagerRef</code>则用来指定<code>事务管理器</code>的引用名称,这里的引用名称就是<code>JpaConfigOne</code>类中注册的<code>Bean</code>的名称(默认的<code>Bean</code>名称为方法名)</li><li>创建<code>LocalContainerEntityManagerFactoryBean</code>,该Bean将用来提供<code>EntityManager实例</code>,在该类的创建过程中,首先配置数据源,然后设置<code>JPA</code>相关配置(<code>JpaProperties</code>由系统自动加载),再设置实体类所在的位置,最后配置持久化单元名,若项目中只有一个<code>EntityManagerFactory</code>, 则<code>persistenceUnit</code>可以省略掉,若有多个,则必须明确指定持久化单元名。</li><li>由于项目中会提供两个<code>LocalContainerEntityManagerFactoryBean</code>实例,第12行的注解<code>@Primary</code>表示当存在多个<code>LocalContainerEntityManagerFactoryBean</code>实例时,该实例将被优先使用。</li><li><code>PlatformTransactionManager</code>表示创建一个事务管理器。 <code>JpaTransactionManager</code>提供对单个<code>EntityManagerFactory</code>的事务支持,专门用于解决<code>JPA</code>中的事务管理。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;org.sang.dao2&quot;,</span></span><br><span class="line"><span class="meta">entityManagerFactoryRef = &quot;entityManagerFactoryBeanTwo&quot;,</span></span><br><span class="line"><span class="meta">transactionManagerRef = &quot;platformTransactionManagerTwo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dsTwo&quot;)</span></span><br><span class="line">    DataSource dsTwo;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBeanTwo</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dsTwo)</span><br><span class="line">                .properties(jpaProperties.getProperties())</span><br><span class="line">                .packages(<span class="string">&quot;org.sang.model&quot;</span>)</span><br><span class="line">                .persistenceUnit(<span class="string">&quot;pu2&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerTwo</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean factoryTwo = entityManagerFactoryBeanTwo(builder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factoryTwo.getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第6章Spring-Boot整合NosQL"><a href="#第6章Spring-Boot整合NosQL" class="headerlink" title="第6章Spring Boot整合NosQL"></a>第6章Spring Boot整合NosQL</h2><code>NoSQL</code>是指<code>非关系型数据库</code>,非关系型数据库和关系型数据库两者存在许多显著的不同点,,其中最重要的是<code>NoSQL</code>不使用<code>SQL</code>作为查询语言。其数据存储可以不需要固定的<code>表格模式</code>,一般.都有<code>水平可扩展性的特征</code>。NoSQL主要有如下几种不同的分类:</li><li><code>Key/Value</code>键值存储。这种数据存储通常都是无数据结构的,一般被当作<code>字符串</code>或者<code>二进制</code>数据,但是数据<code>加载速度快</code>,典型的使用场景是处理<code>高并发</code>或者用于日志系统等,这一类的数据库有<code>Redis</code>. <code>Tokyo Cabinet</code>等.</li><li><code>列存储</code>数据库。列存储数据库功能相对<code>局限</code>,但是查找<code>速度快</code>,容易进行<code>分布式扩展</code>,一般用于<code>分布式文件系统</code>中,这一类的数据库有<code>HBase</code>, <code>Cassandra</code>等。</li><li><pre><code>文档型数据库    。和`Key/Value`键值存储类似,文档型数据库也没有严格的`数据格式`,这既是缺点也是优势,因为不需要预先创建表结构,数据格式更加灵活,一般可用在`Web`应用中,这一类数据库有`MongoDB`, `CouchDB`等。</code></pre></li><li><pre><code>图形数据库    。图形数据库专注于`构建关系图谱`,例如`社交网络`,`推荐系统`等,这一类的数据库有`Neo4J`、`DEX`等。</code></pre><h3 id="6-1整合Redis"><a href="#6-1整合Redis" class="headerlink" title="6.1整合Redis"></a>6.1整合Redis</h3><code>Redis</code>是一个使用<code>C</code>编写的基于<code>内存</code>的<code>NoSQL</code>数据库,它是目前最流行的键值对存储数据库。<code>Redis</code>由一个<code>Key, Value</code>映射的<code>字典</code>构成,与其他NoSQL不同, Redis中<code>Value</code>的类型不局限于<code>字符串</code>,还支持<code>列表</code>、<code>集合</code>、<code>有序集合</code>、<code>散列</code>等。</li></ul><h5 id="6-1-1-Redis简介"><a href="#6-1-1-Redis简介" class="headerlink" title="6.1.1 Redis简介"></a>6.1.1 Redis简介</h5><p><code>Redis</code>不仅可以当作缓存使用,也可以配置<code>数据持久化</code>后当作<code>NoSQL</code>数据库使用, 目前支持两种持久化方式:<code>快照持久化</code>和<code>AOF持久化</code>。另一方面, Redis也可以搭建<code>集群</code>或者<code>主从复制</code>结构,在<code>高并发</code>环境下具有<code>高可用性</code>。</p><h5 id="6-1-2-Redis安装"><a href="#6-1-2-Redis安装" class="headerlink" title="6.1.2 Redis安装"></a>6.1.2 Redis安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Loaded plugins: fastestmirror, product-id, search-disabled-repos, subscription-manager</span><br><span class="line"></span><br><span class="line">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br><span class="line"></span><br><span class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Repository epel-debuginfo is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Repository epel-source is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * extras: mirrors.cloud.aliyuncs.com</span><br><span class="line"> * updates: mirrors.cloud.aliyuncs.com</span><br><span class="line">Package redis-3.2.12-2.el7.x86_64 already installed and latest version</span><br><span class="line">Nothing to <span class="keyword">do</span></span><br><span class="line">[root@liruilong ~]<span class="comment"># </span></span><br><span class="line">[root@liruilong ~]<span class="comment"># redis-server -v</span></span><br><span class="line">Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-3.6.0 bits=64 build=7897e7d0e13773f</span><br><span class="line">[root@liruilong ~]<span class="comment"># redis-cli -v</span></span><br><span class="line">redis-cli 3.2.12</span><br></pre></td></tr></table></figure><ul><li>Redis 远程连接:<a href="https://www.cnblogs.com/liruilong/p/14531885.html">https://www.cnblogs.com/liruilong/p/14531885.html</a><h5 id="6-1-3-Redis整合Spring-Boot"><a href="#6-1-3-Redis整合Spring-Boot" class="headerlink" title="6.1.3 Redis整合Spring Boot"></a>6.1.3 Redis整合Spring Boot</h5><code>Redis</code>的<code>Java</code>客户端有很多,例如<code>Jedis</code>、<code>JRedis</code>、 <code>Spring Data Redis</code>等, <code>Spring Boot</code>借助于<code>Spring. Data Redis</code>为Redis提供了开箱即用<code>自动化配置</code>,开发者只需要添加相关依赖并配置Redis连接信息即可,具体整合步骤如下。<h5 id="添加如下依赖"><a href="#添加如下依赖" class="headerlink" title="添加如下依赖:"></a>添加如下依赖:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>默认情况下,<code> spring-boot-starter-data-redis</code>使用的Redis工具是<code>Lettuce</code>,考虑到有的开发者习惯使用<code>Jedis</code>,因此可以从<code>spring-boot-starter-data-redis</code>中排除<code>Lettuce</code>并引入<code>Jedis</code>,修改为如下依赖:<h5 id="配置Redis接下来在application-properties-中配置Redis连接信息"><a href="#配置Redis接下来在application-properties-中配置Redis连接信息" class="headerlink" title="配置Redis接下来在application.properties 中配置Redis连接信息"></a>配置Redis接下来在application.properties 中配置Redis连接信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基本连接信息配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表示使用的Redis库的编号, Redis中提供了16个database,编号为0-15</span></span><br><span class="line">spring.redis.database=0</span><br><span class="line">spring.redis.host=192.168.66.130</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=123@456</span><br><span class="line"><span class="comment">#连接池信息配置.</span></span><br><span class="line">spring.redis.lettuce.pool.max-active=</span><br><span class="line">spring.redis.lettuce.pool.max-idle=</span><br><span class="line">spring.redis.lettuce.pool.max-wait=</span><br><span class="line">spring.redis.lettuce.pool.min-idle=</span><br><span class="line">spring.redis.lettuce.shutdown-timeout=</span><br><span class="line"><span class="comment">#连接池最大连接数</span></span><br><span class="line">spring.redis.jedis.pool.max-active=8</span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.max-idle=8</span><br><span class="line"><span class="comment">#连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.jedis.pool.max-wait=-1ms</span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line">spring.redis.jedis.pool.min-idle=0</span><br></pre></td></tr></table></figure>在<code>·Spring Boot·</code>的自动配置类中提供了<code>·RedisAutoConfiguration·</code>进行Redis的配置,部分源码<br><img src="https://img-blog.csdnimg.cn/20210618234017580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由这一段源码可以看到, <code>application.properties</code>中配置的信息将被注入<code>RedisProperties</code>中,如果开发者自己没有提供RedisTemplate或者<code>StringRedis Template</code>实例,则<code>Spring Boot</code>默认会提供这两个实例, <code>RedisTemplate</code>和<code>StringRedisTemplate</code>实例则提供了<code>Redis</code>的基本操作方法。<br><img src="https://img-blog.csdnimg.cn/20210618234108904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops1 = stringRedisTemplate.opsForValue();</span><br><span class="line">        ops1.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        String name = ops1.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        ValueOperations ops2 = redisTemplate.opsForValue();</span><br><span class="line">        Book b1 = <span class="keyword">new</span> Book();</span><br><span class="line">        b1.setId(<span class="number">1</span>);</span><br><span class="line">        b1.setName(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        b1.setAuthor(<span class="string">&quot;曹雪芹&quot;</span>);</span><br><span class="line">        ops2.set(<span class="string">&quot;b1&quot;</span>, b1);</span><br><span class="line">        Book book = (Book) ops2.get(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>StringRedisTemplate</code>是<code>RedisTemplate</code>的子类,<code> StringRedisTemplate</code>中的<code>key</code>和<code>value</code>都是<code>字符串</code>，采用的序列化方案是<code>StringRedisSerializer</code>,而<code>RedisTemplate</code>则可以用来操作对象,<code>RedisTemplate</code>采用的序列化方案是<code>JdkSerializationRedisSerializer.</code>无论是<code>StringRedis Template</code>还是<code>RedisTemplate,</code>操作<code>Redis</code>的方法都是一致的。</li><li><code>StringRedisTemplate</code>和<code>RedisTemplate</code>都是通过<code>opsForValue</code>, <code>opsForZSet</code>或者<code>opsForSet</code>等方法首先<code>获取</code>一个<code>操作对象</code>,再使用该<code>操作对象</code>完成数据的读写。</li><li>第10行向Redis中存储一条记录,第11行将之读取出来,第18行向Redis中存储一个对象,第19行将之读取出来。<h5 id="6-1-4-Redis集群整合Spring-Boot"><a href="#6-1-4-Redis集群整合Spring-Boot" class="headerlink" title="6.1.4 Redis集群整合Spring Boot."></a>6.1.4 Redis集群整合Spring Boot.</h5><h6 id="1-搭建Redis集群"><a href="#1-搭建Redis集群" class="headerlink" title="1,搭建Redis集群"></a>1,搭建Redis集群</h6><code>·(1)集群原理·</code>在<code>Redis集群</code>中,所有的<code>Redis节点</code>彼此<code>互联</code>,节点内部使用<code>二进制协议</code>优化传输速度和带宽。当一个节点挂掉后,集群中<code>超过半数</code>的节点<code>检测失效</code>时才认为该节点<code>已失效</code>。不同于<code>Tomcat集群</code>需要使用<code>反向代理服务器</code>, <code>Redis集群</code>中的<code>任意节点</code>都可以直接和<code>Java客户端连接</code>。</li></ul><p><code>Redis集群</code>上的数据分配则是<code>采用哈希槽(HASH SLOT) </code>, <code>Redis集群</code>中内置了<code>16384个哈希槽</code>,当有数据需要<code>存储</code>时, Redis会首先使用<code>CRC16</code>算法对<code>key</code>进行计算,将<code>计算获得的结果</code>对<code>16384</code>取余,这样每一个<code>key</code>都会对应一个取值在0-16383之间的<code>哈希槽</code>,     <code>Redis</code>则根据这个<code>余数</code>将该条<code>数据存储</code>到对应的<code>Redis节点</code>上,开发者可根据每个<code>Redis实例的性能</code>来调整每个<code>Redis实例上哈希槽</code>的<code>分布范伟</code></p><h3 id="6-2-整合MongoDB"><a href="#6-2-整合MongoDB" class="headerlink" title="6.2 整合MongoDB."></a>6.2 整合MongoDB.</h3><h5 id="6-2-1-MongoDB简介"><a href="#6-2-1-MongoDB简介" class="headerlink" title="6.2.1 MongoDB简介"></a>6.2.1 MongoDB简介</h5><p><code>·MongoDB</code>·是一种面向文档的数据库管理系统,它是一个介于关系型数据库和非关系型数据库，之间的产品, <code>·MongoDB·</code>功能丰富,它支持一种类似<code>JSON</code>的<code>BSON</code>数据格式,既可以存储简单的数据格式,也可以存储复杂的数据类型。·<code>MongoDB</code>·最大的特点是它支持的查询语言非常强大,并且还支持对数据建立索引。总体来说, <code>·MongoDB·</code>是一款应用相当广泛的<code>NosQL</code>数据库。</p><h5 id="6-2-2-MongoDB安装"><a href="#6-2-2-MongoDB安装" class="headerlink" title="6.2.2 MongoDB安装"></a>6.2.2 MongoDB安装</h5><p>關於Mongodb的學習<a href="https://blog.csdn.net/sanhewuyang/article/details/107597408">《MongoDB大数据处理权威指南》读书笔记:https://blog.csdn.net/sanhewuyang/article/details/107597408</a></p><h5 id="6-2-3-MongoDB整合Spring-Boot"><a href="#6-2-3-MongoDB整合Spring-Boot" class="headerlink" title="6.2.3 MongoDB整合Spring Boot."></a>6.2.3 MongoDB整合Spring Boot.</h5><p>借助于<code>Spring Data MongoD</code>B, <code>Spring Boot</code>为<code>MongoDB</code>也提供了开箱即用的自动化配置方案,具体配置步骤如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.authentication-database=admin</span><br><span class="line">spring.data.mongodb.database=<span class="built_in">test</span></span><br><span class="line">spring.data.mongodb.host=192.168.248.144</span><br><span class="line">spring.data.mongodb.port=27017</span><br><span class="line">spring.data.mongodb.username=root</span><br><span class="line">spring.data.mongodb.password=123</span><br><span class="line"><span class="comment">#spring.data.mongodb.uri=mongodb://root:123@192.168.248.144:27017/admin</span></span><br><span class="line"><span class="comment">#spring.data.mongodb.uri=mongodb://192.168.248.144:27017/test</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findByAuthorContains</span><span class="params">(String author)</span></span>;</span><br><span class="line">    <span class="function">Book <span class="title">findByNameEquals</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>MongoTemplate</code>除了继承<code>MongoRepository</code>外,<code>Spring Data MongoDB</code>还提供了<code>MongoTemplate</code>用来方便地操作<code>MongoDB</code>。在<code>Spring Boot</code>中,若添加了<code>MongoDB</code>相关的依赖,而开发者并没有提供<code>MongoTemplate </code>,则默认会有一个<code>MongoTemplate</code>注册到<code>Spring容器</code>中,相关配置源码在<code>MongoDataAutoConfiguration</code>类中。因此,用户可以直接使用<code>MongoTemplate</code>,在<code>Controller</code>中直接注入<code>MongoTemplate</code>就可以使用了,添加如下代码到第5步的Controller中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ....</span><br><span class="line">        mongoTemplate.insertAll(books);</span><br><span class="line">        List&lt;Book&gt; list = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Book book = mongoTemplate.findById(<span class="number">3</span>, Book.class);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ....</span><br><span class="line">        bookDao.insert(books);</span><br><span class="line">        List&lt;Book&gt; books1 = bookDao.findByAuthorContains(<span class="string">&quot;鲁迅&quot;</span>);</span><br><span class="line">        System.out.println(books1);</span><br><span class="line">        Book book = bookDao.findByNameEquals(<span class="string">&quot;朝花夕拾&quot;</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-Session共享"><a href="#6-3-Session共享" class="headerlink" title="6.3 Session共享"></a>6.3 Session共享</h3><p>正常情况下, <code>HttpSession</code>是通过<code>Servlet容器</code>创建并进行管理的,创建成功之后都是保存在<code>内存中</code>。如果开发者需要对项目进行<code>横向扩展搭建集群</code>,那么可以利用一些<code>硬件</code>或者<code>软件工具</code>来做<code>负载均衡</code>,此时,来自同一用户的<code>HTTP请求</code>就有可能被<code>分发到不同的实例</code>上去,如何保证<code>各个实例之间Session的同步</code>就成为一个必须解决的问题。</p><p><code>Spring Boot</code>提供了自动化的<code>Session共享配置</code>,它结合<code>Redis</code>可以非常方便地解决这个问题。使用<code>Redis</code>解决<code>Session共享问题</code>的原理非常简单,就是把原本<code>存储在不同服务器上</code>的<code>Session</code>拿出来放在<code>一个独立的服务器</code>上.<br><img src="https://img-blog.csdnimg.cn/20210619013755584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当一个请求到达<code>Nginx</code>服务器后,首先进行<code>请求分发</code>,假设请求被<code>real serverl</code>处理了, <code>real server</code>在处理请求时,无论是存储<code>Session</code>还是读取<code>Session</code>,都去操作<code>Session服务器</code>而不是操作自身<code>内存中的Session</code>,其他<code>real server</code>在处理请求时也是如此,这样就可以实现<code>Session共享</code>了</p><h5 id="6-3-1-Session共享配置"><a href="#6-3-1-Session共享配置" class="headerlink" title="6.3.1 Session共享配置"></a>6.3.1 Session共享配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了<code>Redis依赖</code>之外,这里还要提供<code>spring-session-data-redis</code>依赖, <code>Spring Session</code>可以做到<code>透·明化</code>地<code>替换</code>掉应用的<code>Session容器</code>。项目创建成功后,在<code>application.properties</code>中进行<code>Redis</code>基本连接信息配置,代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.database=0</span><br><span class="line">spring.redis.host=192.168.66.130</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=123@456</span><br><span class="line">spring.redis.jedis.pool.max-active=8</span><br><span class="line">spring.redis.jedis.pool.max-idle=8</span><br><span class="line">spring.redis.jedis.pool.max-wait=-1ms</span><br><span class="line">spring.redis.jedis.pool.min-idle=0</span><br></pre></td></tr></table></figure><p>添加··<code>@EnableRedisHttpSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session托管到redis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession(maxInactiveIntervalInSeconds= 3600*24, redisFlushMode = RedisFlushMode.ON_SAVE, redisNamespace = &quot;aurora-web&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>maxInactiveIntervalInSeconds: 设置 Session 失效时间，使用 Redis Session 之后，原 Spring Boot 的server.session.timeout 属性不再生效。</li><li>经过上面的配置后，Session调用就会自动去Redis存取。另外，想要达到Session共享的目的，只需要在其他的系统上做同样的配置即可。<h6 id="EnableRedisHttpSession源码"><a href="#EnableRedisHttpSession源码" class="headerlink" title="@EnableRedisHttpSession源码"></a>@EnableRedisHttpSession源码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;RedisHttpSessionConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRedisHttpSession &#123;</span><br><span class="line">    <span class="comment">//Session默认过期时间，单位秒，默认1800秒</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxInactiveIntervalInSeconds</span><span class="params">()</span> <span class="keyword">default</span> 1800</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//配置key的namespace，默认的是spring:session，如果不同的应用共用一个redis，应该为应用配置不同的namespace，这样才能区分这个Session是来自哪个应用的</span></span><br><span class="line">    <span class="function">String <span class="title">redisNamespace</span><span class="params">()</span> <span class="keyword">default</span> &quot;spring:session&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//配置刷新Redis中Session方式，默认是ON_SAVE模式，只有当Response提交后才会将Session提交到Redis,也可以配置成IMMEDIATE模式，即所有对Session的更改会立即更新到Redis</span></span><br><span class="line">    <span class="function">RedisFlushMode <span class="title">redisFlushMode</span><span class="params">()</span> <span class="keyword">default</span> RedisFlushMode.ON_SAVE</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//清理过期Session的定时任务</span></span><br><span class="line">    <span class="function">String <span class="title">cleanupCron</span><span class="params">()</span> <span class="keyword">default</span> &quot;0 * * * * *&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试一下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveName</span><span class="params">(String name, HttpSession session)</span> </span>&#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port + <span class="string">&quot;:&quot;</span></span><br><span class="line">                + session.getAttribute(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-2-Nginx负载均衡"><a href="#6-3-2-Nginx负载均衡" class="headerlink" title="6.3.2 Nginx负载均衡"></a>6.3.2 Nginx负载均衡</h5>关于Nginx，可以访问<a href="https://blog.csdn.net/sanhewuyang/article/details/114488191">Nginx 学习笔记(《深入理解Nginx:模块开发与架构解析》读书笔记):https://blog.csdn.net/sanhewuyang/article/details/114488191</a><br><code>nginx.conf·</code>配置文件修改：<br><img src="https://img-blog.csdnimg.cn/20210619022854450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http: //backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第7章构建RESTful服务"><a href="#第7章构建RESTful服务" class="headerlink" title="第7章构建RESTful服务"></a>第7章构建RESTful服务</h2><h3 id="7-1-REST简介"><a href="#7-1-REST简介" class="headerlink" title="7.1 REST简介"></a>7.1 REST简介</h3><code>REST (Representational State Transfer)</code>是一种<code>Web</code>软件架构风格,它是一种<code>风格</code>,而不是<code>标准</code>,匹配或兼容这种架构风格的网络服务称为<code>REST服务</code>。REST服务简洁并且有层次, REST通常基于<code>HTTP</code>,<code>URI</code>和<code>XML</code>以及<code>HTML</code>这些现有的广泛流行的协议和标准。</li></ul><p><code>在REST</code>中,资源是由<code>URI</code>来指定的,对资源的增删改查操作可以通过<code>HTTP</code>协议提供的<code>GET, POST, PUT, DELETE</code>等方法实现。使用REST可以更高效地利用缓存来提高响应速度,同时<code>REST</code>中的通信会话状态由<code>客户端</code>来维护,这可以让不同的服务器处理一系列请求中的不同请求,进而提高服务器的扩展性。在前后端分离项目中,一个设计良好的Web软件架构必然要满足REST风格。在<code>Spring MVC</code>框架中,开发者可以通过<code>@RestController</code>注解开发一个RESTful服务,不过,<code>Spring Boot</code>对此提供了自动化配置方案,开发者只需要添加相关依赖就能快速构建一个<code>RESTful</code>服务。</p><h3 id="7-2-JPA实现REST"><a href="#7-2-JPA实现REST" class="headerlink" title="7.2 JPA实现REST"></a>7.2 JPA实现REST</h3><p>在<code>Spring Boot </code>中,使用S<code>pring Data JPA</code>和<code>Spring Data Rest</code>可以快速开发出一个<code>RESTful应用</code>。接下来向读者介绍<code>Spring Boot</code>中非常方便的<code>RESTful应用开发</code>。</p><h4 id="7-2-1-基本实现"><a href="#7-2-1-基本实现" class="headerlink" title="7.2.1 基本实现"></a>7.2.1 基本实现</h4><p>这里的依赖除了<code>数据库相关的依赖外</code>,还有<code>Spring Data JPA</code>的依赖以及<code>Spring Data Rest</code>的依赖。项目创建完成后,在<code>application.properties</code> 中配置基本的数据库连接信息:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的依赖除了数据库相关的依赖外,还有<code>Spring Data JPA</code>的依赖以及<code>Spring Data Rest</code>的依赖。项目创建完成后,在<code>application.properties</code>中配置基本的数据库连接信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123</span><br><span class="line">spring.datasource.url=jdbc:mysql:///jparestful</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect</span><br><span class="line">spring.jpa.show-sql=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##每页默认记录数，缺省值为20</span></span><br><span class="line"><span class="comment">#spring.data.rest.default-page-size=2</span></span><br><span class="line"><span class="comment">##分页查询页码参数名，缺省值为page</span></span><br><span class="line"><span class="comment">#spring.data.rest.page-param-name=page</span></span><br><span class="line"><span class="comment">##分页查询记录数参数名，缺省值为size</span></span><br><span class="line"><span class="comment">#spring.data.rest.limit-param-name=size</span></span><br><span class="line"><span class="comment">##分页查询排序参数名，缺省值为sort</span></span><br><span class="line"><span class="comment">#spring.data.rest.sort-param-name=sort</span></span><br><span class="line"><span class="comment">##base-path表示给所有请求路径都加上前缀</span></span><br><span class="line"><span class="comment">#spring.data.rest.base-path=/api</span></span><br><span class="line"><span class="comment">##添加成功时是否返回添加内容</span></span><br><span class="line"><span class="comment">#spring.data.rest.return-body-on-create=true</span></span><br><span class="line"><span class="comment">##更新成功时是否返回更新内容</span></span><br><span class="line"><span class="comment">#spring.data.rest.return-body-on-update=true</span></span><br></pre></td></tr></table></figure><p>创建实体类，创建<code>BookRepository</code>类继承<code>JpaRepository</code>, <code>JpaRepository</code>中默认提供了一些基本的操作方法,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">saveAllAndFlush</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; entities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deleteAllInBatch(entities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllByIdInBatch</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getById</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-2-2-自定义请求路径"><a href="#7-2-2-自定义请求路径" class="headerlink" title="7.2.2 自定义请求路径"></a>7.2.2 自定义请求路径</h4><p>默认情况下,请求路径都是<code>实体类名</code>小写加<code>s</code>,如果开发者想对<code>请求路径进行重定义</code>,通过<code>@RepositoryRestResource</code>注解即可实现,下面的案例只需在<code>BookRepository</code>上添加<code>@RepositoryRestResource</code>注解即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RepositoryRestResource(path = &quot;bs&quot;,collectionResourceRel = &quot;bs&quot;,itemResourceRel = &quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RepositoryRestResource</code>·注解的<code>·path·</code>属性表示将所有请求路径中的<code>books</code>都修改为<code>bs,</code>如<code>http://ocalhost: 8080/bs: </code></li><li><code>collectionResourceRel</code>属性表示将返回的<code>JSON</code>集合中<code>book</code>集合的<code>key</code>修改为<code>bs</code>; </li><li><code>itemResourceRel</code>表示将返回的<code>JSON</code>集合中的单个book的key修改为b,</li></ul><h4 id="7-2-3-自定义查询方法"><a href="#7-2-3-自定义查询方法" class="headerlink" title="7.2.3 自定义查询方法."></a>7.2.3 自定义查询方法.</h4><p>默认的查询方法支持<code>分页查询</code>、<code>排序查询</code>以及按照<code>id查询</code>,如果开发者想要按照某个<code>属性查询</code>,只需在<code>BookRepository</code>中定义相关<code>方法并暴露</code>出去即可,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource(path = &quot;bs&quot;,collectionResourceRel = &quot;bs&quot;,itemResourceRel = &quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@RestResource(exported = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer integer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestResource(path = &quot;author&quot;,rel = &quot;author&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findByAuthorContains</span><span class="params">(<span class="meta">@Param(&quot;author&quot;)</span> String author)</span></span>;</span><br><span class="line">    <span class="meta">@RestResource(path = &quot;name&quot;,rel = &quot;name&quot;)</span></span><br><span class="line">    <span class="function">Book <span class="title">findByNameEquals</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>·<code>自定义查询</code>只需要在<code>BookRepository</code>中定义相关查询方法即可,方法定义好之后可以不添加<code>@RestResource</code>注解,默认路径就是<code>方法名</code>。以第4行定义的方法为例,若不添加<code>@RestResource</code>注解, 则默 认 该方法的调用路径为<code>http://ocalhost:8080/bs/search/indByAuthorContains?author=鲁迅</code>。如果想对查询<code>路径进行自定义</code>,只需要添加<code>@RestResource注解</code>即可, <code>path属性</code>即表示最新的路径。还是以第4行的方法为例,添加<code>@RestResource(path = &quot;author&quot;,rel = &quot;author&quot;)</code>注解后的查询路径为”<a href="http://ocalhost:8080/bs/search/author?author=%E9%B2%81%E8%BF%85&quot;">http://ocalhost:8080/bs/search/author?author=鲁迅&quot;</a>.</li><li>用户可以直接访问<code>http/ocalhost:8080/bs/search</code>路径查看该<code>实体类暴露</code>出来了哪些<code>查询方法</code>,默认情况下,在<code>查询方法展示</code>时使用的路径是方法名,通过<code>@RestResource</code>注解中的<code>rel</code>属性可以对这里的<code>路径进行重定义</code>,如图7-6所示。<h4 id="7-2-4-隐藏方法"><a href="#7-2-4-隐藏方法" class="headerlink" title="7.2.4 隐藏方法"></a>7.2.4 隐藏方法</h4>默认情况下,凡是继承了<code>Repository接口</code>(或者<code>Repository的子类</code>)的类都会被暴露出来,即开发者可执行<code>基本的增删改查</code>方法。以上文的<code>BookRepository</code>为例,如果开发者提供了<code>BookRepository</code>继承自<code>Repository</code>,就能执行对Book的基本操作,如果开发者继承了<code>Repository</code>但是又不想暴露相关操作,做如下配置即可:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RepositoryRestResource(exported = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@RestResource(exported = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer integer)</span></span>;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>将·<code>@RepositoryRestResource</code>注解中的<code>exported</code>属性置为<code>false</code>之后,则<code>增删改查接口</code>都会<code>失效</code>, <code>BookRepository</code>类中定义的相关方法也会失效。若只是单纯地<code>不想暴露某个方法</code>,则在方法上进行配置即可,例如开发者想<code>屏蔽DELETE接口</code>.<h4 id="7-2-5-配置CORS"><a href="#7-2-5-配置CORS" class="headerlink" title="7.2.5 配置CORS"></a>7.2.5 配置CORS</h4>在<code>4.6节</code>已经向读者介绍了<code>CORS</code>两种不同的配置方式,一种是直接在方法上添加<code>@CrosSorigin注解</code>,另一种是<code>全局配置</code>。<code>全局配置</code>在这里依然适用,但是默认的<code>RESTful工程</code>不需要开发者自己<code>提供Controller</code>,因此添加在<code>Controller</code>的方法上的<code>注解</code>可以直接写在<code>BookRepository</code>上,代码如下:接口跨域：<code>@CrossOrigin</code>注解添加到某一个方法上即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CrossOrigin</span></span><br><span class="line"><span class="meta">@RepositoryRestResource(path = &quot;bs&quot;,collectionResourceRel = &quot;bs&quot;,itemResourceRel = &quot;b&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">   <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findByAuthorContains</span><span class="params">(<span class="meta">@Param(&quot;author&quot;)</span> String author)</span></span>;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-6其他配置"><a href="#7-2-6其他配置" class="headerlink" title="7.2.6其他配置"></a>7.2.6其他配置</h4><h6 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a><code>application.properties</code>配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##每页默认记录数，缺省值为20</span></span><br><span class="line"><span class="comment">#spring.data.rest.default-page-size=2</span></span><br><span class="line"><span class="comment">##分页查询页码参数名，缺省值为page</span></span><br><span class="line"><span class="comment">#spring.data.rest.page-param-name=page</span></span><br><span class="line"><span class="comment">##分页查询记录数参数名，缺省值为size</span></span><br><span class="line"><span class="comment">#spring.data.rest.limit-param-name=size</span></span><br><span class="line"><span class="comment">##分页查询排序参数名，缺省值为sort</span></span><br><span class="line"><span class="comment">#spring.data.rest.sort-param-name=sort</span></span><br><span class="line"><span class="comment">##base-path表示给所有请求路径都加上前缀</span></span><br><span class="line"><span class="comment">#spring.data.rest.base-path=/api</span></span><br><span class="line"><span class="comment">##添加成功时是否返回添加内容</span></span><br><span class="line"><span class="comment">#spring.data.rest.return-body-on-create=true</span></span><br><span class="line"><span class="comment">##更新成功时是否返回更新内容</span></span><br><span class="line"><span class="comment">#spring.data.rest.return-body-on-update=true</span></span><br></pre></td></tr></table></figure><p>当然,这些<code>XML配置</code>也可以在<code>Java代码</code>中配置,且代码中配置的优先级高于<code>application.properties</code>配置的优先级,代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> <span class="keyword">extends</span> <span class="title">RepositoryRestConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureRepositoryRestConfiguration</span><span class="params">(RepositoryRestConfiguration config)</span> </span>&#123;</span><br><span class="line">        config.setDefaultPageSize(<span class="number">2</span>)</span><br><span class="line">                .setPageParamName(<span class="string">&quot;page&quot;</span>)</span><br><span class="line">                .setLimitParamName(<span class="string">&quot;size&quot;</span>)</span><br><span class="line">                .setSortParamName(<span class="string">&quot;sort&quot;</span>)</span><br><span class="line">                .setBasePath(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">                .setReturnBodyOnCreate(<span class="keyword">true</span>)</span><br><span class="line">                .setReturnBodyOnUpdate(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-2-7-JPA使用rest自定义链接"><a href="#7-2-7-JPA使用rest自定义链接" class="headerlink" title="7.2.7 JPA使用rest自定义链接"></a>7.2.7 JPA使用rest自定义链接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResourceProcessor</span> <span class="keyword">implements</span> <span class="title">ResourceProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceSupport <span class="title">process</span><span class="params">(ResourceSupport resourceSupport)</span> </span>&#123;</span><br><span class="line">        resourceSupport.add(<span class="keyword">new</span> Link(<span class="string">&quot;http://www.baidu.com&quot;</span>, <span class="string">&quot;百度一下&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceSupport;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-MongoDB实现REST"><a href="#7-3-MongoDB实现REST" class="headerlink" title="7.3 MongoDB实现REST"></a>7.3 MongoDB实现REST</h3><p><code>MongoDB</code>整合<code>Spring Boot</code>,而使用<code>Spring Boot</code>快速构建<code>RESTful·服务</code>除了结合<code>Spring Data JPA</code>之外,也可以结合<code>Spring Data MongoDB</code>实现。使用<code>Spring DataMongoDB</code>构建<code>RESTful</code>服务也是三个步骤,分别如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里<code>Spring Data Rest</code>的依赖和7.2节中的一致,只是将<code>Spring Data JPA</code>的依赖变为<code>Spring DataMongoDB</code>的依赖。项目创建成功后,在<code>application.properties</code>中配置<code>MongoDB</code>的基本连接信息,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.authentication-database=<span class="built_in">test</span></span><br><span class="line">spring.data.mongodb.database=<span class="built_in">test</span></span><br><span class="line">spring.data.mongodb.username=sang</span><br><span class="line">spring.data.mongodb.password=123</span><br><span class="line">spring.data.mongodb.host=192.168.248.144</span><br><span class="line">spring.data.mongodb.port=27017</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第8章开发者工具与单元测试"><a href="#第8章开发者工具与单元测试" class="headerlink" title="第8章开发者工具与单元测试"></a>第8章开发者工具与单元测试</h2><h3 id="8-1-devtools简介"><a href="#8-1-devtools简介" class="headerlink" title="8.1 devtools简介"></a>8.1 devtools简介</h3><p><code>Spring Boot</code>中提供了一组开发工具<code>spring-boot-devtools</code>,可以提高开发者的工作效率,开发者可以将该模块包含在任何项目中, <code>spring-boot-devtools</code>最方便的地方莫过于<code>热部署</code>了。</p><h3 id="8-2-devtools实战"><a href="#8-2-devtools实战" class="headerlink" title="8.2 devtools实战"></a>8.2 devtools实战</h3><h4 id="8-2-1-基本用法"><a href="#8-2-1-基本用法" class="headerlink" title="8.2.1 基本用法"></a>8.2.1 基本用法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>这里多了一个optional选项,是为了防止将<code>devtools依赖传递</code>到其他模块中。当开发者将应用打包运行后, <code>devtools</code>会被自动禁用。</p></li><li><p>当开发者将<code>spring-boot-devtools</code>引入项目后,只要<code>classpath</code>路径下的<code>文件发生了变化</code>,项目就会自动重启,这极大地提高了项目的开发速度。</p><h4 id="8-2-2-基本原理"><a href="#8-2-2-基本原理" class="headerlink" title="8.2.2 基本原理"></a>8.2.2 基本原理</h4><p><code>Spring Boot中</code>使用的自动重启技术涉及两个类加载器,一个是<code>baseclassloader,</code>用来<code>加载不会变化的类</code>,例如项目引用的第三方的jar;另一个是<code>restartclassloader</code>,用来加载<code>开发者自己写的会·变化的类</code>。当项目需要重启时, restartclassloader将被一个新创建的类加载器代替,而baseclassloader则继续使用原来的,这种启动方式要比<code>冷启动</code>快很多,因为<code>baseclassloader</code>已经存在并且已经加载好</p><h3 id="8-3单元测试"><a href="#8-3单元测试" class="headerlink" title="8.3单元测试"></a>8.3单元测试</h3><h4 id="8-3-1-基本用法"><a href="#8-3-1-基本用法" class="headerlink" title="8.3.1 基本用法"></a>8.3.1 基本用法</h4><p>当开发者使用Intelli IDEA或者在线创建一个Spring Boot项目时,创建成功后,默认都添加了spring-bool-starter-est依赖,并且创建好了测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebApplicationContext wac;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/hello&quot;</span>, <span class="string">&quot;name=aaa&quot;</span>)).andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(helloService.sayHello(<span class="string">&quot;里斯&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@RunWith</code>注解,该注解将<code>JUnit</code>执行类修改为<code>SpringRunner</code>,而<code>SpringRunner</code>是<code>Spring Framework</code>中测试类<code>SpringJUnit4ClassRunner</code>的别名。</p></li><li><p><code>@Spring BootTest</code>注解除了提供<code>Spring TestContext</code>中的常规测试功能之外,还提供了其他特性:提供默认的<code>ContextLoader</code>, 自动搜索<code>@Spring BootConfiguration</code>、自定义环境属性、为不同的<code>webEnvironment</code>模式提供支持,这里的<code>webEnvironment</code>模式主要有4种.這裏不説了。</p><h4 id="8-3-2-Service测试"><a href="#8-3-2-Service测试" class="headerlink" title="8.3.2 Service测试"></a>8.3.2 Service测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot; !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService helloService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String hello = helloService.sayHello(<span class="string">&quot;Michael&quot;</span>);</span><br><span class="line">    Assert.assertThat(hello, Matchers.is(<span class="string">&quot;Hello Michael !&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-Controller测试"><a href="#8-3-3-Controller测试" class="headerlink" title="8.3.3 Controller测试."></a>8.3.3 Controller测试.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       Book book = <span class="keyword">new</span> Book();</span><br><span class="line">       book.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">       book.setName(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">       book.setId(<span class="number">1</span>);</span><br><span class="line">       String s = om.writeValueAsString(book);</span><br><span class="line">       MvcResult mvcResult = mockMvc</span><br><span class="line">               .perform(MockMvcRequestBuilders</span><br><span class="line">                       .post(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">                       .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                       .content(s))</span><br><span class="line">               .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">               .andReturn();</span><br><span class="line">       System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MockMvc mockMvc;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">WebApplicationContext wac;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HelloService helloService;</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MvcResult mvcResult = mockMvc.perform(</span><br><span class="line">            MockMvcRequestBuilders</span><br><span class="line">                    .get(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_FORM_URLENCODED)</span><br><span class="line">                    .param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Michael&quot;</span>))</span><br><span class="line">            <span class="comment">//返回什么数据        </span></span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andDo(MockMvcResultHandlers.print())</span><br><span class="line">            .andReturn();</span><br><span class="line">    System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了<code>MockMvc</code>这种测试方式之外,<code> Spring Boot</code>还专门提供了<code>TestRestTemplate</code>用来实现集成测试,若开发者使用了<code>@Spring BootTest</code>注解,则<code>TestRestTemplate</code>将自动可用,直接在测试类中注入即可。注意,如果要使用<code>TestRestTemplate</code>进行测试,需要将<code>@Spring BootTest</code>注解中<code>webEnvironment</code>属性的默认值由<code>WebEnvironment.MOCK</code>修改为<code>webEnvironment.DEFINED PORT</code>或者<code>WebEnvironment.RANDOM PORT</code>,因为这两种都是使用一个真实的Servlet环境而不是模拟的Serlet环境。其代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TestRestTemplate restTemplate;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ResponseEntity&lt;String&gt; hello = restTemplate.getForEntity(<span class="string">&quot;/hello?name=&#123;0&#125;&quot;</span>, String.class, <span class="string">&quot;Michael&quot;</span>);</span><br><span class="line">       System.out.println(hello.getBody());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>test2方法演示了POST请求如何传递JSON数据,首先在32行将一个book对象转为一段JSON,然后在36行设置请求的contentType为APPLICATION-JSON,最后在37行设置content为上传的JSON即可。</p><h4 id="8-3-4-JSON测试"><a href="#8-3-4-JSON测试" class="headerlink" title="8.3.4 JSON测试"></a>8.3.4 JSON测试</h4><p>开发者可以使用<code>@JsonTest</code>测试<code>JSON序列化</code>和<code>反序列化</code>是否工作正常,该注解将<code>自动配置Jackson ObjectMapper</code>.<code>@JsonComponent</code>以及<code>Jackson Modules</code>.如果开发者使用Gson代替Jackson,该注解将配置Gson,具体用法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@JsonTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JacksonTester&lt;Book&gt; jacksonTester;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSerialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        book.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">        Assertions.assertThat(jacksonTester.write(book))</span><br><span class="line">                .isEqualToJson(<span class="string">&quot;book.json&quot;</span>);</span><br><span class="line">        Assertions.assertThat(jacksonTester.write(book))</span><br><span class="line">                .hasJsonPathStringValue(<span class="string">&quot;@.name&quot;</span>);</span><br><span class="line">        Assertions.assertThat(jacksonTester.write(book))</span><br><span class="line">                .extractingJsonPathStringValue(<span class="string">&quot;@.name&quot;</span>)</span><br><span class="line">                .isEqualTo(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;三国演义\&quot;,\&quot;author\&quot;:\&quot;罗贯中\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//        Book book = new Book();</span></span><br><span class="line"><span class="comment">//        book.setId(1);</span></span><br><span class="line"><span class="comment">//        book.setName(&quot;三国演义&quot;);</span></span><br><span class="line"><span class="comment">//        book.setAuthor(&quot;罗贯中&quot;);</span></span><br><span class="line">        Assertions.assertThat(jacksonTester.parseObject(content).getName())</span><br><span class="line">                .isEqualTo(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第9章Spring-Boot缓存"><a href="#第9章Spring-Boot缓存" class="headerlink" title="第9章Spring Boot缓存"></a>第9章Spring Boot缓存</h2><p><code>Spring 3.1</code>中开始对<code>缓存</code>提供支持,核心思路是对<code>方法的缓存</code>,当开发者调用一个方法时,将<code>方法的参数</code>和<code>返回值</code>作为<code>key/value</code>缓存起来,当再次调用该方法时,如果<code>缓存中有数据</code>,就直接,从缓存中获取,否则再去执行该方法。但是, Spring中并未提供<code>缓存</code>的实现,而是提供了一套<code>缓存API</code>,开发者可以自由选择缓存的实现, 目前Spring Boot支持的缓存有如下几种:<code>Cache (JSR-107)</code>、<code>EhCache 2.x</code>、<code> Hazelcast</code>、<code>Infinispan</code>、<code>Couchbase </code>、<code>Redis</code>、<code>Caffeine</code>、<code>Simple</code></p><h3 id="9-1-Ehcache-2-x缓存"><a href="#9-1-Ehcache-2-x缓存" class="headerlink" title="9.1 Ehcache 2.x缓存."></a>9.1 Ehcache 2.x缓存.</h3><p><code>Ehcache</code>缓存在Java开发领域已是久负盛名,在<code>Spring Boot</code>中,只需要一个配置文件就可以将<code>Ehcache</code>集成到项目中。<code>Ehcache 2.x</code>的使用步骤如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>2.添加缓存配置文件如果Ehcache的依赖存在,并且在classpath下有一个名为<code>ehcache2.xml</code>的<code>Ehcache配置文件</code>,那么<code>EhCacheCacheManager</code>将会自动作为缓存的实现。因此,在<code>resources</code>目录下创建ehcache.xml文件作为Ehcache缓存的配置文件,代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir/cache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;book_cache&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">diskPersistent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是一个常规的<code>Ehcache</code>配置文件,提供了两个缓存策略,一个是默认的,另一个名为<code>book-cache</code>.其中, </p><ul><li><code>name</code>表示缓存名称; <code>maxElementsInMemor</code>y表示缓存最大个数: </li><li><code>eternal</code>表示缓存对象是否永久有效,一旦设置了<code>永久有效</code>, <code>timeout</code>将不起作用; </li><li><code>timeToldleSeconds</code>表示缓存对象在失效前的允许闲置时间(单位:秒) ,当<code>eternal-false</code>对象不是永久有效时,该属性才生效;</li><li><code>timeToLiveSeconds</code>表示缓存对象在失效前允许存活的时间(单位:秒),当<code>eternal-false</code>对象不是永久有效时,该属性才生效; </li><li><code>overflowToDisk</code>表示当内存中的对象数量达到<code>maxElementsInMemory</code>时, Ehcache是否将对象写到磁盘中; </li><li><code>diskExpiryThreadIntervalSeconds</code>表示磁盘失效线程运行时间间隔。</li></ul><p>另外,如果开发者想自定义Ehcache配置文件的名称和位置,可以在<code>application.properties</code>中添加如下配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cache.ehcache.config=classpath:ehcache2.xml</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;book_cache&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyKeyGenerator myKeyGenerator;</span><br><span class="line">    <span class="meta">@Cacheable(keyGenerator = &quot;myKeyGenerator&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getBookById&quot;</span>);</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(id);</span><br><span class="line">        book.setName(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        book.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@CachePut(key = &quot;#book.id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">updateBookById</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;updateBookById&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;三国演义2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteBookById&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Redis单机缓存"><a href="#9-2-Redis单机缓存" class="headerlink" title="9.2 Redis单机缓存"></a>9.2 Redis单机缓存</h3><h3 id="9-3-Redis集群缓存"><a href="#9-3-Redis集群缓存" class="headerlink" title="9.3 Redis集群缓存"></a>9.3 Redis集群缓存</h3><h4 id="9-3-1-搭建Redis集群"><a href="#9-3-1-搭建Redis集群" class="headerlink" title="9.3.1 搭建Redis集群."></a>9.3.1 搭建Redis集群.</h4><h4 id="9-3-2-配置缓存"><a href="#9-3-2-配置缓存" class="headerlink" title="9.3.2 配置缓存"></a>9.3.2 配置缓存</h4><h4 id="9-3-3-使用缓存"><a href="#9-3-3-使用缓存" class="headerlink" title="9.3.3 使用缓存"></a>9.3.3 使用缓存</h4><h2 id="第10章-Spring-Boot安全管理…"><a href="#第10章-Spring-Boot安全管理…" class="headerlink" title="第10章 Spring Boot安全管理…"></a>第10章 Spring Boot安全管理…</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;傍晚时分，你坐在屋檐下，看着天慢慢地黑下去，心里寂寞而凄凉，感到自己的&lt;code&gt;生命被剥夺&lt;/code&gt;了。当时我是个年轻人，但我害怕这样生活下去，衰老下去。在我看来，这是&lt;code&gt;比死亡更可怕的事&lt;/code&gt;。——–王小波&lt;/p&gt;</summary>
    
    
    
    <category term="Spring Boot 学习笔记" scheme="https://liruilongs.github.io/categories/Spring-Boot-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JAVA" scheme="https://liruilongs.github.io/tags/JAVA/"/>
    
    <category term="Spring Boot" scheme="https://liruilongs.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Openstack 云计算管理平台“扫盲“ 学习笔记</title>
    <link href="https://liruilongs.github.io/2021/06/15/Openstack%20%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E2%80%9C%E6%89%AB%E7%9B%B2%E2%80%9C%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://liruilongs.github.io/2021/06/15/Openstack%20%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E2%80%9C%E6%89%AB%E7%9B%B2%E2%80%9C%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2021-06-26T19:01:55.980Z</updated>
    
    <content type="html"><![CDATA[<p>过自己想要的生活不是自私，要求别人按自己的意愿生活才是。 —-王尔德</p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><ul><li>嗯，学<code>K8S</code>,看到这个。所以了解下。</li><li>这篇博客用于了解<code>Openstack</code>是什么，以及构成的<code>基础组件</code>。 </li><li>笔记只是一些基础的东西，没有设计到Openstack基础环境配置及搭建，以后有这方面的需求，有时间在学。唉，要学的东西好多呀！**<font color="#67C23A">生活加油  ^ _ ^</font>**    2021.06.15</li></ul><p><strong><font color="#009688">过自己想要的生活不是自私，要求别人按自己的意愿生活才是。 —-王尔德</font></strong></p><hr><h2 id="一、云介绍"><a href="#一、云介绍" class="headerlink" title="一、云介绍"></a>一、云介绍</h2><h3 id="什么是云计算？"><a href="#什么是云计算？" class="headerlink" title="什么是云计算？"></a>什么是云计算？</h3><p>对于到底什么是<code>云计算</code>，至少可以找到100种解释<br>根据 <code>美国国家标准与技术研究院（NIST）</code>定义：<br><code>云计算</code>是一种<code>按使用量付费</code>的模式，这种模式提供<code>可用、便捷、按需的网络访问</code>，进入<code>可配置</code>的<code>计算资源共享池</code>（包括网络，服务器，存储，应用软件，服务）<code>云服务</code>，这些资源能够被快速提供，只需投入<code>少量的管理工具</code>，或与服务供应商进行<code>很少的交互</code>。通常涉及通过<code>互联网</code>来提供，<code>动态易扩展的虚拟机</code>的资源。</p><h3 id="云计算的三大服务器模式"><a href="#云计算的三大服务器模式" class="headerlink" title="云计算的三大服务器模式"></a>云计算的三大服务器模式</h3><p><img src="https://img-blog.csdnimg.cn/20210614225944712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="IaaS-云"><a href="#IaaS-云" class="headerlink" title="IaaS 云"></a>IaaS 云</h3><ul><li><code>Iaas（Infrastructure as a Service）(an si）</code>,即<code>基础设施即服务</code></li><li>提供给消费者的服务是对所有<code>计算基础设施</code>的使用</li><li>包括处理CPU、内存、存储、网络和其他基本的<code>计算资源</code></li><li>用户能够<code>部署</code>和<code>运行</code>任意软件，包括<code>操作系统</code>和<code>应用程序</code></li><li>IaaS 通常分为三种用法：<code>公有云</code>、<code>私有云</code>和<code>混合云</code><h3 id="PaaS-云"><a href="#PaaS-云" class="headerlink" title="PaaS 云"></a>PaaS 云</h3></li><li><code>PaaS (Platform-as-a-Service)(pa si)</code>，意思是<code>平台即服务</code></li><li>以<code>服务器平台</code>或者<code>开发环境</code>按需提供的服务</li><li>PaaS 不仅仅是单纯的基础平台，还包括对<code>该平台的技术支持</code>，<code>应用系统开发</code>、<code>优化</code>等服务</li><li>简单的说，PaaS也可以说是<code>中间件即服务</code><blockquote><p>例如：淘宝，京东， 只是提供了买卖双方交互的平台，卖方可以在平台上购买商铺，出售商品；买方可以到平台上选择不同的商铺购买商品（平台本身并不参与买卖过程），电商ERP等</p></blockquote></li></ul><h3 id="SaaS-云"><a href="#SaaS-云" class="headerlink" title="SaaS 云"></a>SaaS 云</h3><ul><li><code>SaaS（Software-as-a-Service）(sa si)软件即服务</code></li><li>是一种通过 Internet 提供软件的模式</li><li><code>软件厂商</code>将应用软件部署在服务器上，客户可以根据自己实际需求，通过互联网自助购买所需的应用软件服务</li><li>SaaS 云服务也可以说是一种<code>软件云服务</code><blockquote><p>#例如：苹果的APP，所有的软件都在苹果的app服务器上，用户可以根据自己的需求进行购买,或者在阿里云上租一个Mysql服务</p></blockquote></li></ul><h3 id="知名云服务器商"><a href="#知名云服务器商" class="headerlink" title="知名云服务器商"></a>知名云服务器商</h3><p><img src="https://img-blog.csdnimg.cn/20210614230732444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="远程控制云服务器"><a href="#远程控制云服务器" class="headerlink" title="远程控制云服务器"></a>远程控制云服务器</h3><h4 id="远程控制协议"><a href="#远程控制协议" class="headerlink" title="远程控制协议"></a>远程控制协议</h4><ul><li><p><code>RDP</code> (端口号<code>3389</code>)，适用于 <code>Windows </code>服务器</p><blockquote><p><code>步骤一</code>：使用组合快捷键: “Win+R”组合键, 可打开“运行”对话框。<br><code>步骤二</code>：输入 “mstsc”，打开远程连接对话框。</p></blockquote></li><li><p><code>SSH</code>（端口号<code>22</code>），适用于 <code>Linux </code>服务器、<code>防火墙</code>等设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lrzsz软件的功能，可以实现windows和linux系统直接进行文件传输</span></span><br><span class="line"><span class="comment">#linux中的文件上传到windows系统中，格式：[root@localhost ~]# sz</span></span><br><span class="line"><span class="comment">#windows中的文件上传到linux系统中指定目录下，先cd进入到指定目录下，然后拖拽即可</span></span><br><span class="line">[root@localhost ~]$ yum -y install lrzsz</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210615102720460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>使用 xshell 在<code>多个终端</code>同时执行<code>相同的命令</code></p><blockquote><p><code>第一步</code>：选择 “查看”，选择 “撰写栏”<img src="https://img-blog.csdnimg.cn/20210614232059970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>第二步</code>：选择图标，选择 “全部会话”<br><img src="https://img-blog.csdnimg.cn/20210614232135997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></blockquote><h3 id="常用远程控制软件"><a href="#常用远程控制软件" class="headerlink" title="常用远程控制软件"></a>常用远程控制软件</h3><p><code>PC端</code>：Xshell、SecureCRT、Putty等<br><code>手机端</code>：iTerminal、Termius、阿里云APP等</p></li></ul><h2 id="二、Openstack概述"><a href="#二、Openstack概述" class="headerlink" title="二、Openstack概述"></a>二、Openstack概述</h2><p><code>OpenStack </code>是一个由<code> NASA</code>（美国国家航空航天局）和 <code>Rackspace </code>合作研发并发起的项目</p><ul><li><code>OpenStack</code> 是一套 <code>IaaS</code> (基础云) 解决方案</li><li><code>OpenStack</code> 是一个<code>开源</code>的<code>云计算管理平台</code></li><li>以 <code>Apache</code> 许可证为授权<h3 id="Openstack-组件"><a href="#Openstack-组件" class="headerlink" title="Openstack 组件"></a>Openstack 组件</h3><h4 id="Openstack-结构图"><a href="#Openstack-结构图" class="headerlink" title="Openstack 结构图"></a><code>Openstack</code> 结构图</h4><img src="https://img-blog.csdnimg.cn/20210614232647865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><table><thead><tr><th>组件名称</th><th>描述</th></tr></thead><tbody><tr><td>Horizon组件</td><td>提供web页面环境，可以让用户注册账号，创建云主机，管理云主机；</td></tr><tr><td>Keystone组件</td><td>为所有组件提供公共的授权和认证；</td></tr><tr><td>Nova组件</td><td>被部署在多个节点上，提供了虚拟机的管理；</td></tr><tr><td>Glance组件</td><td>提供了镜像的管理功能，镜像则是构成虚拟机最基础的块结构；</td></tr><tr><td>Swift组件</td><td>对象存储组件，只有在搭建存储云的时候才会使用；</td></tr><tr><td>Neutron组件</td><td>网络组件，为openstack提供庞大的网络管理功能【会和centos7的networkmanager冲突，需要停止或卸载掉】</td></tr><tr><td>Cinder组件</td><td>为openstack提供卷管理，永久存储的服务</td></tr></tbody></table></li></ul><h4 id="Openstack-组件-—-Horizon"><a href="#Openstack-组件-—-Horizon" class="headerlink" title="Openstack 组件 — Horizon"></a>Openstack 组件 — Horizon</h4><ul><li><code>Horizon 组件</code>:<ul><li><input checked="" disabled="" type="checkbox"> Horizon 为 <code>OpenStack</code> 服务的 <code>Web</code> 控制面板，它可以管理实例、镜像、创建密钥对，对实例添加卷、操作 Swift 容器等。</li></ul></li><li><code>Horizon</code> 具有如下一些<code>特点</code>：<ul><li><input checked="" disabled="" type="checkbox"> 实例管理：创建、终止实例，查看终端日志，VNC连接，添加卷等；</li><li><input checked="" disabled="" type="checkbox"> 访问与安全管理：创建安全群组，管理密钥对，设置浮动 IP 等；</li><li><input checked="" disabled="" type="checkbox"> 镜像管理：编辑或删除镜像</li><li><input checked="" disabled="" type="checkbox"> 管理用户、配额及项目用</li></ul></li></ul><h4 id="Openstack-组件-—-Keystone"><a href="#Openstack-组件-—-Keystone" class="headerlink" title="Openstack 组件 — Keystone"></a>Openstack 组件 — Keystone</h4><ul><li><code>Keystone</code> 组件<ul><li><input checked="" disabled="" type="checkbox"> 为其他服务器提供<code>认证</code>和<code>授权</code>的集中<code>身份管理服务</code></li><li><input checked="" disabled="" type="checkbox"> 也提供了集中的<code>目录服务</code></li><li><input checked="" disabled="" type="checkbox"> 支持多种身份<code>认证模式</code>，如密码认证、令牌认证、以及 AWS（亚马逊web服务）登录</li><li><input checked="" disabled="" type="checkbox"> 为用户和其他服务提供了<code>SSO</code>认证服务<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#openstack部署完成以后，用户可以可以在openstack中创建很多台虚拟机，keystone组件可以提供对所</span><br><span class="line">有虚拟机的权限认证的管理服务</span><br></pre></td></tr></table></figure><h4 id="Openstack-组件-—-Nova-镜像管理"><a href="#Openstack-组件-—-Nova-镜像管理" class="headerlink" title="Openstack 组件 — Nova(镜像管理)"></a>Openstack 组件 — Nova(镜像管理)</h4></li></ul></li><li><code>Nova</code> 组件<ul><li><input checked="" disabled="" type="checkbox"> 在节点上用于<code>管理虚拟机的服务</code></li><li><input checked="" disabled="" type="checkbox"> <code>Nova </code>是一个<code>分布式的服</code>务，能够与<code> Keyston</code>e 交互实现<code>认证</code>，与 <code>Glance </code>交互实现<code>镜像管理</code></li><li><input checked="" disabled="" type="checkbox"> <code>Nova </code>被设计成在<code>标准硬件上</code>能够进行<code>水平扩展</code>,安装在多台机器。</li><li><input checked="" disabled="" type="checkbox"> 启动实例时，如果有则需要<code>下载镜像</code><br><img src="https://img-blog.csdnimg.cn/20210615105447626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#nova组件被部署在所有的节点上，用户在访问openstack要创建虚拟机时，openstack通过路由将请求发</span><br><span class="line">送给openstack集群中的其中一个nova节点，nova会在对应的节点上创建虚拟机，并将结果返回给用户(用</span><br><span class="line">户在虚拟机上进行的其他操作，也是由nova节点来完成的)</span><br></pre></td></tr></table></figure><h4 id="Openstack-组件-—-Glance"><a href="#Openstack-组件-—-Glance" class="headerlink" title="Openstack 组件 — Glance"></a>Openstack 组件 — Glance</h4></li></ul></li><li><code>Glance</code> 组件(类似于面向对象设计模式的<code>原型模式</code>和<code>享元模式</code>的结合),镜像管理<ul><li><input checked="" disabled="" type="checkbox"> 扮演<code>虚拟机镜像</code>注册的角色</li><li><input checked="" disabled="" type="checkbox"> 允许用户直接存储拷贝<code>服务器镜像</code></li><li><input checked="" disabled="" type="checkbox"> 这些镜像可以用于<code>新建虚拟机</code>的<code>模板</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Glance组件`</span> #类似于将镜像光盘上传到网络中，其他虚拟机要安装操作系统时，直接使用该镜像光盘即</span><br><span class="line">可，不需要重新下载【利用qcow2 —— 写时复制的技术】</span><br><span class="line"><span class="string">`COW`</span>【copy on write】 #写时复制，例如：qcow2</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210615115248444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="Openstack-组件-—-Swift"><a href="#Openstack-组件-—-Swift" class="headerlink" title="Openstack 组件 — Swift"></a>Openstack 组件 — Swift</h4></li></ul></li><li><code>Swift</code> 组件<ul><li><input checked="" disabled="" type="checkbox"> 这是对象存储的组件</li><li><input checked="" disabled="" type="checkbox"> 对于大部分用户来说，swift 不是必须的</li><li><input checked="" disabled="" type="checkbox"> 你只有存储数量到一定级别，而且是非结构化数据才有这样的需求</li></ul></li></ul><h4 id="Openstack-组件-—-Neutron-网络虚拟"><a href="#Openstack-组件-—-Neutron-网络虚拟" class="headerlink" title="Openstack 组件 — Neutron(网络虚拟)"></a>Openstack 组件 — Neutron(网络虚拟)</h4><ul><li><code>Neutron</code> 组件,网络抽象。<ul><li><input checked="" disabled="" type="checkbox"> 一种软件，定义<code>网络服务</code></li><li><input checked="" disabled="" type="checkbox"> 用于创建网络、子网、路由器、管理浮动IP地址</li><li><input checked="" disabled="" type="checkbox"> 可以实现虚拟交换机、虚拟路由器</li><li><input checked="" disabled="" type="checkbox"> 可用于在项目中创建 VPN</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20210615120032122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`用户在openstack中创建多台云主机时，多台云主机可能在不同的nova节点上`</span></span><br><span class="line"><span class="string">`例如：A,B,C三家公司，分别购买了多台云主机，这些云主机都在不同的nova节点上`</span></span><br><span class="line"><span class="string">`对于不同公司而言，自己购买的云主机需要可以互相连通，但是又不能和其他公司的云主机连通，这些功能</span></span><br><span class="line"><span class="string">则由Neutron 组件可以实现`</span></span><br></pre></td></tr></table></figure><h4 id="Openstack-组件-—-Cinder-存储虚拟"><a href="#Openstack-组件-—-Cinder-存储虚拟" class="headerlink" title="Openstack 组件 — Cinder(存储虚拟)"></a>Openstack 组件 — Cinder(存储虚拟)</h4><ul><li><code>Cinder</code> 组件<ul><li><input checked="" disabled="" type="checkbox"> 为虚拟机管理存储卷的服务</li><li><input checked="" disabled="" type="checkbox"> 为运行在 Nova 中的实例提供永久的块存储</li><li><input checked="" disabled="" type="checkbox"> 可以通过快照进行数据备份</li><li><input checked="" disabled="" type="checkbox"> 经常应用在实例存储环境中，如数据库文件</li></ul></li></ul><h3 id="Openstack-集群"><a href="#Openstack-集群" class="headerlink" title="Openstack 集群"></a>Openstack 集群</h3><h4 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a>集群结构</h4><p><img src="https://img-blog.csdnimg.cn/20210615120417909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="配置-yum-与-时间服务器"><a href="#配置-yum-与-时间服务器" class="headerlink" title="配置 yum 与 时间服务器"></a>配置 yum 与 时间服务器</h4><ul><li>搭建 yum 服务器</li><li>搭建 chronyd 服务器</li></ul><h4 id="嗯，需要学的东西挺多的，下周估计要工作了，时间不够，还要刻几方印，还有其他的东西要看，没法实战，所以暂时不看了，有这方面的需求，有时间在学。唉，要学的东西好多呀！-2021-06-15"><a href="#嗯，需要学的东西挺多的，下周估计要工作了，时间不够，还要刻几方印，还有其他的东西要看，没法实战，所以暂时不看了，有这方面的需求，有时间在学。唉，要学的东西好多呀！-2021-06-15" class="headerlink" title="嗯，需要学的东西挺多的，下周估计要工作了，时间不够，还要刻几方印，还有其他的东西要看，没法实战，所以暂时不看了，有这方面的需求，有时间在学。唉，要学的东西好多呀！ ^ _ ^    2021.06.15"></a>嗯，需要学的东西挺多的，下周估计要工作了，时间不够，还要刻几方印，还有其他的东西要看，没法实战，所以暂时不看了，有这方面的需求，有时间在学。唉，要学的东西好多呀！ ^ _ ^    2021.06.15</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;过自己想要的生活不是自私，要求别人按自己的意愿生活才是。 —-王尔德&lt;/p&gt;</summary>
    
    
    
    <category term="云计算管理平台" scheme="https://liruilongs.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="Openstack" scheme="https://liruilongs.github.io/tags/Openstack/"/>
    
    <category term="云计算管理平台" scheme="https://liruilongs.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 复习笔记</title>
    <link href="https://liruilongs.github.io/2021/04/19/Python%20%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://liruilongs.github.io/2021/04/19/Python%20%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-18T16:00:00.000Z</published>
    <updated>2021-06-26T20:23:38.794Z</updated>
    
    <content type="html"><![CDATA[<p>python陆续的学了好几次，大学时便开始学，都是学点皮面之后没有坚持来，基本语法，正则，Socket，爬虫都接触过。做java比较多，平常基本不用，所以一直没有一篇系统的笔记来供自己温习，这里整理一篇较基础的，供自己温习。原来资源是小伙伴分享的学习笔记，这里自己稍作整理汇总。生活加油</p><span id="more"></span><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><hr><p>python陆续的学了好几次，大学时便开始学，都是学点皮面之后没有坚持来，基本语法，正则，Socket，爬虫都接触过。做java比较多，平常基本不用，所以一直没有一篇系统的笔记来供自己温习，这里整理一篇较基础的，供自己温习。原来资源是小伙伴分享的学习笔记，这里自己稍作整理汇总。生活加油</p><h4 id="Python-复习笔记-一"><a href="#Python-复习笔记-一" class="headerlink" title="Python 复习笔记(一)"></a><a href="https://blog.csdn.net/sanhewuyang/article/details/115469744">Python 复习笔记(一)</a></h4><h4 id="Python-复习笔记-二"><a href="#Python-复习笔记-二" class="headerlink" title="Python 复习笔记(二)"></a><a href="https://blog.csdn.net/sanhewuyang/article/details/115603570">Python 复习笔记(二)</a></h4><hr><hr><h3 id="Python-基础入门"><a href="#Python-基础入门" class="headerlink" title="Python 基础入门"></a>Python 基础入门</h3><ul><li>Google开源机器学习框架：TensorFlow</li><li>开源社区主推学习框架：Scikit-learn</li><li>百度开源深度学习框架：Paddle<br><a href="https://baike.baidu.com/item/Python/407313?fr=aladdin"> Python发展历史：</a><h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h4></li><li>Python 2.X</li><li>Python 3.X<ul><li>Python 3.5</li><li>Python 3.6</li><li>Python 3.7 <h4 id="Python解释器的作用"><a href="#Python解释器的作用" class="headerlink" title="Python解释器的作用"></a>Python解释器的作用</h4><code>Python解释器作用：运行文件</code></li></ul></li><li><code>Python解释器种类</code><ul><li><code>CPython</code>，C语言开发的解释器[官方]，应用广泛的解释器。</li><li><code>IPython</code>，基于CPython的一种交互式解释器。</li><li><code>其他解释器</code><ul><li><code>PyPy</code>，基于Python语言开发的解释器。</li><li><code>Jython</code>，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。</li><li><code>IronPython</code>，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。<h4 id="linxu上编码"><a href="#linxu上编码" class="headerlink" title="linxu上编码"></a>linxu上编码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@liruilong ~]# python3</span><br><span class="line">-bash: python3: command not found</span><br><span class="line">[root@liruilong ~]# yum -y install python3</span><br><span class="line">Loaded plugins: fastestmirror, product-id, search-disabled-repos, subscription-manager</span><br><span class="line"></span><br><span class="line">This system is not registered with an entitlement server. You can use subscription-manager to register.</span><br><span class="line"></span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Repository epel-debuginfo is listed more than once in the configuration</span><br><span class="line">Repository epel-source is listed more than once in the configuration</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">Downloading packages:</span><br><span class="line">(1/5): libtirpc-0.2.4-0.16.el7.x86_64.rpm                                                                                     |  89 kB  00:00:00     </span><br><span class="line">(2/5): python3-3.6.8-18.el7.x86_64.rpm                                                                                        |  70 kB  00:00:00     </span><br><span class="line">(3/5): python3-setuptools-39.2.0-10.el7.noarch.rpm                                                                            | 629 kB  00:00:00     </span><br><span class="line">(4/5): python3-pip-9.0.3-8.el7.noarch.rpm                                                                                     | 1.6 MB  00:00:00     </span><br><span class="line">(5/5): python3-libs-3.6.8-18.el7.x86_64.rpm                                                                                   | 6.9 MB  00:00:00     </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                                                 16 MB/s | 9.3 MB  00:00:00     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : libtirpc-0.2.4-0.16.el7.x86_64                                                                                                    1/5 </span><br><span class="line">  Installing : python3-setuptools-39.2.0-10.el7.noarch                                                                                           2/5 </span><br><span class="line">  Installing : python3-pip-9.0.3-8.el7.noarch                                                                                                    3/5 </span><br><span class="line">  Installing : python3-3.6.8-18.el7.x86_64                                                                                                       4/5 </span><br><span class="line">  Installing : python3-libs-3.6.8-18.el7.x86_64                                                                                                  5/5 </span><br><span class="line">  Verifying  : libtirpc-0.2.4-0.16.el7.x86_64                                                                                                    1/5 </span><br><span class="line">  Verifying  : python3-setuptools-39.2.0-10.el7.noarch                                                                                           2/5 </span><br><span class="line">  Verifying  : python3-libs-3.6.8-18.el7.x86_64                                                                                                  3/5 </span><br><span class="line">  Verifying  : python3-3.6.8-18.el7.x86_64                                                                                                       4/5 </span><br><span class="line">  Verifying  : python3-pip-9.0.3-8.el7.noarch                                                                                                    5/5 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  python3.x86_64 0:3.6.8-18.el7                                                                                                                      </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  libtirpc.x86_64 0:0.2.4-0.16.el7  python3-libs.x86_64 0:3.6.8-18.el7  python3-pip.noarch 0:9.0.3-8.el7  python3-setuptools.noarch 0:39.2.0-10.el7 </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@liruilong ~]# python3</span><br><span class="line">Python 3.6.8 (default, Nov 16 2020, 16:55:22) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="PyCharm的作用"><a href="#PyCharm的作用" class="headerlink" title="PyCharm的作用"></a>PyCharm的作用</h4><p>PyCharm是一种Python ==IDE==（集成开发环境），带有一整套可以帮助用户在使用Python语言开发时==提高其效率的工具==，内部集成的功能如下：</p><blockquote><p>PythonCharm分为专业版（professional）和社区版（community）</p></blockquote><h4 id="PyCharm基本使用"><a href="#PyCharm基本使用" class="headerlink" title="PyCharm基本使用"></a>PyCharm基本使用</h4><ul><li><p>新建项目:打开PyCharm – [Create New Project] – 选择项目根目录和解释器版本 – [Create]，即可完成新建一个项目。</p></li><li><p>新建文件并书写代码:项目根目录或根目录内部任意位置 — 右键 – [New] – [Python File] – 输入文件名 – [OK]</p><blockquote><p>如果是将来要上传到服务器的文件，那么文件名切记不能用中文。</p></blockquote></li></ul><p>双击打开文件，并书写一个最简单的Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li> 运行文件:文件打开状态 – 空白位置 — 右键 – Run – 即可调出Pycharm的控制台输出程序结果。<h4 id="注释的分类及语法"><a href="#注释的分类及语法" class="headerlink" title="注释的分类及语法"></a>注释的分类及语法</h4>注释分为两类：==单行注释== 和 ==多行注释==。快捷键： ==ctrl + /==   ,解释器不执行任何的注释内容。</li></ul><ul><li><code>单行注释</code>:只能注释一行内容，语法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释内容</span></span><br><span class="line"><span class="comment"># 输出hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)  <span class="comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span></span><br></pre></td></tr></table></figure></li><li><code>多行注释</code>:可以注释多行内容，一般用在注释一段代码的情况， 语法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下面三行都是输出的作用，输出内容分别是：</span></span><br><span class="line"><span class="string">    hello Python</span></span><br><span class="line"><span class="string">    hello itcast</span></span><br><span class="line"><span class="string">    hello itheima</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello itcast&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello itheima&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注释1</span></span><br><span class="line"><span class="string">注释2</span></span><br><span class="line"><span class="string">注释3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    下面三行都是输出的作用，输出内容分别是：</span></span><br><span class="line"><span class="string">    hello Python</span></span><br><span class="line"><span class="string">    hello itcast</span></span><br><span class="line"><span class="string">    hello itheima</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello itcast&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello itheima&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><p>举例体验：我们去图书馆读书，怎么样快速找到自己想要的书籍呢？是不是管理员提前将书放到固定位置，并把这个位置进行了编号，我们只需要在图书馆中按照这个编号查找指定的位置就能找到想要的书籍。这个编号其实就是把书籍存放的书架位置起了一个名字，方便后期查找和使用。<br>程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210406224456770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已。</p></blockquote><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure><blockquote><p>变量名自定义，要满足==标识符==命名规则。</p></blockquote><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</p><ul><li>由数字、字母、下划线组成</li><li>不能数字开头</li><li>不能使用内置关键字</li><li>严格区分大小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span>     <span class="literal">None</span>    <span class="literal">True</span>   <span class="keyword">and</span>      <span class="keyword">as</span>       <span class="keyword">assert</span>   <span class="keyword">break</span>     <span class="class"><span class="keyword">class</span>  </span></span><br><span class="line"><span class="class"><span class="title">continue</span>  <span class="title">def</span>     <span class="title">del</span>    <span class="title">elif</span>     <span class="title">else</span>     <span class="title">except</span>   <span class="title">finally</span>   <span class="title">for</span></span></span><br><span class="line"><span class="class"><span class="title">from</span>      <span class="title">global</span>  <span class="title">if</span>     <span class="title">import</span>   <span class="title">in</span>       <span class="title">is</span>       <span class="title">lambda</span>    <span class="title">nonlocal</span></span></span><br><span class="line"><span class="class"><span class="title">not</span>       <span class="title">or</span>      <span class="title">pass</span>   <span class="title">raise</span>    <span class="title">return</span>   <span class="title">try</span>      <span class="title">while</span>     <span class="title">with</span>  </span></span><br><span class="line"><span class="class"><span class="title">yield</span></span></span><br></pre></td></tr></table></figure><h5 id="命名习惯"><a href="#命名习惯" class="headerlink" title="命名习惯"></a>命名习惯</h5><ul><li>见名知义。</li><li>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</li><li>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</li><li>下划线：例如：<code>my_name</code>。</li></ul><h5 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&#x27;TOM&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br><span class="line"></span><br><span class="line">schoolName = <span class="string">&#x27;程序员&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(schoolName)</span><br></pre></td></tr></table></figure><h5 id="认识bug"><a href="#认识bug" class="headerlink" title="认识bug"></a>认识bug</h5><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p><h4 id="Debug工具"><a href="#Debug工具" class="headerlink" title="Debug工具"></a>Debug工具</h4><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。Debug工具使用步骤：</p><ol><li>打断点</li><li>Debug调试</li></ol><h5 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h5><ul><li>断点位置:目标要调试的代码块的第一行代码即可，即一个断点即可。</li><li>打断点的方法:单击目标代码的行号右侧空白位置。<h5 id="Debug调试"><a href="#Debug调试" class="headerlink" title="Debug调试"></a>Debug调试</h5>打成功断点后，在文件内部任意位置 — 右键 – Debug’文件名’ — 即可调出Debug工具面板 – 单击Step Over/F8，即可按步执行代码。<h6 id="Debug输出面板分类"><a href="#Debug输出面板分类" class="headerlink" title="Debug输出面板分类"></a>Debug输出面板分类</h6></li><li>Debugger:显示变量和变量的细节</li><li>Console:输出内容<h4 id="认识数据类型"><a href="#认识数据类型" class="headerlink" title="认识数据类型"></a>认识数据类型</h4></li></ul><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong><br><img src="https://img-blog.csdnimg.cn/20210407204133288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>检测数据类型的方法：<code>type()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt; -- 整型</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt; -- 浮点型</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt; -- 布尔型</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; -- 字符串</span></span><br><span class="line"></span><br><span class="line">e = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;list&#x27;&gt; -- 列表</span></span><br><span class="line"></span><br><span class="line">f = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; -- 元组</span></span><br><span class="line"></span><br><span class="line">h = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))  <span class="comment"># &lt;class &#x27;set&#x27;&gt; -- 集合</span></span><br><span class="line"></span><br><span class="line">g = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(g))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt; -- 字典</span></span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>作用：程序输出内容给用户<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>) </span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"> <span class="comment">##  需求：输出“今年我的年龄是18岁”</span></span><br></pre></td></tr></table></figure></p><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>所谓的格式化输出即按照一定的格式输出内容。</p><h4 id="格式化符号"><a href="#格式化符号" class="headerlink" title="格式化符号"></a>格式化符号</h4><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">==%s==</td><td align="center">字符串</td></tr><tr><td align="center">==%d==</td><td align="center">有符号的十进制整数</td></tr><tr><td align="center">==%f==</td><td align="center">浮点数</td></tr><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li><code>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</code></li><li><code>%.2f，表示小数点后显示的小数位数。</code></li></ul><p>格式化字符串除了<code>%s</code>，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code><br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span> </span><br><span class="line">name = <span class="string">&#x27;TOM&#x27;</span></span><br><span class="line">weight = <span class="number">75.5</span></span><br><span class="line">student_id = <span class="number">1</span></span><br><span class="line"> <span class="comment">##  我的名字是TOM</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"> <span class="comment">##  我的学号是0001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的学号是%4d&#x27;</span> % student_id)</span><br><span class="line"> <span class="comment">##  我的体重是75.50公斤</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)</span><br><span class="line"> <span class="comment">##  我的名字是TOM，今年18岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))</span><br><span class="line"> <span class="comment">##  我的名字是TOM，明年19岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="number">1</span>))</span><br><span class="line"> <span class="comment">##  我的名字是TOM，明年19岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了&#x27;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p><code>f-格式化字符串是Python3.6中新增的格式化方法</code>，该方法更简单易读。</p></blockquote><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。<h4 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote></li></ul><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><h5 id="输入的语法"><a href="#输入的语法" class="headerlink" title="输入的语法"></a>输入的语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="输入的特点"><a href="#输入的特点" class="headerlink" title="输入的特点"></a>输入的特点</h5><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"> <span class="comment">## &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><h4 id="转换数据类型的作用"><a href="#转换数据类型的作用" class="headerlink" title="转换数据类型的作用"></a>转换数据类型的作用</h4></li></ul><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？<br>答：转换数据类型即可，即将字符串类型转换成整型。</p><h4 id="转换数据类型的函数"><a href="#转换数据类型的函数" class="headerlink" title="转换数据类型的函数"></a>转换数据类型的函数</h4><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">==int(x [,base ])==</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">==float(x )==</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">==str(x )==</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">==eval(str )==</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">==tuple(s )==</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">==list(s )==</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h4 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h4><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 1. 接收用户输入</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的幸运数字：&#x27;</span>)</span><br><span class="line"> <span class="comment">##  2. 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您的幸运数字是<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="comment">##  3. 检测接收到的用户输入的数据类型 -- str类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"> <span class="comment">##  4. 转换数据类型为整型 -- int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(num)))</span><br></pre></td></tr></table></figure></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 1. `float() -- 转换成浮点型`</span></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(num1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(num1)))</span><br><span class="line"> <span class="comment">##  2. str() -- 转换成字符串类型</span></span><br><span class="line">num2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(num2)))</span><br><span class="line"> <span class="comment">##  3. tuple() -- 将一个序列转换成元组</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))</span><br><span class="line"> <span class="comment">##  4. list() -- 将一个序列转换成列表</span></span><br><span class="line">t1 = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(t1)))</span><br><span class="line"> <span class="comment">##  5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span></span><br><span class="line">str1 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;(1000, 2000, 3000)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str1)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str2)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str3)))</span><br></pre></td></tr></table></figure><h4 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h4><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">/</td><td align="center">除</td><td>10 / 2 输出结果为 5</td></tr><tr><td align="center">//</td><td align="center">整除</td><td>9 // 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：- 混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table></li><li><code>单个变量赋值</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure></li><li><code>多个变量赋值</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(float1)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br></pre></td></tr></table></figure></li><li><code>多变量赋相同值</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h4 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"> <span class="comment">## 输出101  a = a + 1,最终a = 100 + 1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">b *= <span class="number">3</span></span><br><span class="line"> <span class="comment">## 输出6  b = b * 3,最终b = 2 * 3</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">c += <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"> <span class="comment">## 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4>比较运算符也叫关系运算符， 通常用来判断。</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td align="left">如a=3,b=3，则（a == b) 为 True</td></tr><tr><td align="left">!=</td><td align="left">不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td align="left">如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td align="left">&gt;</td><td align="left">运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td align="left">如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td align="left">&lt;</td><td align="left">运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td align="left">如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td align="left">&gt;=</td><td align="left">运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td align="left">如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td align="left">&lt;=</td><td align="left">运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td align="left">如a=3,b=3，则(a &lt;= b) 为 True</td></tr><tr><td align="left"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></td><td align="left"></td><td align="left"></td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td align="left">True and False， 返回 False。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td align="left">False or True， 返回 True。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not True 返回 False, not False 返回 True</td></tr><tr><td align="left"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>((a &lt; b) <span class="keyword">and</span> (b &lt; c))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (b &lt; c))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">or</span> (b &lt; c))   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (a &gt; b))          <span class="comment"># True</span></span><br></pre></td></tr></table></figure></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>数字之间的逻辑运算<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"> <span class="comment">##  and运算符，二进制位只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"> <span class="comment">##  or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-语法"><a href="#if-语法" class="headerlink" title="if 语法"></a>if 语法</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码2&#x27;</span>)</span><br><span class="line"> <span class="comment">##  下方的代码没有缩进到if语句块，所以和if条件无关</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是无论条件是否成立都要执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="实例：上网"><a href="#实例：上网" class="headerlink" title="实例：上网"></a>实例：上网</h5><p>需求分析：如果用户年龄大于等于18岁，即成年，输出”已经成年，可以上网”。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成年，可以上网&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出”您的年龄是’用户输入的年龄’，已经成年，可以上网”。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h4 id="if…else…"><a href="#if…else…" class="headerlink" title="if…else…"></a>if…else…</h4><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码<span class="number">1</span></span><br><span class="line">    条件不成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h5 id="实用版：网吧上网"><a href="#实用版：网吧上网" class="headerlink" title="实用版：网吧上网"></a>实用版：网吧上网</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h5 id="多重判断"><a href="#多重判断" class="headerlink" title="多重判断"></a>多重判断</h5><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">条件<span class="number">2</span>成立执行的代码<span class="number">1</span></span><br><span class="line">    条件<span class="number">2</span>成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    以上条件都不成立执行执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p></blockquote><h5 id="实例：工龄判断"><a href="#实例：工龄判断" class="headerlink" title="实例：工龄判断"></a>实例：工龄判断</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,童工一枚&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> (age &gt;= <span class="number">18</span>) <span class="keyword">and</span> (age &lt;= <span class="number">60</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,合法工龄&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,可以退休&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">     <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h4 id="实例：坐公交"><a href="#实例：坐公交" class="headerlink" title="实例：坐公交"></a>实例：坐公交</h4><h5 id="判断是否能上车"><a href="#判断是否能上车" class="headerlink" title="判断是否能上车"></a>判断是否能上车</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> <span class="comment">## 假设用 money = 1 表示有钱, money = 0表示没有钱</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="判断是否能坐下"><a href="#判断是否能坐下" class="headerlink" title="判断是否能坐下"></a>判断是否能坐下</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> <span class="comment">## 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">seat = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> seat == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有空座，可以坐下&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有空座，站等&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="应用：猜拳游戏"><a href="#应用：猜拳游戏" class="headerlink" title="应用：猜拳游戏"></a>应用：猜拳游戏</h4><p>需求分析：</p><ul><li>参与游戏的角色<ul><li>玩家：手动出拳</li><li>电脑：随机出拳</li></ul></li><li>判断输赢<ul><li>玩家获胜</li><li>平局 ： 玩家出拳 和 电脑出拳相同</li><li>电脑获胜</li></ul></li></ul><p>随机做法：</p><ol><li>导出random模块</li><li>random.randint(开始,结束)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">提示：0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">1. 出拳</span></span><br><span class="line"><span class="string">玩家输入出拳</span></span><br><span class="line"><span class="string">电脑随机出拳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 判断输赢</span></span><br><span class="line"><span class="string">玩家获胜</span></span><br><span class="line"><span class="string">平局</span></span><br><span class="line"><span class="string">电脑获胜</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> <span class="comment">##  导入random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> <span class="comment">##  计算电脑出拳的随机数字</span></span><br><span class="line">computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(computer)</span><br><span class="line"></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请出拳：0-石头，1-剪刀，2-布：&#x27;</span>))</span><br><span class="line"> <span class="comment">##  玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span></span><br><span class="line"><span class="keyword">if</span> (player == <span class="number">0</span> <span class="keyword">and</span> computer == <span class="number">1</span>) <span class="keyword">or</span> (player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家获胜&#x27;</span>)</span><br><span class="line"> <span class="comment">##  平局：玩家 == 电脑</span></span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;电脑获胜&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4></li></ol><p>三目运算符也叫三元运算符。语法如下：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>快速体验：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></p><h3 id="循环简介"><a href="#循环简介" class="headerlink" title="循环简介"></a>循环简介</h3><h5 id="循环的作用"><a href="#循环的作用" class="headerlink" title="循环的作用"></a>循环的作用</h5><blockquote><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“媳妇儿，我错了”。这个时候程序员会怎么做？</p><p>答：100遍<code>print(&#39;媳妇儿，我错了&#39;)</code><br>思考：复制粘贴100次吗？</p><p>答：重复执行100次一样的代码，程序中循环即可</p></blockquote><p>循环的作用：让代码更高效的重复执行。</p><h5 id="循环的分类"><a href="#循环的分类" class="headerlink" title="循环的分类"></a>循环的分类</h5><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h4 id="while的语法"><a href="#while的语法" class="headerlink" title="while的语法"></a>while的语法</h4> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码<span class="number">1</span></span><br><span class="line">    条件成立重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>需求：复现重复执行100次<code>print(&#39;媳妇儿，我错了&#39;)</code>（输出更简洁一些，我们这里设置5次）。</p><p>分析：初始值是0次，终点是5次，重复做的事情输出“媳妇儿， 我错了”。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 循环的计数器</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;任务结束&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h4 id="while的应用"><a href="#while的应用" class="headerlink" title="while的应用"></a>while的应用</h4><h5 id="应用一：计算1-100累加和"><a href="#应用一：计算1-100累加和" class="headerlink" title="应用一：计算1-100累加和"></a>应用一：计算1-100累加和</h5><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"> <span class="comment">##  输出5050</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h5 id="应用二：计算1-100偶数累加和"><a href="#应用二：计算1-100偶数累加和" class="headerlink" title="应用二：计算1-100偶数累加和"></a>应用二：计算1-100偶数累加和</h5><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 / 2 , 计数器每次累加2<h6 id="方法一：条件判断和2取余数则累加"><a href="#方法一：条件判断和2取余数则累加" class="headerlink" title="方法一：条件判断和2取余数则累加"></a>方法一：条件判断和2取余数则累加</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 方法一：条件判断和2取余数为0则累加计算</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"> <span class="comment">##  输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h6 id="方法二：计数器控制"><a href="#方法二：计数器控制" class="headerlink" title="方法二：计数器控制"></a>方法二：计数器控制</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 方法二：计数器控制增量为2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line"> <span class="comment">##  输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4>break和continue是循环中满足一定条件退出循环的两种不同方式。<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</li></ul><ul><li><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即==终止此循环==。</p></li><li><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即==退出当前一次循环继而执行下一次循环代码==。</p><h5 id="情况一：break"><a href="#情况一：break" class="headerlink" title="情况一：break"></a>情况一：break</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;吃饱了不吃了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="情况二：continue"><a href="#情况二：continue" class="headerlink" title="情况二：continue"></a>情况二：continue</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;大虫子，第<span class="subst">&#123;i&#125;</span>个不吃了&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="while循环嵌套"><a href="#while循环嵌套" class="headerlink" title="while循环嵌套"></a>while循环嵌套</h4><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿， 我错了&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="keyword">while</span> 条件:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿， 我错了&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h5 id="快速体验：复现场景"><a href="#快速体验：复现场景" class="headerlink" title="快速体验：复现场景"></a>快速体验：复现场景</h5><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">3</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;刷晚饭的碗&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一套惩罚结束----------------&#x27;</span>)</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="理解执行流程"><a href="#理解执行流程" class="headerlink" title="理解执行流程"></a>理解执行流程</h5><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><h4 id="while循环嵌套应用"><a href="#while循环嵌套应用" class="headerlink" title="while循环嵌套应用"></a>while循环嵌套应用</h4><h5 id="应用一：打印星号-正方形"><a href="#应用一：打印星号-正方形" class="headerlink" title="应用一：打印星号(正方形)"></a>应用一：打印星号(正方形)</h5><h6 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h6> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 重复打印5行星星</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># 一行内的星星不能换行，取消print默认结束符\n</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="应用二：打印星号-三角形"><a href="#应用二：打印星号-三角形" class="headerlink" title="应用二：打印星号(三角形)"></a>应用二：打印星号(三角形)</h5><h6 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h6> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h6 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h6><p>分析：==一行输出星星的个数和行号是相等的==，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 重复打印5行星星</span></span><br><span class="line"> <span class="comment">## j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h5 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h5><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## 重复打印9行表达式</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 打印一行里面的表达式 a * b = a*b</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;j*i&#125;</span>&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h5 id="快速体验-1"><a href="#快速体验-1" class="headerlink" title="快速体验"></a>快速体验</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><p>循环可以和else配合使用，else下方缩进的代码指的是==当循环正常结束之后要执行的代码==。</p><h6 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h6><p>需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;媳妇儿原谅我了...&#x27;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>思考： 这个print是不是没有循环也能执行？</p></blockquote><h6 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    `循环正常结束之后要执行的代码`</span><br></pre></td></tr></table></figure><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="退出循环的方式"><a href="#退出循环的方式" class="headerlink" title="退出循环的方式 "></a><font color="red">退出循环的方式 </font></h6><p>需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><ul><li>更生气，不打算原谅，也不需要道歉了，程序如何书写？</li><li>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</li></ul><p>1.<code> break</code><br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这遍说的不真诚&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p> <code>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</code></p></blockquote><ol start="2"><li><code>continue</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这遍说的不真诚&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇儿，我错了&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</code></p></blockquote><h5 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h5><h6 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br></pre></td></tr></table></figure><blockquote><p><code>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</code></p></blockquote><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="退出循环的方式-1"><a href="#退出循环的方式-1" class="headerlink" title="退出循环的方式"></a>退出循环的方式</h6><ol><li>break终止循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li>continue控制循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;itheima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote></li></ol><h3 id="数据序列"><a href="#数据序列" class="headerlink" title="数据序列"></a>数据序列</h3><h4 id="认识字符串"><a href="#认识字符串" class="headerlink" title="认识字符串"></a><code>认识字符串</code></h4><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">b = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h4 id="字符串特征"><a href="#字符串特征" class="headerlink" title="字符串特征"></a>字符串特征</h4><ul><li>一对引号字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;Rose&quot;</span></span><br></pre></td></tr></table></figure></li><li>三引号字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name3 = <span class="string">&#x27;&#x27;&#x27; Tom &#x27;&#x27;&#x27;</span></span><br><span class="line">name4 = <span class="string">&quot;&quot;&quot; Rose &quot;&quot;&quot;</span></span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27; i am Tom, </span></span><br><span class="line"><span class="string">        nice to meet you! &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;&quot;&quot; i am Rose, </span></span><br><span class="line"><span class="string">        nice to meet you! &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：三引号形式的字符串支持换行。<br>思考：如果创建一个字符串<code> I&#39;m Tom</code>?</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&quot;I&#x27;m Tom&quot;</span></span><br><span class="line">d = <span class="string">&#x27;I\&#x27;m Tom&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h5>在Python中，使用<code>input()</code>接收用户输入。</li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的名字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"></span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure></li></ul><h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><p> <code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><h5 id="快速体验-2"><a href="#快速体验-2" class="headerlink" title="快速体验"></a>快速体验</h5><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li>输出结果</li></ul><blockquote><p>注意：下标从==0==开始。</p></blockquote><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]</span><br></pre></td></tr></table></figure><blockquote><p>注意<br>      1. 不包含结束位置下标对应的数据， 正负整数均可；<br>     2. 步长是选取间隔，正负整数均可，默认步长为1。</p></blockquote><h5 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h5> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cde</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># cde</span></span><br><span class="line"><span class="built_in">print</span>(name[:<span class="number">5</span>])  <span class="comment"># abcde</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>:])  <span class="comment"># bcdefg</span></span><br><span class="line"><span class="built_in">print</span>(name[:])  <span class="comment"># abcdefg</span></span><br><span class="line"><span class="built_in">print</span>(name[::<span class="number">2</span>])  <span class="comment"># aceg</span></span><br><span class="line"><span class="built_in">print</span>(name[:-<span class="number">1</span>])  <span class="comment"># abcdef, 负1表示倒数第一个数据</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># def</span></span><br><span class="line"><span class="built_in">print</span>(name[::-<span class="number">1</span>])  <span class="comment"># gfedcba</span></span><br></pre></td></tr></table></figure><h5 id="常用操作方法"><a href="#常用操作方法" class="headerlink" title="常用操作方法"></a>常用操作方法</h5><blockquote><p>字符串的常用操作方法有<code>查找、修改和判断</code>三大类。</p></blockquote><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。 语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure></li><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.index(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote></li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 23</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><ul><li>rfind()： 和find()功能相同，但查找方向为==右侧==开始。</li><li>rindex()：和index()功能相同，但查找方向为==右侧==开始。</li><li>count()：返回某个子串在字符串中出现的次数, 语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.count(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</li><li>replace()：替换, 语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.replace(旧子串, 新子串, 替换次数)</span><br></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：hello world he itcast he itheima he Python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>))</span><br><span class="line"> <span class="comment">## 结果：hello world he itcast he itheima he Python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>, <span class="number">10</span>))</span><br><span class="line"> <span class="comment">## 结果：hello world and itcast and itheima and Python</span></span><br><span class="line"><span class="built_in">print</span>(mystr)</span><br></pre></td></tr></table></figure><blockquote><p>注意：数据按照是否能直接修改分为==可变类型==和==不可变类型==两种。<code>字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</code></p></blockquote></li><li>split()：按照指定字符分割字符串。 语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.split(分割字符, num)</span><br></pre></td></tr></table></figure><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote></li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima &#x27;, &#x27; Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>))</span><br><span class="line"> <span class="comment">## 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima and Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>, <span class="number">2</span>))</span><br><span class="line"> <span class="comment">## 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;itcast&#x27;, &#x27;and&#x27;, &#x27;itheima&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"> <span class="comment">## 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and itcast and itheima and Python&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(mystr.split(<span class="string">&#x27; &#x27;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。 语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符或子串.join(多字符串组成的序列)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;chuan&#x27;</span>, <span class="string">&#x27;zhi&#x27;</span>, <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;ke&#x27;</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"> <span class="comment">## 结果：chuan_zhi_bo_ke</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_&#x27;</span>.join(list1))</span><br><span class="line"> <span class="comment">## 结果：aa...b...cc...ddd</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;...&#x27;</span>.join(t1))</span><br></pre></td></tr></table></figure></li><li>capitalize()：将字符串第一个字符转换成大写。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：Hello world and itcast and itheima and python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.capitalize())</span><br></pre></td></tr></table></figure><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote></li><li>title()：将字符串每个单词首字母转换成大写。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：Hello World And Itcast And Itheima And Python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.title())</span><br></pre></td></tr></table></figure></li><li>lower()：将字符串中大写转小写。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：hello world and itcast and itheima and python</span></span><br><span class="line"><span class="built_in">print</span>(mystr.lower())</span><br></pre></td></tr></table></figure></li><li>upper()：将字符串中小写转大写。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span></span><br><span class="line"><span class="built_in">print</span>(mystr.upper())</span><br></pre></td></tr></table></figure></li><li>lstrip()：删除字符串左侧空白字符。</li><li>rstrip()：删除字符串右侧空白字符。</li><li>strip()：删除字符串两侧空白字符。</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot; 24&quot;</span>.lstrip())</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.rstrip())</span><br><span class="line">  <span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.strip())</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><ul><li>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。语法:</li><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.ljust(长度, 填充字符)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.rjust(<span class="number">50</span>,<span class="string">&quot;0&quot;</span>))</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000</span> <span class="number">24</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.ljust(<span class="number">50</span>,<span class="string">&quot;0&quot;</span>))</span><br><span class="line"> <span class="number">24</span> <span class="number">0000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure></li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.center(<span class="number">50</span>))</span><br><span class="line">                        <span class="number">24</span>                        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; 24 &quot;</span>.center(<span class="number">50</span>,<span class="string">&quot;0&quot;</span>))</span><br><span class="line"><span class="number">00000000000000000000000</span> <span class="number">24</span> <span class="number">00000000000000000000000</span></span><br></pre></td></tr></table></figure><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</li><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python   &quot;</span></span><br><span class="line"> <span class="comment">##  结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"> <span class="comment">##  结果False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>, <span class="number">5</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure></li><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"> <span class="comment">##  结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>, <span class="number">2</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure></li><li>isalpha()：如果字符串<code>至少有一个字符并且所有字符都是字母</code>则返回 True, 否则返回 False。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;hello12345&#x27;</span></span><br><span class="line"> <span class="comment">##  结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalpha())</span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalpha())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;234&quot;</span>.isalpha())</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;lll&quot;</span>.isalpha())</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;ty  &quot;</span>.isalpha())</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;kkkk&quot;</span>.isalpha())</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot; k&quot;</span>.isalpha())</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span>.isalpha())</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"> <span class="comment">##  结果： False</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isdigit())</span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isdigit())</span><br></pre></td></tr></table></figure></li><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;12345-&#x27;</span></span><br><span class="line"> <span class="comment">##  结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isalnum())</span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isalnum())</span><br></pre></td></tr></table></figure></li><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;1 2 3 4 5&#x27;</span></span><br><span class="line">mystr2 = <span class="string">&#x27;     &#x27;</span></span><br><span class="line"> <span class="comment">##  结果：False</span></span><br><span class="line"><span class="built_in">print</span>(mystr1.isspace())</span><br><span class="line"> <span class="comment">##  结果：True</span></span><br><span class="line"><span class="built_in">print</span>(mystr2.isspace())</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="列表的应用场景"><a href="#列表的应用场景" class="headerlink" title="列表的应用场景"></a>列表的应用场景</h5></li></ul><p>思考：有一个人的姓名(TOM)怎么书写存储程序？答：变量。</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？答：列表即可， 列表一次性可以存储多个数据。</p><h5 id="列表的格式"><a href="#列表的格式" class="headerlink" title="列表的格式"></a>列表的格式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]</span><br></pre></td></tr></table></figure><p><code>列表可以一次性存储多个数据，且可以为不同数据类型。</code></p><h5 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h5><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h5 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h5><h6 id="下标-1"><a href="#下标-1" class="headerlink" title="下标"></a>下标</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])  <span class="comment">##   Tom</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>])  <span class="comment">##   Lily</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])  <span class="comment">##   Rose</span></span><br></pre></td></tr></table></figure><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><ul><li>index()：返回指定数据所在<code>位置的下标</code> 。 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.index(数据, 开始位置下标, 结束位置下标)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.index(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment">##   1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<font color="#ff4d4d">如果查找的数据不存在则报错。</font></p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_list.count(<span class="string">&#x27;Lily&#x27;</span>))  <span class="comment">##   1</span></span><br></pre></td></tr></table></figure></li><li>len()：访问列表长度，即列表中数据的个数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(name_list))  <span class="comment">##   3</span></span><br></pre></td></tr></table></figure><h6 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h6></li><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="comment">##   结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">in</span> name_list)</span><br><span class="line"><span class="comment">##   结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure></li><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="comment">##   结果：False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br><span class="line"><span class="comment">##   结果：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure></li></ul><p>需求：查找用户输入的名字是否已经存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要搜索的名字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>, 名字已经存在&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>, 名字不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。语法:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.append(数据)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，<code>故列表为可变类型数据。</code></p></blockquote><p>==如果append()追加的数据是一个序列，则追加整个序列到列表==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.append([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，<code>则将这个序列的数据逐一添加到列表。</code>. 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.extend(数据)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.extend([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。. 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.insert(位置下标, 数据)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5></li><li>del    语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标</span><br></pre></td></tr></table></figure></li></ul><ul><li> 删除列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="comment">##   结果：报错提示：name &#x27;name_list&#x27; is not defined</span></span><br><span class="line"><span class="keyword">del</span> name_list</span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure></li><li>删除指定数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">0</span>]</span><br><span class="line"><span class="comment">##   结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure></li></ul><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。. 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.pop(下标)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">del_name = name_list.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment">##   结果：Lily</span></span><br><span class="line"><span class="built_in">print</span>(del_name)</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure></li><li>remove()：移除列表中某个数据的第一个匹配项。 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.remove(数据)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul><li>clear()：清空列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list.clear()</span><br><span class="line"><span class="built_in">print</span>(name_list) <span class="comment">##   结果： []</span></span><br></pre></td></tr></table></figure><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5></li><li>修改指定下标数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_list[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="comment">##   结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure></li><li>逆置：reverse()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.reverse()</span><br><span class="line"><span class="comment">##   结果：[8, 6, 3, 2, 5, 1]</span></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure></li><li>排序：sort() 语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.sort( key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">num_list.sort()</span><br><span class="line"><span class="comment">##   结果：[1, 2, 3, 5, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p>函数：copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">name_li2 = name_list.copy()</span><br><span class="line"><span class="comment">##   结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(name_li2)</span><br></pre></td></tr></table></figure><h5 id="列表的循环遍历"><a href="#列表的循环遍历" class="headerlink" title="列表的循环遍历"></a>列表的循环遍历</h5><p>需求：依次打印列表中的各个数据。</p><h6 id="while"><a href="#while" class="headerlink" title="while"></a>while</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(name_list):</span><br><span class="line">    <span class="built_in">print</span>(name_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h6 id="for"><a href="#for" class="headerlink" title="for"></a>for</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##   第一步：按下标查找到李四所在的列表</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])</span><br><span class="line"><span class="comment">##   第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><h5 id="元组的应用场景"><a href="#元组的应用场景" class="headerlink" title="元组的应用场景"></a>元组的应用场景</h5><p>思考：如果想要存储多个数据，<code>但是这些数据是不能修改的数据</code>，怎么做？答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">num_list[<span class="number">0</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>==一个元组可以存储多个数据，元组内的数据是不能修改的。==</p><h5 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h5><p>元组特点：定义元组使用==小括号==，且==逗号==隔开各个数据，数据可以是不同的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">## 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>如果定义的元组只有一个数据，那么这个数据后面也好添加逗号</code>，否则数据类型为唯一的这个数据的数据类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))  <span class="comment">## tuple</span></span><br><span class="line"></span><br><span class="line">t3 = (<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))  <span class="comment">## int</span></span><br><span class="line"></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))  <span class="comment">## str</span></span><br></pre></td></tr></table></figure><h5 id="元组的常见操作"><a href="#元组的常见操作" class="headerlink" title="元组的常见操作"></a>元组的常见操作</h5><p>元组数据不支持修改，只支持查找，具体如下：</p><ul><li>按下标查找数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment">## aa</span></span><br></pre></td></tr></table></figure></li><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.index(<span class="string">&#x27;aa&#x27;</span>))  <span class="comment">## 0</span></span><br></pre></td></tr></table></figure></li><li>count()：统计某个数据在当前元组出现的次数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.count(<span class="string">&#x27;bb&#x27;</span>))  <span class="comment">## 2</span></span><br></pre></td></tr></table></figure></li><li>len()：统计元组中数据的个数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple1))  <span class="comment">## 4</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>元组内的直接数据如果修改则立即报错</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">tuple1[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>但是如果<code>元组里面有列表，修改列表里面的数据则是支持的</code>，故自觉很重要。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>, [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2[<span class="number">2</span>])  <span class="comment">## 访问到列表</span></span><br><span class="line"><span class="comment">## 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span></span><br><span class="line">tuple2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><h5 id="字典的应用场景"><a href="#字典的应用场景" class="headerlink" title="字典的应用场景"></a>字典的应用场景</h5></li></ul><p>思考1： 如果有多个数据，例如：’Tom’, ‘男’, 20，如何快速存储？答：列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>思考2：如何查找到数据’Tom’？答：查找到下标为0的数据即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>思考3：如果将来数据顺序发生变化，如下所示，还能用<code>list1[0]</code>访问到数据’Tom’吗？。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Tom&#x27;</span>]</span><br></pre></td></tr></table></figure><p>答：不能，数据’Tom’此时下标为2。</p><p>思考4：数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据顺序变化前后能使用同一的标准查找数据呢？<br>答：字典，字典里面的数据是以==键值对==形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><h5 id="创建字典的语法"><a href="#创建字典的语法" class="headerlink" title="创建字典的语法"></a>创建字典的语法</h5><p>字典特点：</p><ul><li>符号为==大括号==</li><li>数据为==键值对==形式出现</li><li>各个键值对之间用==逗号==隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 有数据字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote><h5 id="字典常见操作"><a href="#字典常见操作" class="headerlink" title="字典常见操作"></a>字典常见操作</h5><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><p>写法：==字典序列[key] = 值==</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line"><span class="comment">## 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;id&#x27;</span>] = <span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><blockquote><p>注意：字典为可变类型。</p></blockquote><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><ul><li>del() / del：删除字典或删除字典中指定键值对。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line"><span class="comment">## 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><ul><li>clear()：清空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><p>写法：==字典序列[key] = 值==</p><blockquote><p>注意：如果key存在则修改这个key对应的值 ；如果key不存在则新增此键值对。</p></blockquote><h6 id="查"><a href="#查" class="headerlink" title="查"></a>查</h6><ul><li>key值查找<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;id&#x27;</span>])  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote></li></ul><ul><li>get()   语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典序列.get(key, 默认值)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>, <span class="number">110</span>))  <span class="comment"># 110</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># None</span></span><br></pre></td></tr></table></figure><ul><li> keys()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure></li><li> values()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.values())  <span class="comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span></span><br></pre></td></tr></table></figure></li><li> items()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])</span></span><br></pre></td></tr></table></figure><h5 id="字典的循环遍历"><a href="#字典的循环遍历" class="headerlink" title="字典的循环遍历"></a>字典的循环遍历</h5><h6 id="遍历字典的key"><a href="#遍历字典的key" class="headerlink" title="遍历字典的key"></a>遍历字典的key</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><h6 id="遍历字典的value"><a href="#遍历字典的value" class="headerlink" title="遍历字典的value"></a>遍历字典的value</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><h6 id="遍历字典的元素"><a href="#遍历字典的元素" class="headerlink" title="遍历字典的元素"></a>遍历字典的元素</h6></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GyUf8MGo-1617796856463)(04-字典.assets/image-20190212104046564.png)]</p><h6 id="遍历字典的键值"><a href="#遍历字典的键值" class="headerlink" title="遍历字典的键值"></a>遍历字典的键值</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h5><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line">s3 = <span class="built_in">set</span>(<span class="string">&#x27;abcdefg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"></span><br><span class="line">s4 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s4))  <span class="comment">## set</span></span><br><span class="line"></span><br><span class="line">s5 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s5))  <span class="comment">## dict</span></span><br></pre></td></tr></table></figure><blockquote><p>特点：</p><ol><li><code>集合可以去掉重复数据；·</code></li><li><code>集合数据是无序的，故不支持下标·</code></li></ol></blockquote><h5 id="集合常见操作方法"><a href="#集合常见操作方法" class="headerlink" title="集合常见操作方法"></a>集合常见操作方法</h5><h6 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h6><ul><li>add()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment">## &#123;100, 10, 20&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote></li><li>update(), <code>追加的数据是序列。</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">## s1.update(100)  ## 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6></li><li>remove()，删除集合中的指定数据，<code>如果数据不存在则报错。</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.remove(<span class="number">10</span>)  <span class="comment">## 报错</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure></li><li>discard()，删除集合中的指定数据，<code>如果数据不存在也不会报错。</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure></li><li>pop()，随机删除集合中的某个数据，<code>并返回这个数据。</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line"><span class="built_in">print</span>(del_num)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><h6 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h6></li><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s1)</span><br></pre></td></tr></table></figure><h4 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h4></li></ul><h5 id="一-运算符"><a href="#一-运算符" class="headerlink" title="一. 运算符"></a>一. 运算符</h5><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">支持的容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">in</td><td align="center">元素是否存在</td><td align="center">字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td align="center">元素是否不存在</td><td align="center">字符串、列表、元组、字典</td></tr></tbody></table><h6 id=""><a href="#" class="headerlink" title="+"></a>+</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串 </span></span><br><span class="line">str1 = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line"><span class="built_in">print</span>(str3)  <span class="comment">## aabb</span></span><br><span class="line"><span class="comment">## 2. 列表 </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment">## [1, 2, 10, 20]</span></span><br><span class="line"><span class="comment">## 3. 元组 </span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment">## (10, 20, 100, 200)</span></span><br></pre></td></tr></table></figure><h6 id="-1"><a href="#-1" class="headerlink" title="*"></a>*</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">10</span>)  <span class="comment">## ----------</span></span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1 * <span class="number">4</span>)  <span class="comment">## [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment">## 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t1 * <span class="number">4</span>)  <span class="comment">## (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span></span><br></pre></td></tr></table></figure><h6 id="in或not-in"><a href="#in或not-in" class="headerlink" title="in或not in"></a>in或not in</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">## True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>)  <span class="comment">## False</span></span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list1)  <span class="comment">## True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1)  <span class="comment">## False</span></span><br><span class="line"><span class="comment">## 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> t1)  <span class="comment">## False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> t1)  <span class="comment">## True</span></span><br></pre></td></tr></table></figure><h5 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h5><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h6 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1))  <span class="comment">## 7</span></span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))  <span class="comment">## 4</span></span><br><span class="line"><span class="comment">## 3. 元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t1))  <span class="comment">## 5</span></span><br><span class="line"><span class="comment">## 4. 集合</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))  <span class="comment">## 3</span></span><br><span class="line"><span class="comment">## 5. 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict1))  <span class="comment">## 2</span></span><br></pre></td></tr></table></figure><h6 id="del"><a href="#del" class="headerlink" title="del()"></a>del()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">del</span> str1</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">del</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment">## [20, 30, 40]</span></span><br></pre></td></tr></table></figure><h6 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(str1))  <span class="comment">## g</span></span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(list1))  <span class="comment">## 40</span></span><br></pre></td></tr></table></figure><h6 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(str1))  <span class="comment">## a</span></span><br><span class="line"><span class="comment">## 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(list1))  <span class="comment">## 10</span></span><br></pre></td></tr></table></figure><h6 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">## 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">## 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>range()生成的序列不包含end数字。</code></p></blockquote><h6 id="enumerate-语法"><a href="#enumerate-语法" class="headerlink" title="enumerate()  语法"></a>enumerate()  语法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(可遍历对象, start=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;下标是<span class="subst">&#123;index&#125;</span>, 对应的字符是<span class="subst">&#123;char&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">下标是&#123;<span class="number">1</span>&#125;, 对应的字符是&#123;a&#125;</span><br><span class="line">下标是&#123;<span class="number">2</span>&#125;, 对应的字符是&#123;b&#125;</span><br><span class="line">下标是&#123;<span class="number">3</span>&#125;, 对应的字符是&#123;c&#125;</span><br><span class="line">下标是&#123;<span class="number">4</span>&#125;, 对应的字符是&#123;d&#125;</span><br><span class="line">下标是&#123;<span class="number">5</span>&#125;, 对应的字符是&#123;e&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="容器类型转换"><a href="#容器类型转换" class="headerlink" title="容器类型转换"></a>容器类型转换</h5><h6 id="tuple"><a href="#tuple" class="headerlink" title="tuple()"></a>tuple()</h6><p>作用：将某个序列转换成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(s1))</span><br></pre></td></tr></table></figure><h6 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h6><p>作用：将某个序列转换成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s1))</span><br></pre></td></tr></table></figure><h6 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h6><p>作用：将某个序列转换成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(t1))</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>     1. 集合可以快速完成列表去重<br>     2. 集合不支持下标</p></blockquote><h4 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h4><h5 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h5><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。列表推导式又叫列表生成式。<br>需求：创建一个0-10的列表。</p><ul><li>while循环实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 准备一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="comment">## 2. 书写循环，依次追加数字到空列表list1中</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure></li><li>for循环实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure></li><li><code>列表推导式实现</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h5 id="带if的列表推导式"><a href="#带if的列表推导式" class="headerlink" title="带if的列表推导式"></a>带if的列表推导式</h5>需求：创建0-10的偶数列表</li><li>方法一：range()步长实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure></li><li>方法二：if实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h5 id="多个for循环实现列表推导式"><a href="#多个for循环实现列表推导式" class="headerlink" title="多个for循环实现列表推导式"></a>多个for循环实现列表推导式</h5></li></ul><p>需求：创建列表如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span><br></pre></td></tr></table></figure><ul><li>代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h5 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h5>思考：如果有如下两个列表：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><p>如何快速合并为一个字典？答：字典推导式</p><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><ol><li><p>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment">## &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>将两个列表合并为一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line"></span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1))&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure></li><li><p>提取字典中目标数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">counts = &#123;<span class="string">&#x27;MBP&#x27;</span>: <span class="number">268</span>, <span class="string">&#x27;HP&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;DELL&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;Lenovo&#x27;</span>: <span class="number">199</span>, <span class="string">&#x27;acer&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="comment">## 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(count1)  <span class="comment">## &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span></span><br></pre></td></tr></table></figure><h5 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h5><p>需求：创建一个集合，数据为下方列表的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment">## &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：集合有数据去重功能。</p></blockquote><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h4><p>需求：用户到ATM机取钱：</p><ol><li>输入密码后显示”选择功能”界面</li><li>查询余额后显示”选择功能”界面</li><li>取2000钱后显示”选择功能”界面<blockquote><p>特点：显示“选择功能”界面需要重复输出给用户，怎么实现？<br>函数就是将==一段具有独立功能的代码块== 整合到一个整体并命名，在需要的位置==调用这个名称==即可完成对应的需求。<br>函数在开发过程中，可以更高效的实现==代码重用==。</p></blockquote><h4 id="函数的使用步骤"><a href="#函数的使用步骤" class="headerlink" title="函数的使用步骤"></a>函数的使用步骤</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h6 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><ol><li>不同的需求，参数可有可无。</li><li>在Python中，函数必须==先定义后使用==。</li></ol></li></ol><p>需求：复现ATM取钱功能。</p><ol><li><p>搭建整体框架(复现需求)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;密码正确登录成功&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额完毕&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取了2000元钱&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面</span></span><br></pre></td></tr></table></figure></li><li><p>确定“选择功能”界面内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;存款&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>封装”选择功能”</p><blockquote><p>注意：一定是先定义函数，后调用函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 封装ATM机功能选项 -- 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询余额&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;存款&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----请选择功能-----&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>调用函数</p></li></ol><p>在需要显示“选择功能”函数的位置调用函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;密码正确登录成功&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;查询余额完毕&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取了2000元钱&#x27;</span>)</span><br><span class="line"><span class="comment">#### 显示&quot;选择功能&quot;界面 -- 调用函数</span></span><br><span class="line">select_func()</span><br></pre></td></tr></table></figure><h4 id="函数的参数作用"><a href="#函数的参数作用" class="headerlink" title="函数的参数作用"></a>函数的参数作用</h4><p>思考：完成需求如下：一个函数完成两个数1和2的加法运算，如何书写程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num1</span>():</span></span><br><span class="line">    result = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#### 调用函数</span></span><br><span class="line">add_num1()</span><br></pre></td></tr></table></figure><p>思考：上述add_num1函数只能完成数字1和2的加法运算，如果想要这个函数变得更灵活，可以计算任何用户指定的两个数字的和，如何书写程序？</p><p>分析：用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num2</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#### 调用函数时传入了真实的数据10 和 20，真实数据为实参</span></span><br><span class="line">add_num2(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h4 id="函数的返回值作用"><a href="#函数的返回值作用" class="headerlink" title="函数的返回值作用"></a>函数的返回值作用</h4><p>例如：我们去超市购物，比如买烟，给钱之后，是不是售货员会返回给我们烟这个商品，在函数中，如果需要返回结果给用户需要使用函数返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;烟&#x27;</span></span><br><span class="line"><span class="comment">#### 使用变量保存函数返回值</span></span><br><span class="line">goods = buy()</span><br><span class="line"><span class="built_in">print</span>(goods)</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="comment">#### 用result变量保存函数返回值</span></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="函数的说明文档"><a href="#函数的说明文档" class="headerlink" title="函数的说明文档"></a>函数的说明文档</h4><ul><li>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？答：注释</li><li>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？答：函数的说明文档<blockquote><p>函数的说明文档也叫函数的文档说明。</p></blockquote><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4></li></ul><ul><li>定义函数的说明文档<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 说明文档的位置 &quot;&quot;&quot;</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li><li>查看函数的说明文档<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(函数名)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 求和函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(sum_num)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数嵌套调用"><a href="#函数嵌套调用" class="headerlink" title="函数嵌套调用"></a>函数嵌套调用</h4><p>所谓函数嵌套调用指的是==一个函数里面又调用了另外一个函数==。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB start----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA start----&#x27;</span>)</span><br><span class="line">    testB()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testA()</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</li></ul></blockquote><h5 id="打印图形"><a href="#打印图形" class="headerlink" title="打印图形"></a>打印图形</h5><ol><li><p>打印一条横线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">print_line()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">WARNING! The remote SSH server rejected X11 forwarding request.</span><br><span class="line">Last failed login: Fri Apr  9 17:40:20 CST 2021 from 49.234.64.13 on ssh:notty</span><br><span class="line">There were 27 failed login attempts since the last successful login.</span><br><span class="line">Last login: Thu Apr  8 23:53:27 2021 from 111.194.47.197</span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">[root@liruilong ~]<span class="comment"># python3</span></span><br><span class="line">Python 3.6.8 (default, Nov 16 2020, 16:55:22) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * 20)</span><br><span class="line">--------------------</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>打印多条横线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_lines</span>(<span class="params">num</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        print_line()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_lines(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="函数计算"><a href="#函数计算" class="headerlink" title="函数计算"></a>函数计算</h4></li><li><p>求三个数之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></li><li><p>求三个数平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_num</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    sumResult = sum_num(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> sumResult / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result = average_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure><h4 id="函数变量作用域"><a href="#函数变量作用域" class="headerlink" title="函数变量作用域"></a>函数变量作用域</h4></li></ol><p>变量作用域指的是变量生效的范围，主要分为两类：==局部变量==和==全局变量==。</p><ul><li><code>局部变量</code>：所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 报错：name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p></blockquote></li></ul><p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><ul><li><code>全局变量</code>:<code>所谓全局变量，指的是在函数体内、外都能生效的变量。</code></li></ul><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 定义全局变量a</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>思考：<code>testB</code>函数需求修改变量a的值为200，如何修改程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 100</span></span><br></pre></td></tr></table></figure><p>思考：在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？</p><p>答：不是。观察上述代码发现，15行得到a的数据是100，仍然是定义全局变量a时候的值，而没有返回<br><code>testB</code>函数内部的200。综上：<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><p>思考：<code>如何在函数体内部修改全局变量？</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="comment"># global 关键字声明a是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 200</span></span><br></pre></td></tr></table></figure><h4 id="多函数程序执行流程"><a href="#多函数程序执行流程" class="headerlink" title="多函数程序执行流程"></a>多函数程序执行流程</h4><p>一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，如下所示：</p><ul><li>共用全局变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 1. 定义全局变量</span></span><br><span class="line">glo_num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> glo_num</span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    glo_num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="comment"># 调用test1函数中修改后的全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(glo_num)</span><br><span class="line"><span class="comment">#### 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span></span><br><span class="line">test1()</span><br><span class="line"><span class="comment">#### 3. 调用test2函数，执行函数内部代码：打印</span></span><br><span class="line">test2()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure></li><li>返回值作为参数传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="comment">#### 1. 保存函数test1的返回值</span></span><br><span class="line">result = test1()</span><br><span class="line"><span class="comment">#### 2.将函数返回值所在变量作为参数传递到test2函数</span></span><br><span class="line">test2(result)  <span class="comment"># 50</span></span><br></pre></td></tr></table></figure><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4></li></ul><p>思考：<code>如果一个函数如些两个return (如下所示)，程序如何执行？</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>答：<code>只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</code></p><p>思考：如果一个函数要有多个返回值，该如何书写代码？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>return a, b</code>写法，返回多个数据的时候，<code>默认是元组类型。</code></li><li>return后面可以连接列表、元组或字典，以返回多个值。</li></ol></blockquote><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><h5 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a><code>位置参数</code></h5><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：传递和定义参数的顺序及个数必须一致。</p></blockquote><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a><code>关键字参数</code></h5><p>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;小明&#x27;</span>, gender=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>注意：**<code>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序</code>。**</p><h5 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a><code>缺省参数</code></h5><p>缺省参数也叫<code>默认参数</code>，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender=<span class="string">&#x27;男&#x27;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p></blockquote><h5 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h5><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><ul><li>包裹位置传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"><span class="comment">#### (&#x27;TOM&#x27;,)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>)</span><br><span class="line"><span class="comment">#### (&#x27;TOM&#x27;, 18)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：传进的所有参数都会被args变量收集，<code>它会根据传进参数的位置合并为一个元组(tuple)</code>，<code>args是元组类型</code>，这就是包裹位置传递。</p></blockquote></li><li>包裹关键字传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"><span class="comment">#### &#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">18</span>, <span class="built_in">id</span>=<span class="number">110</span>)</span><br></pre></td></tr></table></figure><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p></blockquote><h4 id="拆包和交换变量值"><a href="#拆包和交换变量值" class="headerlink" title="拆包和交换变量值"></a>拆包和交换变量值</h4><h5 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a><code>拆包</code></h5></li><li>拆包：元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line"><span class="built_in">print</span>(num1)  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(num2)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure></li><li>拆包：字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"><span class="comment">#### 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># name</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># age</span></span><br><span class="line"><span class="built_in">print</span>(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line"><span class="built_in">print</span>(dict1[b])  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><h5 id="交换变量值"><a href="#交换变量值" class="headerlink" title="交换变量值"></a>交换变量值</h5>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。<br>借助第三变量存储数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 1. 定义中间变量</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="comment">#### 2. 将a的数据存储到c</span></span><br><span class="line">c = a</span><br><span class="line"><span class="comment">#### 3. 将b的数据20赋值到a，此时a = 20</span></span><br><span class="line">a = b</span><br><span class="line"><span class="comment">#### 4. 将之前c的数据10赋值到b，此时b = 10</span></span><br><span class="line">b = c</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4>在python中，值是靠引用来传递来的。</li></ul><p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。</p><ul><li><code>int类型为不可变类型</code> </li><li><code>列表为可变类型</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 1. int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1,说明int类型为不可变类型 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"><span class="comment">#### 2. 列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br></pre></td></tr></table></figure><h5 id="引用当做实参"><a href="#引用当做实参" class="headerlink" title="引用当做实参"></a>引用当做实参</h5>代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">    a += a</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># int：计算前后id值不同</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">test1(b)</span><br><span class="line"><span class="comment"># 列表：计算前后id值相同</span></span><br><span class="line">c = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">test1(c)</span><br></pre></td></tr></table></figure><h4 id="可变和不可变类型"><a href="#可变和不可变类型" class="headerlink" title="可变和不可变类型"></a>可变和不可变类型</h4>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</li></ul><table><thead><tr><th>–</th><th>–</th></tr></thead><tbody><tr><td>可变类型</td><td>- <code>列表</code> - <code>字典</code>- <code>集合</code></td></tr><tr><td>不可变类型</td><td>- <code>整型</code>- <code>浮点型</code> - <code>字符串</code>- <code>元组</code></td></tr></tbody></table><h4 id="应用：学员管理系统"><a href="#应用：学员管理系统" class="headerlink" title="应用：学员管理系统"></a>应用：学员管理系统</h4><h5 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h5><p>需求：进入系统显示系统功能界面，功能如下：</p><ul><li>1、添加学员</li><li>2、删除学员</li><li>3、修改学员信息</li><li>4、查询学员信息</li><li>5、显示所有学员信息</li><li>6、退出系统<br>系统共6个功能，用户根据自己需求选取。<h5 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h5></li></ul><ol><li>显示功能界面</li><li>用户输入功能序号</li><li>根据用户输入的功能序号，执行不同的功能(函数)<br>3.1 定义函数<br>3.2 调用函数<h5 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h5><h6 id="显示功能界面"><a href="#显示功能界面" class="headerlink" title="显示功能界面"></a>显示功能界面</h6></li></ol><p>定义函数<code>print_info</code>，负责显示系统功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎登录学员管理系统&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1: 添加学员&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2: 删除学员&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;3: 修改学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;4: 查询学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;5: 显示所有学员信息&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;6: 退出系统&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print_info()</span><br></pre></td></tr></table></figure><h6 id="用户输入序号，选择功能"><a href="#用户输入序号，选择功能" class="headerlink" title="用户输入序号，选择功能"></a>用户输入序号，选择功能</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_num = <span class="built_in">input</span>(<span class="string">&#x27;请选择您需要的功能序号：&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="根据用户选择，执行不同的功能"><a href="#根据用户选择，执行不同的功能" class="headerlink" title="根据用户选择，执行不同的功能"></a>根据用户选择，执行不同的功能</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> user_num == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;添加学员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;删除学员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;修改学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;显示所有学员信息&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;退出系统&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>工作中，需要根据实际需求调优代码。</p><ol><li>用户选择系统功能的代码需要循环使用，直到用户主动退出系统。</li><li>如果用户输入1-6以外的数字，需要提示用户。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 1. 显示功能界面</span></span><br><span class="line">    print_info()</span><br><span class="line">    <span class="comment"># 2. 用户选择功能</span></span><br><span class="line">    user_num = <span class="built_in">input</span>(<span class="string">&#x27;请选择您需要的功能序号：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 3. 根据用户选择，执行不同的功能</span></span><br><span class="line">    <span class="keyword">if</span> user_num == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;添加学员&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;删除学员&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;修改学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查询学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;显示所有学员信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出系统&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入错误，请重新输入!!!&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="定义不同功能的函数"><a href="#定义不同功能的函数" class="headerlink" title="定义不同功能的函数"></a>定义不同功能的函数</h6><p>所有功能函数都是操作学员信息，所有存储所有学员信息应该是一个==全局变量==，数据类型为==列表==。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = []</span><br></pre></td></tr></table></figure><h6 id="添加学员"><a href="#添加学员" class="headerlink" title="添加学员"></a>添加学员</h6><ol><li>接收用户输入学员信息，并保存</li><li>判断是否添加学员信息<br>2.1 如果学员姓名已经存在，则报错提示<br>2.2 如果学员姓名不存在，则准备空字典，将用户输入的数据追加到字典，再列表追加字典数据</li><li>对应的if条件成立的位置调用该函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 添加学员 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 接收用户输入学员信息</span></span><br><span class="line">    new_id = <span class="built_in">input</span>(<span class="string">&#x27;请输入学号：&#x27;</span>)</span><br><span class="line">    new_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入姓名：&#x27;</span>)</span><br><span class="line">    new_tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入手机号：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 声明info是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 检测用户输入的姓名是否存在，存在则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> new_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;该用户已经存在！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 如果用户输入的姓名不存在，则添加该学员信息</span></span><br><span class="line">    info_dict = &#123;&#125;</span><br><span class="line">    <span class="comment"># 将用户输入的数据追加到字典</span></span><br><span class="line">    info_dict[<span class="string">&#x27;id&#x27;</span>] = new_id</span><br><span class="line">    info_dict[<span class="string">&#x27;name&#x27;</span>] = new_name</span><br><span class="line">    info_dict[<span class="string">&#x27;tel&#x27;</span>] = new_tel</span><br><span class="line">    <span class="comment"># 将这个学员的字典数据追加到列表</span></span><br><span class="line">    info.append(info_dict)</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h6 id="删除学员"><a href="#删除学员" class="headerlink" title="删除学员"></a>删除学员</h6><p>按用户输入的学员姓名进行删除</p><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在<br>2.1 如果存在，则列表删除这个数据<br>2.2 如果不存在，则提示“该用户不存在”</p></li><li><p>对应的if条件成立的位置调用该函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 删除学员</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除学员&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 用户输入要删除的学员的姓名</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学员的姓名：&#x27;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在:如果输入的姓名存在则删除，否则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> del_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            info.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h6 id="修改学员信息"><a href="#修改学员信息" class="headerlink" title="修改学员信息"></a>修改学员信息</h6></li><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在<br>2.1 如果存在，则修改这位学员的信息，例如手机号<br>2.2 如果不存在，则报错</p></li><li><p>对应的if条件成立的位置调用该函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 修改函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;修改函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 用户输入要修改的学员的姓名</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在：如果输入的姓名存在则修改手机号，否则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> modify_name == i [<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            i[<span class="string">&#x27;tel&#x27;</span>] = <span class="built_in">input</span>(<span class="string">&#x27;请输入新的手机号：&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h6 id="查询学员信息"><a href="#查询学员信息" class="headerlink" title="查询学员信息"></a>查询学员信息</h6></li></ol><ul><li>需求分析</li></ul><ol><li>用户输入目标学员姓名</li><li>检查学员是否存在<br>2.1 如果存在，则显示这个学员的信息<br>2.2 如果不存在，则报错提示</li><li>对应的if条件成立的位置调用该函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 查询学员</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;查询学员&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 输入要查找的学员姓名：</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的学员姓名：&#x27;</span>)</span><br><span class="line">    <span class="keyword">global</span> info</span><br><span class="line">    <span class="comment"># 2. 判断学员是否存在：如果输入的姓名存在则显示这位学员信息，否则报错提示</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="keyword">if</span> search_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;查找到的学员信息如下：----------&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;该学员的学号是<span class="subst">&#123;i[<span class="string">&#x27;id&#x27;</span>]&#125;</span>, 姓名是<span class="subst">&#123;i[<span class="string">&#x27;name&#x27;</span>]&#125;</span>, 手机号是<span class="subst">&#123;i[<span class="string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该学员不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="显示所有学员信息"><a href="#显示所有学员信息" class="headerlink" title="显示所有学员信息"></a>显示所有学员信息</h6><ul><li>需求分析<br>打印所有学员信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 显示所有学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 显示所有学员信息 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;学号\t姓名\t手机号&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="string">&quot;id&quot;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&quot;name&quot;</span>]&#125;</span>\t<span class="subst">&#123;i[<span class="string">&quot;tel&quot;</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="退出系统"><a href="#退出系统" class="headerlink" title="退出系统"></a>退出系统</h6>在用户输入功能序号<code>6</code>的时候要退出系统，代码如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">elif</span> user_num == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">    exit_flag = <span class="built_in">input</span>(<span class="string">&#x27;确定要退出吗？yes or no&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> exit_flag == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h5 id="递归的应用场景"><a href="#递归的应用场景" class="headerlink" title="递归的应用场景"></a>递归的应用场景</h5>递归是一种编程思想，应用场景：</li></ul><ol><li>在我们日常开发中，如果要遍历一个文件夹下面所有的文件，通常会使用递归来实现；</li><li>在后续的算法课程中，很多算法都离不开递归，例如：快速排序。<h6 id="递归的特点"><a href="#递归的特点" class="headerlink" title="递归的特点"></a>递归的特点</h6></li></ol><ul><li>函数内部自己调用自己</li><li>必须有出口<h5 id="应用：3以内数字累加和"><a href="#应用：3以内数字累加和" class="headerlink" title="应用：3以内数字累加和"></a>应用：3以内数字累加和</h5></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 3 + 2 + 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># 1.如果是1，直接返回1 -- 出口</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 2.如果不是1，重复执行累加并返回结果</span></span><br><span class="line">    <span class="keyword">return</span> num + sum_numbers(num-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_result = sum_numbers(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#### 输出结果为6</span></span><br><span class="line"><span class="built_in">print</span>(sum_result)</span><br></pre></td></tr></table></figure></li><li>执行结果</li></ul><h4 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h4><h5 id="lambda的应用场景"><a href="#lambda的应用场景" class="headerlink" title="lambda的应用场景"></a>lambda的应用场景</h5><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p><h5 id="lambda语法"><a href="#lambda语法" class="headerlink" title="lambda语法"></a>lambda语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数列表 ： 表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ul><li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</li><li>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(fn1)</span><br><span class="line"><span class="built_in">print</span>(fn1())</span><br><span class="line"><span class="comment">#### lambda表达式</span></span><br><span class="line">fn2 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(fn2)</span><br><span class="line"><span class="built_in">print</span>(fn2())</span><br></pre></td></tr></table></figure><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote><h5 id="示例：计算a-b"><a href="#示例：计算a-b" class="headerlink" title="示例：计算a + b"></a>示例：计算a + b</h5><h6 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>思考：需求简单，是否代码多？</p></blockquote><h6 id="lambda实现"><a href="#lambda实现" class="headerlink" title="lambda实现"></a>lambda实现</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h5 id="lambda的参数形式"><a href="#lambda的参数形式" class="headerlink" title="lambda的参数形式"></a>lambda的参数形式</h5><h6 id="无参数"><a href="#无参数" class="headerlink" title=".无参数"></a>.无参数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span>: <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(fn1())</span><br></pre></td></tr></table></figure><h6 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a: a</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="string">&#x27;hello world&#x27;</span>))</span><br></pre></td></tr></table></figure><h6 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b, c=<span class="number">100</span>: a + b + c</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h6 id="可变参数：-args"><a href="#可变参数：-args" class="headerlink" title="可变参数：*args"></a>可变参数：*args</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> *args: args</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p></blockquote><h6 id="可变参数：-kwargs"><a href="#可变参数：-kwargs" class="headerlink" title="可变参数：**kwargs"></a>可变参数：**kwargs</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> **kwargs: kwargs</span><br><span class="line"><span class="built_in">print</span>(fn1(name=<span class="string">&#x27;python&#x27;</span>, age=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><h5 id="lambda的应用"><a href="#lambda的应用" class="headerlink" title="lambda的应用"></a>lambda的应用</h5><h6 id="带判断的lambda"><a href="#带判断的lambda" class="headerlink" title="带判断的lambda"></a>带判断的lambda</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn1 = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="number">1000</span>, <span class="number">500</span>))</span><br></pre></td></tr></table></figure><h6 id="列表数据按字典key的值排序"><a href="#列表数据按字典key的值排序" class="headerlink" title="列表数据按字典key的值排序"></a>列表数据按字典key的值排序</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ROSE&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">#### 按name值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="comment">#### 按name值降序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;name&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="comment">#### 按age值升序排列</span></span><br><span class="line">students.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(students)</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4>==把函数作为参数传入==，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。<h5 id="体验高阶函数"><a href="#体验高阶函数" class="headerlink" title="体验高阶函数"></a>体验高阶函数</h5></li></ul><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.2</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.9</span>)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul><li>方法1<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a) + <span class="built_in">abs</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add_num(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><code>方法2</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(a) + f(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(-<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote></li></ul><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h5 id="内置高阶函数"><a href="#内置高阶函数" class="headerlink" title="内置高阶函数"></a>内置高阶函数</h5><h6 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h6><p>map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)/迭代器(Python3)返回。</p><p>需求：计算<code>list1</code>序列中各个数字的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">result = <span class="built_in">map</span>(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;map object at 0x0000013769653198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h6><p>reduce(func，lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。</p><blockquote><p>注意：reduce()传入的参数func必须接收2个参数。</p></blockquote><p>需求：计算<code>list1</code>序列中各个数字的累加和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">result = functools.reduce(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h6 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h6><p>filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">result = <span class="built_in">filter</span>(func, list1)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;filter object at 0x0000017AF9DC3198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><h4 id="文件操作的作用"><a href="#文件操作的作用" class="headerlink" title="文件操作的作用"></a>文件操作的作用</h4><p>思考：什么是文件？思考：文件操作包含什么？<br>答：打开、关闭、读、写、复制….<br>思考：文件操作的的作用是什么？<br>答：读取内容、写入内容、备份内容……</p><blockquote><p>总结：文件操作的作用就是==把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力==。</p></blockquote><h4 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h4><h4 id="文件操作步骤"><a href="#文件操作步骤" class="headerlink" title="文件操作步骤"></a>文件操作步骤</h4><ol><li>打开文件</li><li>读写等操作</li><li>关闭文件<blockquote><p>注意：可以只打开和关闭文件，不进行任何读写操作。</p></blockquote><h5 id="2-1-1-打开"><a href="#2-1-1-打开" class="headerlink" title="2.1.1  打开"></a>2.1.1  打开</h5></li></ol><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode)</span><br></pre></td></tr></table></figure><ul><li>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。<br>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。<h6 id="打开文件模式"><a href="#打开文件模式" class="headerlink" title="打开文件模式"></a>打开文件模式</h6><table><thead><tr><th>模式</th><th align="left">描述</th></tr></thead><tbody><tr><td>r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><h5 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h5><h6 id="写"><a href="#写" class="headerlink" title="写"></a>写</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.write(<span class="string">&#x27;内容&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 1. 打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment">#### 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="comment">#### 3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>w    </code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h6 id="读"><a href="#读" class="headerlink" title="读"></a>读</h6><ul><li>read()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote></li><li>readlines():readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"><span class="comment">#### [&#x27;hello world\n&#x27;, &#x27;abcdefg\n&#x27;, &#x27;aaa\n&#x27;, &#x27;bbb\n&#x27;, &#x27;ccc&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="comment">#### 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li>readline():readline()一次读取一行内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第一行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第二行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#### 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h5 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h5>作用：用来移动文件指针。语法如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.seek(偏移量, 起始位置)</span><br></pre></td></tr></table></figure><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure><h4 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h4>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5></li></ul><ol><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5></li><li>接收用户输入目标文件名<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>规划备份文件名<br>2.1 提取目标文件后缀<br>2.2 组织备份的文件名，xx[备份]后缀<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.1 提取文件后缀点的下标</span></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="comment"># print(index)  # 后缀中.的下标</span></span><br><span class="line"><span class="comment"># print(old_name[:index])  # 源文件名（无后缀）</span></span><br><span class="line"><span class="comment">## 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + old_name[index:]</span><br><span class="line"><span class="comment"># 打印新文件名（带后缀）</span></span><br><span class="line"><span class="comment"># print(new_name)</span></span><br></pre></td></tr></table></figure></li><li>备份文件写入数据<br>3.1 打开源文件 和 备份文件<br>3.2 将源文件数据写入备份文件<br>3.3 关闭文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 3.1 打开文件</span></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="comment">#### 3.2 将源文件数据写入备份文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"><span class="comment">#### 3.3 关闭文件</span></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure><h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</li></ol><p>答：添加条件判断即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">    postfix = old_name[index:]</span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + postfix</span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br></pre></td></tr></table></figure><h4 id="文件和文件夹的操作"><a href="#文件和文件夹的操作" class="headerlink" title="文件和文件夹的操作"></a>文件和文件夹的操作</h4><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure></li><li>使用<code>os</code>模块相关功能<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.函数名()</span><br></pre></td></tr></table></figure><h5 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(目标文件名, 新文件名)</span><br></pre></td></tr></table></figure><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(目标文件名)</span><br></pre></td></tr></table></figure><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(文件夹名字)</span><br></pre></td></tr></table></figure><h5 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(文件夹名字)</span><br></pre></td></tr></table></figure><h5 id="获取当前目录"><a href="#获取当前目录" class="headerlink" title="获取当前目录"></a>获取当前目录</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><h5 id="改变默认目录"><a href="#改变默认目录" class="headerlink" title="改变默认目录"></a>改变默认目录</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(目录)</span><br></pre></td></tr></table></figure><h5 id="获取目录列表"><a href="#获取目录列表" class="headerlink" title="获取目录列表"></a>获取目录列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir(目录)</span><br></pre></td></tr></table></figure><h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4></li></ol><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加/删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#### 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="comment">#### 获取指定目录</span></span><br><span class="line">dir_name = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"><span class="comment">#### 获取指定目录的文件列表</span></span><br><span class="line">file_list = os.listdir(dir_name)</span><br><span class="line"><span class="comment">#### print(file_list)</span></span><br><span class="line"><span class="comment">#### 遍历文件列表内的文件</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_list:</span><br><span class="line">    <span class="comment"># 添加指定字符</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        new_name = <span class="string">&#x27;Python-&#x27;</span> + name</span><br><span class="line">    <span class="comment"># 删除指定字符</span></span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="number">2</span>:</span><br><span class="line">        num = <span class="built_in">len</span>(<span class="string">&#x27;Python-&#x27;</span>)</span><br><span class="line">        new_name = name[num:]</span><br><span class="line">    <span class="comment"># 打印新文件名，测试程序正确性</span></span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line">    <span class="comment"># 重命名</span></span><br><span class="line">    os.rename(dir_name+name, dir_name+new_name)</span><br></pre></td></tr></table></figure><h3 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h3><h4 id="理解面向对象"><a href="#理解面向对象" class="headerlink" title="理解面向对象"></a>理解面向对象</h4><p>面向对象是一种抽象化的编程思想，很多编程语言中都有的一种思想。</p><blockquote><p>例如：洗衣服<br>思考：几种途径可以完成洗衣服？<br>答： 手洗 和 机洗。<br>手洗：找盆 - 放水 - 加洗衣粉 - 浸泡 - 搓洗 - 拧干水 - 倒水 - 漂洗N次 - 拧干 - 晾晒。<br>机洗：打开洗衣机 - 放衣服 - 加洗衣粉 - 按下开始按钮 - 晾晒。<br>思考：对比两种洗衣服途径，同学们发现了什么？<br>答：机洗更简单<br>思考：机洗，只需要找到一台洗衣机，加入简单操作就可以完成洗衣服的工作，而不需要关心洗衣机内部发生了什么事情。</p></blockquote><blockquote><p>总结：==面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。==</p></blockquote><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><blockquote><p>思考：洗衣机洗衣服描述过程中，洗衣机其实就是一个事物，即对象，洗衣机对象哪来的呢？<br>答：洗衣机是由工厂工人制作出来。<br>思考：工厂工人怎么制作出的洗衣机？<br>答：工人根据设计师设计的功能图纸制作洗衣机。<br>总结：图纸  → 洗衣机 → 洗衣服。<br>在面向对象编程过程中，有两个重要组成部分：==类== 和 ==对象==。<br>==类和对象的关系：用类去创建一个对象。==</p></blockquote><h4 id="理解类和对象"><a href="#理解类和对象" class="headerlink" title="理解类和对象"></a>理解类和对象</h4><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>类是对一系列具有相同==特征==和==行为==的事物的统称，是一个==抽象的概念==，不是真实存在的事物。</p><ul><li>特征即是属性</li><li>行为即是方法<br>类比如是制造洗衣机时要用到的图纸，也就是说==类是用来创建对象==。<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5>对象是类创建出来的真实存在的事物，例如：洗衣机。<blockquote><p>注意：开发中，先有类，再有对象。</p></blockquote><h5 id="面向对象实现方法"><a href="#面向对象实现方法" class="headerlink" title="面向对象实现方法"></a>面向对象实现方法</h5><h6 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h6>Python2中类分为：<code>经典类</code> 和 <code>新式类</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名():</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><blockquote><p>注意：类名要满足标识符命名规则，同时遵循==大驼峰命名习惯==。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wash</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>拓展：经典类</li></ul><p>不由任意内置类型派生出的类，称之为经典类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h6 id="创建对象-对象又名实例。"><a href="#创建对象-对象又名实例。" class="headerlink" title="创建对象:对象又名实例。"></a>创建对象:对象又名实例。</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"><span class="comment"># haier对象调用实例方法</span></span><br><span class="line">haier1.wash()</span><br></pre></td></tr></table></figure><blockquote><p>注意：创建对象的过程也叫实例化对象。</p></blockquote><h6 id="self-self指的是调用该函数的对象。"><a href="#self-self指的是调用该函数的对象。" class="headerlink" title="self:self指的是调用该函数的对象。"></a>self:<code>self指的是调用该函数的对象。</code></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wash</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br><span class="line">        <span class="comment"># &lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line"><span class="comment"># 2. 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"><span class="comment"># haier1对象调用实例方法</span></span><br><span class="line">haier1.wash()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier2 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier2)</span><br></pre></td></tr></table></figure><blockquote><p>注意：打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</p></blockquote><h4 id="添加和获取对象属性"><a href="#添加和获取对象属性" class="headerlink" title="添加和获取对象属性"></a>添加和获取对象属性</h4><p>属性即是特征，比如：洗衣机的宽度、高度、重量…对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h6 id="类外面添加对象属性"><a href="#类外面添加对象属性" class="headerlink" title="类外面添加对象属性"></a>类外面添加对象属性</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名 = 值</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haier1.width = <span class="number">500</span></span><br><span class="line">haier1.height = <span class="number">800</span></span><br></pre></td></tr></table></figure><h6 id="类外面获取对象属性"><a href="#类外面获取对象属性" class="headerlink" title="类外面获取对象属性"></a>类外面获取对象属性</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度是<span class="subst">&#123;haier1.width&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度是<span class="subst">&#123;haier1.height&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="类里面获取对象属性"><a href="#类里面获取对象属性" class="headerlink" title="类里面获取对象属性"></a>类里面获取对象属性</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.属性名</span><br></pre></td></tr></table></figure><ul><li>体验<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 类里面获取实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"><span class="comment"># 添加实例属性</span></span><br><span class="line">haier1.width = <span class="number">500</span></span><br><span class="line">haier1.height = <span class="number">800</span></span><br><span class="line">haier1.print_info()</span><br><span class="line"><span class="comment">#haier1洗衣机的宽度是&#123;500&#125;</span></span><br><span class="line"><span class="comment">#haier1洗衣机的高度是&#123;800&#125;</span></span><br></pre></td></tr></table></figure><h4 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h4></li></ul><p>在Python中，<code>__xx__()</code>的函数叫做魔法方法，指的是具有特殊功能的函数。</p><h6 id="init"><a href="#init" class="headerlink" title="__init__()"></a><code>__init__()</code></h6><p>思考：洗衣机的宽度高度是与生俱来的属性，可不可以在生产过程中就赋予这些属性呢？<br>答：理应如此。<br>==<code>__init__()</code>方法的作用：初始化对象。==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="comment"># 定义初始化功能的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 添加实例属性</span></span><br><span class="line">        self.width = <span class="number">500</span></span><br><span class="line">        self.height = <span class="number">800</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 类里面调用实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>, 高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer()</span><br><span class="line">haier1.print_info()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用</li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</li></ul></blockquote><h6 id="带参数的-init"><a href="#带参数的-init" class="headerlink" title="带参数的__init__()"></a>带参数的<code>__init__()</code></h6><p>思考：一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？答：传参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">haier1.print_info()</span><br><span class="line">haier2 = Washer(<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">haier2.print_info()</span><br></pre></td></tr></table></figure><h6 id="str"><a href="#str" class="headerlink" title="__str__()"></a><code>__str__()</code></h6><p>当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中 return 的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是海尔洗衣机的说明书&#x27;</span></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 这是海尔洗衣机的说明书</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br></pre></td></tr></table></figure><h6 id="del-1"><a href="#del-1" class="headerlink" title="__del__()"></a><code>__del__()</code></h6><p>当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self&#125;</span>对象已经被删除&#x27;</span>)</span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000026118223278&gt;对象已经被删除</span></span><br><span class="line"><span class="keyword">del</span> haier1</span><br></pre></td></tr></table></figure><h4 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h4><h5 id="烤地瓜"><a href="#烤地瓜" class="headerlink" title="烤地瓜"></a>烤地瓜</h5><p>需求主线：</p><ol><li>被烤的时间和对应的地瓜状态：<br>0-3分钟：生的<br>3-5分钟：半生不熟<br>5-8分钟：熟的<br>超过8分钟：烤糊了</li><li>添加的调料：<br>用户可以按自己的意愿添加调料<h6 id="步骤分析-1"><a href="#步骤分析-1" class="headerlink" title="步骤分析"></a>步骤分析</h6>需求涉及一个事物： 地瓜，故案例涉及一个类：地瓜类。<h6 id="定义类-1"><a href="#定义类-1" class="headerlink" title="定义类"></a>定义类</h6></li></ol><ul><li>地瓜的属性<ul><li>被烤的时间</li><li>地瓜的状态</li><li>添加的调料</li></ul></li><li>地瓜的方法<ul><li>被烤<ul><li>用户根据意愿设定每次烤地瓜的时间</li><li>判断地瓜被烤的总时间是在哪个区间，修改地瓜状态</li></ul></li><li>添加调料<ul><li>用户根据意愿设定添加的调料</li><li>将用户添加的调料存储</li></ul></li></ul></li><li>显示对象信息<h4 id="5-1-2-2-创建对象，调用相关实例方法"><a href="#5-1-2-2-创建对象，调用相关实例方法" class="headerlink" title="5.1.2.2 创建对象，调用相关实例方法"></a>5.1.2.2 创建对象，调用相关实例方法</h4><h6 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h6></li><li>地瓜属性<ul><li>定义地瓜初始化属性，后期根据程序推进更新实例属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>定义烤地瓜方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br></pre></td></tr></table></figure></li><li>书写str魔法方法，用于输出对象状态<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">......</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure></li><li>创建对象，测试实例属性和实例方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure></li><li>定义添加调料方法，并调用该实例方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">......</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_condiments</span>(<span class="params">self, condiment</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面儿&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure><h6 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_condiments</span>(<span class="params">self, condiment</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面儿&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br></pre></td></tr></table></figure><h5 id="搬家具"><a href="#搬家具" class="headerlink" title="搬家具"></a>搬家具</h5>将小于房子剩余面积的家具摆放到房子中<h6 id="步骤分析-2"><a href="#步骤分析-2" class="headerlink" title="步骤分析"></a>步骤分析</h6>需求涉及两个事物：房子 和 家具，故被案例涉及两个类：房子类 和 家具类。<h6 id="定义类-2"><a href="#定义类-2" class="headerlink" title="定义类"></a>定义类</h6></li></ul><ul><li><p>房子类</p><ul><li>实例属性<ul><li>房子地理位置</li><li>房子占地面积</li><li>房子剩余面积</li><li>房子内家具列表</li></ul></li><li>实例方法<ul><li>容纳家具</li></ul></li><li>显示房屋信息</li></ul></li><li><p>家具类</p><ul><li>家具名称</li><li>家具占地面积<h6 id="创建对象并调用相关方法"><a href="#创建对象并调用相关方法" class="headerlink" title="创建对象并调用相关方法"></a>创建对象并调用相关方法</h6></li></ul></li><li><p>家具类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, area</span>):</span></span><br><span class="line">        <span class="comment"># 家具名字</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 家具占地面积</span></span><br><span class="line">        self.area = area</span><br></pre></td></tr></table></figure></li><li><p> 房子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, address, area</span>):</span></span><br><span class="line">        <span class="comment"># 地理位置</span></span><br><span class="line">        self.address = address</span><br><span class="line">        <span class="comment"># 房屋面积</span></span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具列表</span></span><br><span class="line">        self.furniture = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;房子坐落于<span class="subst">&#123;self.address&#125;</span>, 占地面积<span class="subst">&#123;self.area&#125;</span>, 剩余面积<span class="subst">&#123;self.free_area&#125;</span>, 家具有<span class="subst">&#123;self.furniture&#125;</span>&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_furniture</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;容纳家具&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:</span><br><span class="line">            self.furniture.append(item.name)</span><br><span class="line">            <span class="comment"># 家具搬入后，房屋剩余面积 = 之前剩余面积 - 该家具面积</span></span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;家具太大，剩余面积不足，无法容纳&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="创建对象并调用实例属性和方法"><a href="#创建对象并调用实例属性和方法" class="headerlink" title="创建对象并调用实例属性和方法"></a>创建对象并调用实例属性和方法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bed = Furniture(<span class="string">&#x27;双人床&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">jia1 = Home(<span class="string">&#x27;北京&#x27;</span>, <span class="number">1200</span>)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">jia1.add_furniture(bed)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">sofa = Furniture(<span class="string">&#x27;沙发&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">jia1.add_furniture(sofa)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">ball = Furniture(<span class="string">&#x27;篮球场&#x27;</span>, <span class="number">1500</span>)</span><br><span class="line">jia1.add_furniture(ball)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br></pre></td></tr></table></figure></li><li><p>魔法方法</p><ul><li><code>__init__()</code>: 初始化</li><li><code>__str__()</code>:输出对象信息</li><li><code>__del__()</code>:删除对象时调用</li></ul></li></ul><h4 id="面向对象-继承"><a href="#面向对象-继承" class="headerlink" title="面向对象-继承"></a>面向对象-继承</h4><h4 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h4><p>生活中的继承，一般指的是子女继承父辈的财产。</p><ul><li>拓展1：经典类或旧式类:不由任意内置类型派生出的类，称之为经典类。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li><li>拓展2：新式类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  代码</span><br></pre></td></tr></table></figure>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.num)</span><br><span class="line"><span class="comment"># 子类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">result = B()</span><br><span class="line">result.info_print()  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><blockquote><p>故事主线：一个煎饼果子老师傅，在煎饼果子界摸爬滚打多年，研发了一套精湛的摊煎饼果子的技术。师父要把这套技术传授给他的唯一的最得意的徒弟。<br>分析：徒弟是不是要继承师父的所有技术？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 师父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"><span class="comment"># 2. 徒弟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">Master</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 3. 创建对象daqiu</span></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 4. 对象访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line"><span class="comment"># 5. 对象调用实例方法</span></span><br><span class="line">daqiu.make_cake()</span><br></pre></td></tr></table></figure><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><blockquote><p>故事推进：daqiu是个爱学习的好孩子，想学习更多的煎饼果子技术，于是，在百度搜索到黑马程序员，报班学习煎饼果子技术。</p></blockquote></li></ul><p>所谓多继承意思就是一个类同时继承了多个父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;%s&quot;</span> % self.kongfu)</span><br><span class="line"><span class="comment"># 创建学校类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;%s&quot;</span> % self.kongfu)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br><span class="line"><span class="comment">#[煎饼果子配方]</span></span><br><span class="line"><span class="comment">#[煎饼果子配方]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：当一个<code>类有多个父类的时候，默认使用第一个父类的同名属性和方法。</code></p></blockquote><h4 id="子类重写父类同名方法和属性"><a href="#子类重写父类同名方法和属性" class="headerlink" title="子类重写父类同名方法和属性"></a>子类重写父类同名方法和属性</h4><blockquote><p>故事：daqiu掌握了师父和培训的技术后，自己潜心钻研出自己的独门配方的一套全新的煎饼果子技术。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"><span class="comment"># 独创配方</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Prentice.__mro__)</span><br></pre></td></tr></table></figure><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><h4 id="子类调用父类的同名方法和属性"><a href="#子类调用父类的同名方法和属性" class="headerlink" title="子类调用父类的同名方法和属性"></a>子类调用父类的同名方法和属性</h4><blockquote><p>故事：很多顾客都希望也能吃到古法和新的技术的煎饼果子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_master_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br></pre></td></tr></table></figure><h4 id="多层继承"><a href="#多层继承" class="headerlink" title="多层继承"></a>多层继承</h4><blockquote><p>故事：N年后，daqiu老了，想要把所有技术传承给自己的徒弟。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_master_cake()</span><br></pre></td></tr></table></figure><h4 id="super-调用父类方法"><a href="#super-调用父类方法" class="headerlink" title="super()调用父类方法"></a>super()调用父类方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params">Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">        <span class="comment"># 方法2.1</span></span><br><span class="line">        <span class="comment"># super(School, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(School, self).make_cake()</span></span><br><span class="line">        <span class="comment"># 方法2.2</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子技术]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">    <span class="comment"># 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line">    <span class="comment"># 一次性调用父类的同名属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_old_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span></span><br><span class="line">        <span class="comment"># Master.__init__(self)</span></span><br><span class="line">        <span class="comment"># Master.make_cake(self)</span></span><br><span class="line">        <span class="comment"># School.__init__(self)</span></span><br><span class="line">        <span class="comment"># School.make_cake(self)</span></span><br><span class="line">        <span class="comment"># 方法二: super()</span></span><br><span class="line">        <span class="comment"># 方法2.1 super(当前类名, self).函数()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).make_cake()</span></span><br><span class="line">        <span class="comment"># 方法2.2 super().函数()</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_old_cake()</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><h4 id="私有权限"><a href="#私有权限" class="headerlink" title="私有权限"></a>私有权限</h4><h5 id="定义私有属性和方法"><a href="#定义私有属性和方法" class="headerlink" title="定义私有属性和方法"></a>定义私有属性和方法</h5><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><blockquote><p>故事：daqiu把技术传承给徒弟的同时，不想把自己的钱(2000000个亿)继承给徒弟，这个时候就要为<code>钱</code>这个实例属性设置私有权限。</p></blockquote><p><code>·设置私有权限的方法：在属性名和方法名 前面 加上两个下划线 __。·</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        <span class="comment"># 定义私有属性</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line">    <span class="comment"># 定义私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 对象不能访问私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(daqiu.__money)</span></span><br><span class="line"><span class="comment"># daqiu.__info_print()</span></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 子类无法继承父类的私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(xiaoqiu.__money)  # 无法访问实例属性__money</span></span><br><span class="line"><span class="comment"># xiaoqiu.__info_print()</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>私有属性和私有方法只能在类里面访问和修改。</code></p></blockquote><h5 id="获取和修改私有属性值"><a href="#获取和修改私有属性值" class="headerlink" title="获取和修改私有属性值"></a>获取和修改私有属性值</h5><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[黑马煎饼果子配方]&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line">    <span class="comment"># 获取私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line">    <span class="comment"># 修改私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__money = <span class="number">500</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 调用get_money函数获取私有属性money的值</span></span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br><span class="line"><span class="comment"># 调用set_money函数修改私有属性money的值</span></span><br><span class="line">xiaoqiu.set_money()</span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="了解异常"><a href="#了解异常" class="headerlink" title="了解异常"></a>了解异常</h4><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><p>例如：以<code>r</code>方式打开一个不存在的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="异常的写法"><a href="#异常的写法" class="headerlink" title="异常的写法"></a>异常的写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现异常执行的代码</span><br></pre></td></tr></table></figure><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="捕获指定异常"><a href="#捕获指定异常" class="headerlink" title="捕获指定异常"></a>捕获指定异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">    如果捕获到该异常类型执行的代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol></blockquote><h5 id="捕获多个指定异常"><a href="#捕获多个指定异常" class="headerlink" title="捕获多个指定异常"></a>捕获多个指定异常</h5><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="捕获异常描述信息"><a href="#捕获异常描述信息" class="headerlink" title="捕获异常描述信息"></a>捕获异常描述信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h5><p>Exception是所有程序异常类的父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="异常的else"><a href="#异常的else" class="headerlink" title="异常的else"></a>异常的else</h5><p>else表示的是如果没有异常要执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是else，是没有异常的时候执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="异常的finally"><a href="#异常的finally" class="headerlink" title="异常的finally"></a>异常的finally</h4><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有异常，真开心&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h4 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h4><p>​    1. 尝试只读方式打开test.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。</p><p>​    2. 读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则<code>except</code>捕获异常并提示用户。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment"># 比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;意外终止了读取数据&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭文件&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个文件&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>在Python中，抛出自定义异常的语法为<code> raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类，继承Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, length, min_len</span>):</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.min_len = min_len</span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你输入的长度是<span class="subst">&#123;self.length&#125;</span>, 不能少于<span class="subst">&#123;self.min_len&#125;</span>个字符&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(con) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> ShortInputError(<span class="built_in">len</span>(con), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;密码已经输入完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><h5 id="导入模块的方式"><a href="#导入模块的方式" class="headerlink" title="导入模块的方式"></a>导入模块的方式</h5><ul><li>import 模块名</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><h6 id="import"><a href="#import" class="headerlink" title="import"></a>import</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2.</span>..</span><br><span class="line"><span class="comment"># 2. 调用功能</span></span><br><span class="line">模块名.功能名()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">9</span>))  <span class="comment"># 3.0</span></span><br></pre></td></tr></table></figure><h6 id="from-import"><a href="#from-import" class="headerlink" title="from..import.."></a>from..import..</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能<span class="number">1</span>, 功能<span class="number">2</span>, 功能<span class="number">3.</span>..</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h6 id="from-import-1"><a href="#from-import-1" class="headerlink" title="from .. import *"></a>from .. import *</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h6 id="as定义别名"><a href="#as定义别名" class="headerlink" title="as定义别名"></a>as定义别名</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="comment"># 功能定义别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> tt</span><br><span class="line">tt.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 功能别名</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="制作模块"><a href="#制作模块" class="headerlink" title="制作模块"></a>制作模块</h4><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><h5 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h5><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h4 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h4><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息.，例如，在<code>my_module1.py</code>文件中添加测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。<br>解决办法如下：<code>·main函数·</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="comment"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="调用模块"><a href="#调用模块" class="headerlink" title="调用模块"></a>调用模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module1</span><br><span class="line">my_module1.testA(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。<code>当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</code></p><ul><li>体验<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块1代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="comment"># 模块2代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="comment"># 导入模块和调用功能代码</span></span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> my_test</span><br><span class="line"><span class="keyword">from</span> my_module2 <span class="keyword">import</span> my_test</span><br><span class="line"><span class="comment"># my_test函数是模块2中的函数</span></span><br><span class="line">my_test(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="模块定位顺序"><a href="#模块定位顺序" class="headerlink" title="模块定位顺序"></a>模块定位顺序</h4>当导入一个模块，Python解析器对模块位置的搜索顺序是：</li></ul><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><ul><li>注意<ul><li>自己的文件名不要和已有模块名重复，否则导致模块功能无法使用</li><li><code>使用from 模块名 import 功能</code>的时候，如果功能名字重复，调用到的是最后定义或导入的功能。<h4 id="all"><a href="#all" class="headerlink" title="__all__"></a><code>__all__</code></h4></li></ul></li></ul><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，<code>只能导入这个列表中的元素。</code></p><ul><li>my_module1模块代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;testA&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testB&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>导入模块的文件代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> *</span><br><span class="line">testA()</span><br><span class="line">testB()</span><br></pre></td></tr></table></figure></li></ul><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><h5 id="制作包"><a href="#制作包" class="headerlink" title="制作包"></a>制作包</h5><p>[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><ol><li>新建包<code>mypackage</code></li><li>新建包内模块：<code>my_module1</code> 和 <code>my_module2</code></li><li>模块内代码如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module1&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module2&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h5><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line">包名.模块名.目标</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_package.my_module1</span><br><span class="line"></span><br><span class="line">my_package.my_module1.info_print1()</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5></li></ol><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line">模块名.目标</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">my_module1.info_print1()</span><br></pre></td></tr></table></figure><h3 id="课程：面向对象版学员管理系统"><a href="#课程：面向对象版学员管理系统" class="headerlink" title="课程：面向对象版学员管理系统"></a>课程：面向对象版学员管理系统</h3><h4 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h4><p>使用面向对象编程思想完成学员管理系统的开发，具体如下：</p><ul><li>系统要求：学员数据存储在文件中</li><li>系统功能：添加学员、删除学员、修改学员信息、查询学员信息、显示所有学员信息、保存学员信息及退出系统等功能。<h4 id="准备程序文件"><a href="#准备程序文件" class="headerlink" title="准备程序文件"></a>准备程序文件</h4></li><li>角色分析<ul><li>学员</li><li>管理系统<blockquote><p>工作中注意事项</p><ol><li>为了方便维护代码，一般一个角色一个程序文件；</li><li>项目要有主程序入口，习惯为<code>main.py</code></li></ol></blockquote><h4 id="创建程序文件"><a href="#创建程序文件" class="headerlink" title="创建程序文件"></a>创建程序文件</h4>创建项目目录，例如：<code>StudentManagerSystem</code><br>程序文件如下：</li></ul></li><li>程序入口文件：main.py</li><li>学员文件：student.py</li><li>管理系统文件：managerSystem.py<h4 id="student-py"><a href="#student-py" class="headerlink" title="student.py"></a>student.py</h4>需求：</li><li>学员信息包含：姓名、性别、手机号；</li><li>添加<code>__str__</code>魔法方法，方便查看学员对象信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, gender, tel</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;self.gender&#125;</span>, <span class="subst">&#123;self.tel&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="managerSystem-py"><a href="#managerSystem-py" class="headerlink" title="managerSystem.py"></a>managerSystem.py</h4>需求：</li><li>存储数据的位置：文件(student.data)<ul><li>加载文件数据</li><li>修改数据后保存到文件</li></ul></li><li>存储数据的形式：列表存储学员对象</li><li>系统功能<ul><li>添加学员</li><li>删除学员</li><li>修改学员</li><li>查询学员信息</li><li>显示所有学员信息</li><li>保存学员信息</li><li>退出系统<h6 id="定义类-3"><a href="#定义类-3" class="headerlink" title="定义类"></a>定义类</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 存储数据所用的列表</span></span><br><span class="line">        self.student_list = []</span><br></pre></td></tr></table></figure><h6 id="管理系统框架"><a href="#管理系统框架" class="headerlink" title="管理系统框架"></a>管理系统框架</h6></li></ul></li></ul><p>需求：系统功能循环使用，用户输入不同的功能序号执行不同的功能。</p><ul><li>步骤<ul><li>定义程序入口函数<ul><li>加载数据</li><li>显示功能菜单</li><li>用户输入功能序号</li><li>根据用户输入的功能序号执行不同的功能</li></ul></li><li>定义系统功能函数，添加、删除学员等<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 存储数据所用的列表</span></span><br><span class="line">        self.student_list = []</span><br><span class="line">    <span class="comment"># 一. 程序入口函数，启动程序后执行的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 加载学员信息</span></span><br><span class="line">        self.load_student()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 2. 显示功能菜单</span></span><br><span class="line">            self.show_menu()</span><br><span class="line">            <span class="comment"># 3. 用户输入功能序号</span></span><br><span class="line">            menu_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您需要的功能序号：&#x27;</span>))</span><br><span class="line">            <span class="comment"># 4 根据用户输入的功能序号执行不同的功能</span></span><br><span class="line">            <span class="keyword">if</span> menu_num == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 添加学员</span></span><br><span class="line">                self.add_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 删除学员</span></span><br><span class="line">                self.del_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 修改学员信息</span></span><br><span class="line">                self.modify_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 查询学员信息</span></span><br><span class="line">                self.search_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 显示所有学员信息</span></span><br><span class="line">                self.show_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># 保存学员信息</span></span><br><span class="line">                self.save_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">7</span>:</span><br><span class="line">                <span class="comment"># 退出系统</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 二. 定义功能函数</span></span><br><span class="line">    <span class="comment"># 2.1 显示功能菜单</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请选择如下功能-----------------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1:添加学员&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;2:删除学员&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3:修改学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;4:查询学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5:显示所有学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;6:保存学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;7:退出系统&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2.2 添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.3 删除学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.4 修改学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.5 查询学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.6 显示所有学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.7 保存学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 2.8 加载学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入managerSystem模块</span></span><br><span class="line"><span class="keyword">from</span> managerSystem <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 2. 启动学员管理系统</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    student_manager = StudentManager()</span><br><span class="line">    student_manager.run()</span><br></pre></td></tr></table></figure><h4 id="定义系统功能函数"><a href="#定义系统功能函数" class="headerlink" title="定义系统功能函数"></a>定义系统功能函数</h4><h6 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h6></li></ul></li><li>需求：用户输入学员姓名、性别、手机号，将学员添加到系统。</li><li>步骤<ul><li>用户输入姓名、性别、手机号</li><li>创建该学员对象</li><li>将该学员对象添加到列表</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加学员函数内部需要创建学员对象，故先导入student模块</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">......</span><br><span class="line">    <span class="comment"># 2.2 添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 用户输入姓名、性别、手机号</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的姓名：&#x27;</span>)</span><br><span class="line">        gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的性别：&#x27;</span>)</span><br><span class="line">        tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的手机号：&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2. 创建学员对象：先导入学员模块，再创建对象</span></span><br><span class="line">        student = Student(name, gender, tel)</span><br><span class="line">        <span class="comment"># 3. 将该学员对象添加到列表</span></span><br><span class="line">        self.student_list.append(student)</span><br><span class="line">        <span class="comment"># 打印信息</span></span><br><span class="line">        <span class="built_in">print</span>(self.student_list)</span><br><span class="line">        <span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure><h6 id="删除学员-1"><a href="#删除学员-1" class="headerlink" title="删除学员"></a>删除学员</h6></li><li>需求：用户输入目标学员姓名，如果学员存在则删除该学员。</li><li>步骤<ul><li>用户输入目标学员姓名</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则删除，否则则提示该学员不存在。</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.3 删除学员：删除指定姓名的学员</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    del_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学员姓名：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在则删除，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == del_name:</span><br><span class="line">            self.student_list.remove(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br><span class="line">    <span class="comment"># 打印学员列表，验证删除功能</span></span><br><span class="line">    <span class="built_in">print</span>(self.student_list)</span><br></pre></td></tr></table></figure><h6 id="修改学员信息-1"><a href="#修改学员信息-1" class="headerlink" title="修改学员信息"></a>修改学员信息</h6></li><li>需求：用户输入目标学员姓名，如果学员存在则修改该学员信息。</li><li>步骤<ul><li>用户输入目标学员姓名；</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则修改学员的姓名、性别、手机号数据，否则则提示该学员不存在。</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.4 修改学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    modify_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在则修改姓名、性别、手机号等数据，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == modify_name:</span><br><span class="line">            i.name = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员姓名：&#x27;</span>)</span><br><span class="line">            i.gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员性别：&#x27;</span>)</span><br><span class="line">            i.tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员手机号：&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;修改该学员信息成功，姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="查询学员信息-1"><a href="#查询学员信息-1" class="headerlink" title="查询学员信息"></a>查询学员信息</h6></li><li>需求：用户输入目标学员姓名，如果学员存在则打印该学员信息</li><li>步骤<ul><li>用户输入目标学员姓名</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则打印学员信息，否则提示该学员不存在。</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.5 查询学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">    search_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学员的姓名：&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 如果用户输入的目标学员存在，则打印学员信息，否则提示学员不存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="keyword">if</span> i.name == search_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查无此人!&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="显示所有学员信息-1"><a href="#显示所有学员信息-1" class="headerlink" title="显示所有学员信息"></a>显示所有学员信息</h6></li><li>打印所有学员信息</li><li>步骤<ul><li>遍历学员数据列表，打印所有学员信息</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.6 显示所有学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;姓名\t性别\t手机号&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="保存学员信息"><a href="#保存学员信息" class="headerlink" title="保存学员信息"></a>保存学员信息</h6></li><li>需求：将修改后的学员数据保存到存储数据的文件。</li><li>步骤<ul><li>打开文件</li><li>文件写入数据</li><li>关闭文件<blockquote><p>思考</p><ol><li>文件写入的数据是学员对象的内存地址吗？</li><li>文件内数据要求的数据类型是什么？</li></ol></blockquote></li></ul></li><li>拓展<code>__dict__</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">aa = A()</span><br><span class="line"><span class="comment"># 返回类内部所有属性和方法对应的字典</span></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"><span class="comment"># 返回实例属性和值组成的字典</span></span><br><span class="line"><span class="built_in">print</span>(aa.__dict__)</span><br></pre></td></tr></table></figure>在Python中</li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.7 保存学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 1. 打开文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 文件写入学员数据</span></span><br><span class="line">    <span class="comment"># 注意1：文件写入的数据不能是学员对象的内存地址，需要把学员数据转换成列表字典数据再做存储</span></span><br><span class="line">    new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">    <span class="comment"># [&#123;&#x27;name&#x27;: &#x27;aa&#x27;, &#x27;gender&#x27;: &#x27;nv&#x27;, &#x27;tel&#x27;: &#x27;111&#x27;&#125;]</span></span><br><span class="line">    <span class="built_in">print</span>(new_list)</span><br><span class="line">    <span class="comment"># 注意2：文件内数据要求为字符串类型，故需要先转换数据类型为字符串才能文件写入数据</span></span><br><span class="line">    f.write(<span class="built_in">str</span>(new_list))</span><br><span class="line">    <span class="comment"># 3. 关闭文件</span></span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h6 id="加载学员信息"><a href="#加载学员信息" class="headerlink" title="加载学员信息"></a>加载学员信息</h6></li><li>需求：每次进入系统后，修改的数据是文件里面的数据</li><li>步骤<ul><li>尝试以<code>&quot;r&quot;</code>模式打开学员数据文件，如果文件不存在则以<code>&quot;w&quot;</code>模式打开文件</li><li>如果文件存在则读取数据并存储数据<ul><li>读取数据</li><li>转换数据类型为列表并转换列表内的字典为对象</li><li>存储学员数据到学员列表</li></ul></li><li>关闭文件</li></ul></li><li>代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.8 加载学员信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_student</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 尝试以&quot;r&quot;模式打开数据文件，文件不存在则提示用户；文件存在（没有异常）则读取数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 1. 读取数据</span></span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># 2. 文件中读取的数据都是字符串且字符串内部为字典数据，故需要转换数据类型再转换字典为对象后存储到学员列表</span></span><br><span class="line">        new_list = <span class="built_in">eval</span>(data)</span><br><span class="line">        self.student_list = [Student(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;gender&#x27;</span>], i[<span class="string">&#x27;tel&#x27;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> new_list]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 3. 关闭文件</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="多任务的介绍"><a href="#多任务的介绍" class="headerlink" title="多任务的介绍"></a>多任务的介绍</h3><h4 id="Python-多进程"><a href="#Python-多进程" class="headerlink" title="Python 多进程"></a>Python 多进程</h4><h5 id="导入进程包"><a href="#导入进程包" class="headerlink" title="导入进程包"></a>导入进程包</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入进程包</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br></pre></td></tr></table></figure><h5 id="Process进程类的说明"><a href="#Process进程类的说明" class="headerlink" title="Process进程类的说明"></a>Process进程类的说明</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br></pre></td></tr></table></figure><ul><li>group：指定进程组，目前只能使用None</li><li>target：执行的目标任务名</li><li>name：进程名字</li><li>args：以元组方式给执行任务传参</li><li>kwargs：以字典方式给执行任务传参<h6 id="Process创建的实例对象的常用方法"><a href="#Process创建的实例对象的常用方法" class="headerlink" title="Process创建的实例对象的常用方法:"></a>Process创建的实例对象的常用方法:</h6></li><li>start()：启动子进程实例（创建子进程）</li><li>join()：等待子进程执行结束</li><li>terminate()：不管任务是否完成，立即终止子进程<h6 id="Process创建的实例对象的常用属性"><a href="#Process创建的实例对象的常用属性" class="headerlink" title="Process创建的实例对象的常用属性:"></a>Process创建的实例对象的常用属性:</h6></li><li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数<h6 id="多进程完成多任务的代码"><a href="#多进程完成多任务的代码" class="headerlink" title="多进程完成多任务的代码"></a>多进程完成多任务的代码</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 跳舞任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;跳舞中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 唱歌任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;唱歌中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建跳舞的子进程</span></span><br><span class="line">    <span class="comment"># group: 表示进程组，目前只能使用None</span></span><br><span class="line">    <span class="comment"># target: 表示执行的目标任务名(函数名、方法名)</span></span><br><span class="line">    <span class="comment"># name: 进程名称, 默认是Process-1, .....</span></span><br><span class="line">    dance_process = multiprocessing.Process(target=dance, name=<span class="string">&quot;myprocess1&quot;</span>)</span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    <span class="comment"># 启动子进程执行对应的任务</span></span><br><span class="line">    dance_process.start()</span><br><span class="line">    sing_process.start()</span><br></pre></td></tr></table></figure><blockquote><p>执行结果:<br>唱歌中…<br>跳舞中…<br>唱歌中…<br>跳舞中…<br>唱歌中…<br>跳舞中…<br>唱歌中…<br>跳舞中…<br>唱歌中…<br>跳舞中…</p></blockquote><h4 id="获取进程编号"><a href="#获取进程编号" class="headerlink" title="获取进程编号"></a>获取进程编号</h4><h4 id="获取进程编号的目的"><a href="#获取进程编号的目的" class="headerlink" title="获取进程编号的目的"></a>获取进程编号的目的</h4>获取进程编号的目的是验证主进程和子进程的关系，可以得知子进程是由那个主进程创建出来的。<code>获取进程编号的两种操作</code></li><li>获取当前进程编号</li><li>获取当前父进程编号</li><li>是OS模块<h5 id="获取当前进程编号"><a href="#获取当前进程编号" class="headerlink" title="获取当前进程编号"></a>获取当前进程编号</h5>os.getpid() 表示获取当前进程编号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 跳舞任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dance:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dance:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;跳舞中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="comment"># 扩展:根据进程编号杀死指定进程</span></span><br><span class="line">        os.kill(os.getpid(), <span class="number">9</span>)</span><br><span class="line"><span class="comment"># 唱歌任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sing:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sing:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;唱歌中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="comment"># 创建跳舞的子进程</span></span><br><span class="line">    <span class="comment"># group: 表示进程组，目前只能使用None</span></span><br><span class="line">    <span class="comment"># target: 表示执行的目标任务名(函数名、方法名)</span></span><br><span class="line">    <span class="comment"># name: 进程名称, 默认是Process-1, .....</span></span><br><span class="line">    dance_process = multiprocessing.Process(target=dance, name=<span class="string">&quot;myprocess1&quot;</span>)</span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    <span class="comment"># 启动子进程执行对应的任务</span></span><br><span class="line">    dance_process.start()</span><br><span class="line">    sing_process.start()</span><br></pre></td></tr></table></figure><blockquote><p>执行结果:<br>main: 70763<br>main: &lt;_MainProcess(MainProcess, started)&gt;<br>dance: 70768<br>dance: &lt;Process(myprocess1, started)&gt;<br>跳舞中…<br>sing: 70769<br>sing: &lt;Process(Process-2, started)&gt;<br>唱歌中…<br>唱歌中…<br>唱歌中…<br>唱歌中…<br>唱歌中…</p></blockquote><h5 id="获取当前父进程编号"><a href="#获取当前父进程编号" class="headerlink" title="获取当前父进程编号"></a>获取当前父进程编号</h5>os.getppid() 表示获取当前父进程编号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 跳舞任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dance:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dance:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="comment"># 获取父进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dance的父进程编号:&quot;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;跳舞中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="comment"># 扩展:根据进程编号杀死指定进程</span></span><br><span class="line">        os.kill(os.getpid(), <span class="number">9</span>)</span><br><span class="line"><span class="comment"># 唱歌任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sing:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sing:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="comment"># 获取父进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sing的父进程编号:&quot;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;唱歌中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 获取当前进程的编号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main:&quot;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 获取当前进程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main:&quot;</span>, multiprocessing.current_process())</span><br><span class="line">    <span class="comment"># 创建跳舞的子进程</span></span><br><span class="line">    <span class="comment"># group: 表示进程组，目前只能使用None</span></span><br><span class="line">    <span class="comment"># target: 表示执行的目标任务名(函数名、方法名)</span></span><br><span class="line">    <span class="comment"># name: 进程名称, 默认是Process-1, .....</span></span><br><span class="line">    dance_process = multiprocessing.Process(target=dance, name=<span class="string">&quot;myprocess1&quot;</span>)</span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    <span class="comment"># 启动子进程执行对应的任务</span></span><br><span class="line">    dance_process.start()</span><br><span class="line">    sing_process.start()</span><br></pre></td></tr></table></figure><blockquote><p>main: 70860<br>main: &lt;_MainProcess(MainProcess, started)&gt;<br>dance: 70861<br>dance: &lt;Process(myprocess1, started)&gt;<br>dance的父进程编号: 70860<br>跳舞中…<br>sing: 70862<br>sing: &lt;Process(Process-2, started)&gt;<br>sing的父进程编号: 70860<br>唱歌中…<br>唱歌中…<br>唱歌中…<br>唱歌中…<br>唱歌中…</p></blockquote><h4 id="进程执行带有参数的任务"><a href="#进程执行带有参数的任务" class="headerlink" title="进程执行带有参数的任务"></a>进程执行带有参数的任务</h4><h5 id="进程执行带有参数的任务的介绍"><a href="#进程执行带有参数的任务的介绍" class="headerlink" title="进程执行带有参数的任务的介绍"></a>进程执行带有参数的任务的介绍</h5>我们使用进程执行的任务是没有参数的，假如我们使用进程执行的任务带有参数，如何给函数传参呢?<br>Process类执行任务并给任务传参数有两种方式:</li><li>args 表示以<code>元组</code>的方式给执行任务传参</li><li>kwargs 表示以<code>字典</code>方式给执行任务传参</li></ul><p><strong>args参数的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 带有参数的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    <span class="comment"># args: 以元组的方式给任务传入参数</span></span><br><span class="line">    sub_process = multiprocessing.Process(target=task, args=(<span class="number">5</span>,))</span><br><span class="line">    sub_process.start()</span><br></pre></td></tr></table></figure><blockquote><p>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行完成<br><strong>kwargs参数的使用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 带有参数的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    <span class="comment"># kwargs: 表示以字典方式传入参数</span></span><br><span class="line">    sub_process = multiprocessing.Process(target=task, kwargs=&#123;<span class="string">&quot;count&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">    sub_process.start()</span><br></pre></td></tr></table></figure><blockquote><p>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行完成</p></blockquote><h4 id="进程的注意点"><a href="#进程的注意点" class="headerlink" title="进程的注意点"></a>进程的注意点</h4><p>进程的注意点介绍:</p><ol><li>进程之间不共享全局变量</li><li>主进程会等待所有的子进程执行结束再结束<h5 id="进程之间不共享全局变量"><a href="#进程之间不共享全局变量" class="headerlink" title="进程之间不共享全局变量:"></a>进程之间不共享全局变量:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">g_list = <span class="built_in">list</span>()</span><br><span class="line"><span class="comment"># 添加数据的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_data</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        g_list.append(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;add:&quot;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 代码执行到此，说明数据添加完成</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;add_data:&quot;</span>, g_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;read_data&quot;</span>, g_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建添加数据的子进程</span></span><br><span class="line">    add_data_process = multiprocessing.Process(target=add_data)</span><br><span class="line">    <span class="comment"># 创建读取数据的子进程</span></span><br><span class="line">    read_data_process = multiprocessing.Process(target=read_data)</span><br><span class="line">    <span class="comment"># 启动子进程执行对应的任务</span></span><br><span class="line">    add_data_process.start()</span><br><span class="line">    <span class="comment"># 主进程等待添加数据的子进程执行完成以后程序再继续往下执行，读取数据</span></span><br><span class="line">    add_data_process.join()</span><br><span class="line">    read_data_process.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main:&quot;</span>, g_list)</span><br><span class="line">    <span class="comment"># 总结: 多进程之间不共享全局变量</span></span><br></pre></td></tr></table></figure><blockquote><p>add: 0<br>add: 1<br>add: 2<br>add: 3<br>add: 4<br>add_data: [0, 1, 2, 3, 4]<br>main: []<br>read_data []</p></blockquote></li></ol><p>创建子进程会对主进程资源进行拷贝，也就是说子进程是主进程的一个副本，好比是一对双胞胎，之所以进程之间不共享全局变量，是因为操作的不是同一个进程里面的全局变量，只不过不同进程里面的全局变量名字相同而已。</p><h5 id="主进程会等待所有的子进程执行结束再结束"><a href="#主进程会等待所有的子进程执行结束再结束" class="headerlink" title="主进程会等待所有的子进程执行结束再结束"></a>主进程会等待所有的子进程执行结束再结束</h5><p>假如我们现在创建一个子进程，这个子进程执行完大概需要2秒钟，现在让主进程执行0.5秒钟就退出程序，查看一下执行结果.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义进程所需要执行的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    sub_process = multiprocessing.Process(target=task)</span><br><span class="line">    sub_process.start()</span><br><span class="line">    <span class="comment"># 主进程延时0.5秒钟</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line">    <span class="comment"># 总结： 主进程会等待所有的子进程执行完成以后程序再退出</span></span><br></pre></td></tr></table></figure><blockquote><p>任务执行中…<br>任务执行中…<br>任务执行中…<br>over<br>任务执行中…<br>任务执行中…<br>任务执行中…<br>任务执行中…<br>任务执行中…<br>任务执行中…<br>任务执行中…</p></blockquote><p>主进程会等待所有的子进程执行结束再结束,假如我们就让主进程执行0.5秒钟，子进程就销毁不再执行，那怎么办呢?<br>我们可以设置守护主进程 或者 在主进程退出之前 让子进程销毁</p><ul><li>守护主进程:守护主进程就是主进程退出子进程销毁不再执行</li><li>子进程销毁:子进程执行结束<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义进程所需要执行的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    sub_process = multiprocessing.Process(target=task)</span><br><span class="line">    <span class="comment"># 设置守护主进程，主进程退出子进程直接销毁，子进程的生命周期依赖与主进程</span></span><br><span class="line">    <span class="comment"># sub_process.daemon = True</span></span><br><span class="line">    sub_process.start()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line">    <span class="comment"># 让子进程销毁</span></span><br><span class="line">    sub_process.terminate()</span><br><span class="line">    exit()</span><br><span class="line">    <span class="comment"># 总结： 主进程会等待所有的子进程执行完成以后程序再退出</span></span><br><span class="line">    <span class="comment"># 如果想要主进程退出子进程销毁，可以设置守护主进程或者在主进程退出之前让子进程销毁</span></span><br></pre></td></tr></table></figure><h4 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h4><h5 id="导入线程模块"><a href="#导入线程模块" class="headerlink" title="导入线程模块"></a>导入线程模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入线程模块</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><h5 id="线程类Thread参数说明"><a href="#线程类Thread参数说明" class="headerlink" title="线程类Thread参数说明"></a>线程类Thread参数说明</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread([group [, target [, name [, args [, kwargs]]]]])</span><br></pre></td></tr></table></figure></li><li>group: 线程组，目前只能使用None</li><li>target: 执行的目标任务名</li><li>args: 以元组的方式给执行任务传参</li><li>kwargs: 以字典方式给执行任务传参</li><li>name: 线程名，一般不用设置<h5 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h5></li><li>启动线程使用start方法<h5 id="多线程完成多任务"><a href="#多线程完成多任务" class="headerlink" title="多线程完成多任务"></a>多线程完成多任务</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 唱歌任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="comment"># 扩展： 获取当前线程</span></span><br><span class="line">    <span class="comment"># print(&quot;sing当前执行的线程为：&quot;, threading.current_thread())</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在唱歌...%d&quot;</span> % i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 跳舞任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="comment"># 扩展： 获取当前线程</span></span><br><span class="line">    <span class="comment"># print(&quot;dance当前执行的线程为：&quot;, threading.current_thread())</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在跳舞...%d&quot;</span> % i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 扩展： 获取当前线程</span></span><br><span class="line">    <span class="comment"># print(&quot;当前执行的线程为：&quot;, threading.current_thread())</span></span><br><span class="line">    <span class="comment"># 创建唱歌的线程</span></span><br><span class="line">    <span class="comment"># target： 线程执行的函数名</span></span><br><span class="line">    sing_thread = threading.Thread(target=sing)</span><br><span class="line">    <span class="comment"># 创建跳舞的线程</span></span><br><span class="line">    dance_thread = threading.Thread(target=dance)</span><br><span class="line">    <span class="comment"># 开启线程</span></span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>正在唱歌…0<br>正在跳舞…0<br>正在唱歌…1<br>正在跳舞…1<br>正在唱歌…2<br>正在跳舞…2</p></blockquote><h4 id="线程执行带有参数的任务"><a href="#线程执行带有参数的任务" class="headerlink" title="线程执行带有参数的任务"></a>线程执行带有参数的任务</h4><h5 id="线程执行带有参数的任务的介绍"><a href="#线程执行带有参数的任务的介绍" class="headerlink" title="线程执行带有参数的任务的介绍"></a>线程执行带有参数的任务的介绍</h5>前面我们使用线程执行的任务是没有参数的，假如我们使用线程执行的任务带有参数，如何给函数传参呢?Thread类执行任务并给任务传参数有两种方式:</li><li>args 表示以元组的方式给执行任务传参</li><li>kwargs 表示以字典方式给执行任务传参</li></ul><p><strong>args参数的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 带有参数的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子线程</span></span><br><span class="line">    <span class="comment"># args: 以元组的方式给任务传入参数</span></span><br><span class="line">    sub_thread = threading.Thread(target=task, args=(<span class="number">5</span>,))</span><br><span class="line">    sub_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行完成<br><strong>kwargs参数的使用</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 带有参数的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行中..&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;任务执行完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子线程</span></span><br><span class="line">    <span class="comment"># kwargs: 表示以字典方式传入参数</span></span><br><span class="line">    sub_thread = threading.Thread(target=task, kwargs=&#123;<span class="string">&quot;count&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">    sub_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>任务执行中..<br>任务执行中..<br>任务执行中..<br>任务执行完成</p></blockquote><h4 id="线程的注意点"><a href="#线程的注意点" class="headerlink" title="线程的注意点"></a>线程的注意点</h4><ul><li>线程之间执行是无序的</li><li>主线程会等待所有的子线程执行结束再结束</li><li>线程之间共享全局变量</li><li>线程之间共享全局变量数据出现错误问题<h5 id="线程之间执行是无序的"><a href="#线程之间执行是无序的" class="headerlink" title="线程之间执行是无序的"></a>线程之间执行是无序的</h5></li></ul><ul><li>线程之间执行是无序的，它是由cpu调度决定的 ，cpu调度哪个线程，哪个线程就先执行，没有调度的线程不能执行。</li><li>进程之间执行也是无序的，它是由操作系统调度决定的，操作系统调度哪个进程，哪个进程就先执行，没有调度的进程不能执行。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前线程:&quot;</span>, threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">       sub_thread = threading.Thread(target=task)</span><br><span class="line">       sub_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>当前线程: Thread-1<br>当前线程: Thread-2<br>当前线程: Thread-4<br>当前线程: Thread-5<br>当前线程: Thread-3</p></blockquote><h5 id="主线程会等待所有的子线程执行结束再结束"><a href="#主线程会等待所有的子线程执行结束再结束" class="headerlink" title="主线程会等待所有的子线程执行结束再结束"></a>主线程会等待所有的子线程执行结束再结束</h5>假如我们现在创建一个子线程，这个子线程执行完大概需要2.5秒钟，现在让主线程执行1秒钟就退出程序，查看一下执行结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 测试主线程是否会等待子线程执行完成以后程序再退出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test:&quot;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sub_thread = threading.Thread(target=show_info)</span><br><span class="line">    sub_thread.start()</span><br><span class="line">    <span class="comment"># 主线程延时1秒</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>test: 0<br>test: 1<br>over<br>test: 2<br>test: 3<br>test: 4<br>主线程会等待所有的子线程执行结束再结束,假如我们就让主线程执行1秒钟，子线程就销毁不再执行，那怎么办呢?</p></blockquote></li></ul><p>我们可以设置守护主线程<br>守护主线程:守护主线程就是主线程退出子线程销毁不再执行<br>设置守护主线程有两种方式：</p><ul><li>threading.Thread(target=show_info, daemon=True)</li><li>线程对象.setDaemon(True)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 测试主线程是否会等待子线程执行完成以后程序再退出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test:&quot;</span>, i)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子线程守护主线程 </span></span><br><span class="line">    <span class="comment"># daemon=True 守护主线程</span></span><br><span class="line">    <span class="comment"># 守护主线程方式1</span></span><br><span class="line">    sub_thread = threading.Thread(target=show_info, daemon=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置成为守护主线程，主线程退出后子线程直接销毁不再执行子线程的代码</span></span><br><span class="line">    <span class="comment"># 守护主线程方式2</span></span><br><span class="line">    <span class="comment"># sub_thread.setDaemon(True)</span></span><br><span class="line">    sub_thread.start()</span><br><span class="line">    <span class="comment"># 主线程延时1秒</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>test: 0<br>test: 1<br>over</p></blockquote><h5 id="线程之间共享全局变量"><a href="#线程之间共享全局变量" class="headerlink" title="线程之间共享全局变量"></a>线程之间共享全局变量</h5></li></ul><p>需求:</p><p>定义一个列表类型的全局变量<br>创建两个子线程分别执行向全局变量添加数据的任务和向全局变量读取数据的任务<br>查看线程之间是否共享全局变量数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">my_list = <span class="built_in">list</span>()</span><br><span class="line"><span class="comment"># 写入数据任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        my_list.append(i)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;write_data:&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 读取数据任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;read_data:&quot;</span>, my_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建写入数据的线程</span></span><br><span class="line">    write_thread = threading.Thread(target=write_data)</span><br><span class="line">    <span class="comment"># 创建读取数据的线程</span></span><br><span class="line">    read_thread = threading.Thread(target=read_data)</span><br><span class="line">    write_thread.start()</span><br><span class="line">    <span class="comment"># 延时</span></span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="comment"># 主线程等待写入线程执行完成以后代码在继续往下执行</span></span><br><span class="line">    write_thread.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始读取数据啦&quot;</span>)</span><br><span class="line">    read_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>write_data: [0, 1, 2, 3, 4]<br>开始读取数据啦<br>read_data: [0, 1, 2, 3, 4]</p></blockquote><h5 id="线程之间共享全局变量数据出现错误问题"><a href="#线程之间共享全局变量数据出现错误问题" class="headerlink" title="线程之间共享全局变量数据出现错误问题"></a>线程之间共享全局变量数据出现错误问题</h5><p>需求:</p><ul><li>定义两个函数，实现循环100万次，每循环一次给全局变量加1</li><li>创建两个子线程执行对应的两个函数，查看计算后的结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 循环一次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum1:&quot;</span>, g_num)</span><br><span class="line"><span class="comment"># 循环一次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum2:&quot;</span>, g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    first_thread = threading.Thread(target=sum_num1)</span><br><span class="line">    second_thread = threading.Thread(target=sum_num2)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    first_thread.start()</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    second_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>sum1: 1210949<br>sum2: 1496035</p></blockquote></li></ul><p>多线程同时对全局变量操作数据发生了错误,错误分析:</p><p>两个线程first_thread和second_thread都要对全局变量g_num(默认是0)进行加1运算，但是由于是多线程同时操作，有可能出现下面情况：</p><ul><li>在g_num=0时，first_thread取得g_num=0。此时系统把first_thread调度为”sleeping”状态，把second_thread转换为”running”状态，t2也获得g_num=0</li><li>然后second_thread对得到的值进行加1并赋给g_num，使得g_num=1</li><li>然后系统又把second_thread调度为”sleeping”，把first_thread转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。</li><li>这样导致虽然first_thread和first_thread都对g_num加1，但结果仍然是g_num=1<br><code>全局变量数据错误的解决办法:</code></li></ul><p>线程同步: 保证同一时刻只能有一个线程去操作全局变量 同步: 就是协同步调，按预定的先后次序进行运行。如:你说完，我再说, 好比现实生活中的对讲机</p><p>线程同步的方式:</p><ul><li>线程等待(join)</li><li>互斥锁<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 循环1000000次每次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum1:&quot;</span>, g_num)</span><br><span class="line"><span class="comment"># 循环1000000次每次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num2</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum2:&quot;</span>, g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    first_thread = threading.Thread(target=sum_num1)</span><br><span class="line">    second_thread = threading.Thread(target=sum_num2)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    first_thread.start()</span><br><span class="line">    <span class="comment"># 主线程等待第一个线程执行完成以后代码再继续执行，让其执行第二个线程</span></span><br><span class="line">    <span class="comment"># 线程同步： 一个任务执行完成以后另外一个任务才能执行，同一个时刻只有一个任务在执行</span></span><br><span class="line">    first_thread.join()</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    second_thread.start()</span><br></pre></td></tr></table></figure><blockquote><p>sum1: 1000000<br>sum2: 2000000</p></blockquote><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4>互斥锁: 对共享数据进行锁定，保证同一时刻只能有一个线程去操作。<br>注意:互斥锁是多个线程一起去抢，抢到锁的线程先执行，没有抢到锁的线程需要等待，等互斥锁使用完释放后，其它等待的线程再去抢这个锁。<h5 id="互斥锁的使用"><a href="#互斥锁的使用" class="headerlink" title="互斥锁的使用"></a>互斥锁的使用</h5>互斥锁使用步骤:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 上锁</span></span><br><span class="line">mutex.acquire()</span><br><span class="line">...这里编写代码能保证同一时刻只能有一个线程去操作, 对共享数据进行锁定...</span><br><span class="line"><span class="comment"># 释放锁</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure>注意点:<br>acquire和release方法之间的代码同一时刻只能有一个线程去操作<br>如果在调用acquire方法的时候 其他线程已经使用了这个互斥锁，那么此时acquire方法会堵塞，直到这个互斥锁释放后才能再次上锁。<h5 id="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"><a href="#使用互斥锁完成2个线程对同一个全局变量各加100万次的操作" class="headerlink" title="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"></a>使用互斥锁完成2个线程对同一个全局变量各加100万次的操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 创建全局互斥锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment"># 循环一次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num1</span>():</span></span><br><span class="line">    <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum1:&quot;</span>, g_num)</span><br><span class="line">    <span class="comment"># 释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"><span class="comment"># 循环一次给全局变量加1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num2</span>():</span></span><br><span class="line">    <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum2:&quot;</span>, g_num)</span><br><span class="line">    <span class="comment"># 释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建两个线程</span></span><br><span class="line">    first_thread = threading.Thread(target=sum_num1)</span><br><span class="line">    second_thread = threading.Thread(target=sum_num2)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    first_thread.start()</span><br><span class="line">    second_thread.start()</span><br><span class="line">    <span class="comment"># 提示：加上互斥锁，那个线程抢到这个锁我们决定不了，那线程抢到锁那个线程先执行，没有抢到的线程需要等待</span></span><br><span class="line">    <span class="comment"># 加上互斥锁多任务瞬间变成单任务，性能会下降，也就是说同一时刻只能有一个线程去执行</span></span><br></pre></td></tr></table></figure><blockquote><p>sum1: 1000000<br>sum2: 2000000</p></blockquote></li></ul><p>说明:通过执行结果可以地址互斥锁能够保证多个线程访问共享数据不会出现数据错误问题</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁:"></a>死锁:</h4><p>死锁: 一直等待对方释放锁的情景就是死锁</p><h5 id="死锁示例"><a href="#死锁示例" class="headerlink" title="死锁示例"></a>死锁示例</h5><p>需求:根据下标在列表中取值, 保证同一时刻只能有一个线程去取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 创建互斥锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment"># 根据下标去取值， 保证同一时刻只能有一个线程去取值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">index</span>):</span></span><br><span class="line">    <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line">    my_list = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 判断下标释放越界</span></span><br><span class="line">    <span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(my_list):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;下标越界:&quot;</span>, index)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    value = my_list[index]</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 模拟大量线程去执行取值操作</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        sub_thread = threading.Thread(target=get_value, args=(i,))</span><br><span class="line">        sub_thread.start()</span><br></pre></td></tr></table></figure><h5 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h5><p>==在合适的地方释放锁-</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 创建互斥锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment"># 根据下标去取值， 保证同一时刻只能有一个线程去取值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">index</span>):</span></span><br><span class="line">    <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line">    my_list = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> index &gt;= <span class="built_in">len</span>(my_list):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;下标越界:&quot;</span>, index)</span><br><span class="line">        <span class="comment"># 当下标越界需要释放锁，让后面的线程还可以取值</span></span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    value = my_list[index]</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 释放锁</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 模拟大量线程去执行取值操作</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        sub_thread = threading.Thread(target=get_value, args=(i,))</span><br><span class="line">        sub_thread.start()</span><br></pre></td></tr></table></figure><h4 id="进程和线程的对比的三个方向"><a href="#进程和线程的对比的三个方向" class="headerlink" title="进程和线程的对比的三个方向"></a>进程和线程的对比的三个方向</h4><ul><li>==关系对比==<ul><li>线程是依附在进程里面的，没有进程就没有线程。</li><li>一个进程默认提供一条线程，进程可以创建多个线程。</li></ul></li><li>==区别对比==<ul><li>进程之间不共享全局变量， </li><li>线程之间共享全局变量，但是要注意资源竞争的问题，解决办法: 互斥锁或者线程同步</li><li>创建进程的资源开销要比创建线程的资源开销要大</li><li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li><li>线程不能够独立执行，必须依存在进程中</li><li>多进程开发比单进程多线程开发稳定性要强 </li></ul></li><li>==优缺点对比==<ul><li>进程优缺点:<ul><li>优点：可以用多核</li><li>缺点：资源开销大</li></ul></li><li>线程优缺点:<ul><li>优点：资源开销小</li><li>缺点：不能使用多核<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="socket-的概念"><a href="#socket-的概念" class="headerlink" title="socket 的概念"></a>socket 的概念</h4>socket (简称 套接字) 是进程之间通信一个工具，好比现实生活中的插座，所有的家用电器要想工作都是基于插座进行，进程之间想要进行网络通信需要基于这个 socket。</li></ul></li></ul></li><li>socket 的作用：负责进程之间的网络数据传输，好比数据的搬运工。</li><li>socket 使用场景：不夸张的说，只要跟网络相关的应用程序或者软件都使用到了 socket 。</li></ul><h4 id="TCP-网络应用程序开发流程"><a href="#TCP-网络应用程序开发流程" class="headerlink" title="TCP 网络应用程序开发流程"></a>TCP 网络应用程序开发流程</h4><h5 id="TCP-网络应用程序开发流程的介绍"><a href="#TCP-网络应用程序开发流程的介绍" class="headerlink" title="TCP 网络应用程序开发流程的介绍"></a>TCP 网络应用程序开发流程的介绍</h5><p>TCP 网络应用程序开发分为:</p><ul><li>TCP 客户端程序开发</li><li>TCP 服务端程序开发<blockquote><p>说明:客户端程序是指运行在用户设备上的程序 服务端程序是指运行在服务器设备上的程序，专门为客户端提供数据服务。<br><img src="https://img-blog.csdnimg.cn/20210413195813208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h5 id="TCP-客户端程序开发流程的介绍"><a href="#TCP-客户端程序开发流程的介绍" class="headerlink" title="TCP 客户端程序开发流程的介绍"></a>TCP 客户端程序开发流程的介绍</h5>步骤说明:</li><li>创建客户端套接字对象</li><li>和服务端套接字建立连接</li><li>发送数据</li><li>接收数据</li><li>关闭客户端套接字<h5 id="TCP-客户端程序开发"><a href="#TCP-客户端程序开发" class="headerlink" title="TCP 客户端程序开发"></a>TCP 客户端程序开发</h5><h5 id="导入-socket-模块-import-socket"><a href="#导入-socket-模块-import-socket" class="headerlink" title="导入 socket 模块 import socket"></a>导入 socket 模块 import socket</h5><h5 id="创建客户端-socket-对象-socket-socket-AddressFamily-Type"><a href="#创建客户端-socket-对象-socket-socket-AddressFamily-Type" class="headerlink" title="创建客户端 socket 对象 socket.socket(AddressFamily, Type)"></a>创建客户端 socket 对象 socket.socket(AddressFamily, Type)</h5>==参数说明:==</li><li>AddressFamily 表示IP地址类型, 分为TPv4和IPv6</li><li>Type 表示传输协议类型<br>==方法说明:==</li><li>connect((host, port)) 表示和服务端套接字建立连接, host是服务器ip地址，port是应用程序的端口号</li><li>send(data) 表示发送数据，data是二进制数据</li><li>recv(buffersize) 表示接收数据, buffersize是每次接收数据的长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建tcp客户端套接字</span></span><br><span class="line">    <span class="comment"># 1. AF_INET：表示ipv4</span></span><br><span class="line">    <span class="comment"># 2. SOCK_STREAM: tcp传输协议</span></span><br><span class="line">    tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 和服务端应用程序建立连接</span></span><br><span class="line">    tcp_client_socket.connect((<span class="string">&quot;192.168.131.62&quot;</span>, <span class="number">8080</span>))</span><br><span class="line">    <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">    <span class="comment"># 准备发送的数据</span></span><br><span class="line">    send_data = <span class="string">&quot;你好服务端，我是客户端小黑!&quot;</span>.encode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    tcp_client_socket.send(send_data)</span><br><span class="line">    <span class="comment"># 接收数据, 这次接收的数据最大字节数是1024</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 返回的直接是服务端程序发送的二进制数据</span></span><br><span class="line">    <span class="built_in">print</span>(recv_data)</span><br><span class="line">    <span class="comment"># 对数据进行解码</span></span><br><span class="line">    recv_content = recv_data.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收服务端的数据为:&quot;</span>, recv_content)</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br></pre></td></tr></table></figure><blockquote><p>b’hello’<br>接收服务端的数据为: hello</p></blockquote><h5 id="TCP-服务端程序开发流程的介绍"><a href="#TCP-服务端程序开发流程的介绍" class="headerlink" title="TCP 服务端程序开发流程的介绍"></a>TCP 服务端程序开发流程的介绍</h5>步骤说明:</li><li>创建服务端端套接字对象</li><li>绑定端口号</li><li>设置监听</li><li>等待接受客户端的连接请求</li><li>接收数据</li><li>发送数据</li><li>关闭套接字</li></ul><h5 id="TCP服务端程序开发"><a href="#TCP服务端程序开发" class="headerlink" title="TCP服务端程序开发"></a>TCP服务端程序开发</h5><h5 id="导入-socket-模块-import-socket-1"><a href="#导入-socket-模块-import-socket-1" class="headerlink" title="导入 socket 模块  import socket"></a>导入 socket 模块  import socket</h5><h5 id="创建服务端-socket-对象-socket-socket-AddressFamily-Type"><a href="#创建服务端-socket-对象-socket-socket-AddressFamily-Type" class="headerlink" title="创建服务端 socket 对象    socket.socket(AddressFamily, Type)"></a>创建服务端 socket 对象    socket.socket(AddressFamily, Type)</h5><p>==参数说明:==</p><ul><li>AddressFamily 表示IP地址类型, 分为TPv4和IPv6</li><li>Type 表示传输协议类型<br>==方法说明:==</li><li>bind((host, port)) 表示绑定端口号, host 是 ip 地址，port 是端口号，ip 地址一般不指定，表示本机的任何一个ip地址都可以。</li><li>listen (backlog) 表示设置监听，backlog参数表示最大等待建立连接的个数。</li><li>accept() 表示等待接受客户端的连接请求</li><li>send(data) 表示发送数据，data 是二进制数据</li><li>crecv(buffersize) 表示接收数据, buffersize 是每次接收数据的长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用，让程序退出端口号立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>) </span><br><span class="line">    <span class="comment"># 给程序绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">8989</span>))</span><br><span class="line">    <span class="comment"># 设置监听</span></span><br><span class="line">    <span class="comment"># 128:最大等待建立连接的个数， 提示： 目前是单任务的服务端，同一时刻只能服务与一个客户端，后续使用多任务能够让服务端同时服务与多个客户端，</span></span><br><span class="line">    <span class="comment"># 不需要让客户端进行等待建立连接</span></span><br><span class="line">    <span class="comment"># listen后的这个套接字只负责接收客户端连接请求，不能收发消息，收发消息使用返回的这个新套接字来完成</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 等待客户端建立连接的请求, 只有客户端和服务端建立连接成功代码才会解阻塞，代码才能继续往下执行</span></span><br><span class="line">    <span class="comment"># 1. 专门和客户端通信的套接字： service_client_socket</span></span><br><span class="line">    <span class="comment"># 2. 客户端的ip地址和端口号： ip_port</span></span><br><span class="line">    service_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">    <span class="comment"># 代码执行到此说明连接建立成功</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;客户端的ip地址和端口号:&quot;</span>, ip_port)</span><br><span class="line">    <span class="comment"># 接收客户端发送的数据, 这次接收数据的最大字节数是1024</span></span><br><span class="line">    recv_data = service_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 获取数据的长度</span></span><br><span class="line">    recv_data_length = <span class="built_in">len</span>(recv_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收数据的长度为:&quot;</span>, recv_data_length)</span><br><span class="line">    <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">    recv_content = recv_data.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收客户端的数据为:&quot;</span>, recv_content)</span><br><span class="line">    <span class="comment"># 准备发送的数据</span></span><br><span class="line">    send_data = <span class="string">&quot;ok, 问题正在处理中...&quot;</span>.encode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="comment"># 发送数据给客户端</span></span><br><span class="line">    service_client_socket.send(send_data)</span><br><span class="line">    <span class="comment"># 关闭服务与客户端的套接字， 终止和客户端通信的服务</span></span><br><span class="line">    service_client_socket.close()</span><br><span class="line">    <span class="comment"># 关闭服务端的套接字, 终止和客户端提供建立连接请求的服务</span></span><br><span class="line">    tcp_server_socket.close()</span><br></pre></td></tr></table></figure><blockquote><p>客户端的ip地址和端口号: (‘172.16.47.209’, 52472)<br>接收数据的长度为: 5<br>接收客户端的数据为: hello</p></blockquote></li></ul><p>说明:当客户端和服务端建立连接后，服务端程序退出后端口号不会立即释放，需要等待大概1-2分钟。<br>解决办法有两种:</p><ul><li>更换服务端端口号</li><li>设置端口号复用(推荐大家使用)，也就是说让服务端程序退出后端口号立即释放。<br>设置端口号复用的代码如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数1: 表示当前套接字</span></span><br><span class="line"><span class="comment"># 参数2: 设置端口号复用选项</span></span><br><span class="line"><span class="comment"># 参数3: 设置端口号复用选项对应的值</span></span><br><span class="line">tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="TCP网络应用程序的注意点"><a href="#TCP网络应用程序的注意点" class="headerlink" title="TCP网络应用程序的注意点"></a>TCP网络应用程序的注意点</h4></li><li>当 TCP 客户端程序想要和 TCP 服务端程序进行通信的时候必须要先建立连接</li><li>TCP 客户端程序一般不需要绑定端口号，因为客户端是主动发起建立连接的。</li><li>TCP 服务端程序必须绑定端口号，否则客户端找不到这个 TCP 服务端程序。</li><li>listen 后的套接字是被动套接字，只负责接收新的客户端的连接请求，不能收发消息。</li><li>当 TCP 客户端程序和 TCP 服务端程序连接成功后， TCP 服务器端程序会产生一个新的套接字，收发客户端消息使用该套接字。</li><li>关闭 accept 返回的套接字意味着和这个客户端已经通信完毕。</li><li>关闭 listen 后的套接字意味着服务端的套接字关闭了，会导致新的客户端不能连接服务端，但是之前已经接成功的客户端还能正常通信。</li><li>当客户端的套接字调用 close 后，服务器端的 recv 会解阻塞，返回的数据长度为0，服务端可以通过返回数据的长度来判断客户端是否已+ 经下线，反之服务端关闭套接字，客户端的 recv 也会解阻塞，返回的数据长度也为0。</li></ul><h4 id="案例-多任务版TCP服务端程序开发"><a href="#案例-多任务版TCP服务端程序开发" class="headerlink" title="案例-多任务版TCP服务端程序开发"></a>案例-多任务版TCP服务端程序开发</h4><h5 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h5><ul><li>编写一个TCP服务端程序，循环等待接受客户端的连接请求</li><li>当客户端和服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线程阻塞</li><li>把创建的子线程设置成为守护主线程，防止主线程无法退出。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理客户端的请求操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client_request</span>(<span class="params">service_client_socket, ip_port</span>):</span></span><br><span class="line">    <span class="comment"># 循环接收客户端发送的数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收客户端发送的数据</span></span><br><span class="line">        recv_data = service_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 容器类型判断是否有数据可以直接使用if语句进行判断，如果容器类型里面有数据表示条件成立，否则条件失败</span></span><br><span class="line">        <span class="comment"># 容器类型: 列表、字典、元组、字符串、set、range、二进制数据</span></span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            <span class="built_in">print</span>(recv_data.decode(<span class="string">&quot;gbk&quot;</span>), ip_port)</span><br><span class="line">            <span class="comment"># 回复</span></span><br><span class="line">            service_client_socket.send(<span class="string">&quot;ok，问题正在处理中...&quot;</span>.encode(<span class="string">&quot;gbk&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;客户端下线了:&quot;</span>, ip_port)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 终止和客户端进行通信</span></span><br><span class="line">    service_client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用，让程序退出端口号立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9090</span>))</span><br><span class="line">    <span class="comment"># 设置监听, listen后的套接字是被动套接字，只负责接收客户端的连接请求</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 循环等待接收客户端的连接请求</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待接收客户端的连接请求</span></span><br><span class="line">        service_client_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;客户端连接成功:&quot;</span>, ip_port)</span><br><span class="line">        <span class="comment"># 当客户端和服务端建立连接成功以后，需要创建一个子线程，不同子线程负责接收不同客户端的消息</span></span><br><span class="line">        sub_thread = threading.Thread(target=handle_client_request, args=(service_client_socket, ip_port))</span><br><span class="line">        <span class="comment"># 设置守护主线程</span></span><br><span class="line">        sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 启动子线程</span></span><br><span class="line">        sub_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># tcp服务端套接字可以不需要关闭，因为服务端程序需要一直运行</span></span><br><span class="line">    <span class="comment"># tcp_server_socket.close()</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端连接成功: (‘172.16.47.209’, 51528)<br>客户端连接成功: (‘172.16.47.209’, 51714)<br>hello1 (‘172.16.47.209’, 51528)<br>hello2 (‘172.16.47.209’, 51714)</p></blockquote><h4 id="socket之send和recv原理剖析"><a href="#socket之send和recv原理剖析" class="headerlink" title="socket之send和recv原理剖析"></a>socket之send和recv原理剖析</h4><h5 id="1-认识TCP-socket的发送和接收缓冲区"><a href="#1-认识TCP-socket的发送和接收缓冲区" class="headerlink" title="1. 认识TCP socket的发送和接收缓冲区"></a>1. 认识TCP socket的发送和接收缓冲区</h5><p>当创建一个TCP socket对象的时候会有一个发送缓冲区和一个接收缓冲区，这个发送和接收缓冲区指的就是内存中的一片空间。</p><h5 id="2-send原理剖析"><a href="#2-send原理剖析" class="headerlink" title="2. send原理剖析"></a>2. send原理剖析</h5><p>send是不是直接把数据发给服务端?<br>不是，要想发数据，必须得通过网卡发送数据，应用程序是无法直接通过网卡发送数据的，它需要调用操作系统接口，也就是说，应用程序把发送的数据先写入到发送缓冲区(内存中的一片空间)，再由操作系统控制网卡把发送缓冲区的数据发送给服务端网卡 。</p><h5 id="3-recv原理剖析"><a href="#3-recv原理剖析" class="headerlink" title="3. recv原理剖析"></a>3. recv原理剖析</h5><p>recv是不是直接从客户端接收数据?<br>不是，应用软件是无法直接通过网卡接收数据的，它需要调用操作系统接口，由操作系统通过网卡接收数据，把接收的数据写入到接收缓冲区(内存中的一片空间），应用程序再从接收缓存区获取客户端发送的数据。</p><h5 id="send和recv原理剖析图"><a href="#send和recv原理剖析图" class="headerlink" title="send和recv原理剖析图"></a>send和recv原理剖析图</h5><p><img src="https://img-blog.csdnimg.cn/20210413202747304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明:</p><ul><li>发送数据是发送到发送缓冲区</li><li>接收数据是从接收缓冲区 获取</li></ul><h3 id="Python静态Web服务器"><a href="#Python静态Web服务器" class="headerlink" title="Python静态Web服务器"></a>Python静态Web服务器</h3><h4 id="搭建Python自带静态Web服务器"><a href="#搭建Python自带静态Web服务器" class="headerlink" title="搭建Python自带静态Web服务器"></a>搭建Python自带静态Web服务器</h4><h5 id="如何搭建Python自带的静态Web服务器"><a href="#如何搭建Python自带的静态Web服务器" class="headerlink" title="如何搭建Python自带的静态Web服务器"></a>如何搭建Python自带的静态Web服务器</h5><p>搭建Python自带的静态Web服务器使用 <code>python3 -m http.server 端口号</code>, 端口号不指定默认是8000<br>访问搭建的静态Web服务器 <code>IP:端口</code><br><img src="https://img-blog.csdnimg.cn/20210413203447540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="返回固定页面数据"><a href="#返回固定页面数据" class="headerlink" title="返回固定页面数据"></a>返回固定页面数据</h4><h5 id="开发自己的静态Web服务器"><a href="#开发自己的静态Web服务器" class="headerlink" title="开发自己的静态Web服务器"></a>开发自己的静态Web服务器</h5><p>实现步骤:</p><ul><li>编写一个TCP服务端程序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 循环接受客户端的连接请求</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn_socket, ip_port = tcp_server_socket.accept()</span><br></pre></td></tr></table></figure></li><li>获取浏览器发送的http请求报文数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_request_data = conn_socket.recv(<span class="number">4096</span>)</span><br></pre></td></tr></table></figure></li><li>读取固定页面数据，把页面数据组装成HTTP响应报文数据发送给浏览器。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">conn_socket.send(response_data)</span><br></pre></td></tr></table></figure></li></ul><p>HTTP响应报文数据发送完成以后，关闭服务于客户端的套接字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn_socket.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9000</span>))</span><br><span class="line">    <span class="comment"># 设置监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">        new_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">        recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">        recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(recv_client_content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/index.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="comment"># 读取文件数据</span></span><br><span class="line">            file_data = file.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应行</span></span><br><span class="line">        response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="comment"># 响应头</span></span><br><span class="line">        response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应体</span></span><br><span class="line">        response_body = file_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        new_socket.send(response_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">        new_socket.close()</span><br></pre></td></tr></table></figure><h4 id="根据不同映射返回固定页面数据"><a href="#根据不同映射返回固定页面数据" class="headerlink" title="根据不同映射返回固定页面数据"></a>根据不同映射返回固定页面数据</h4><p>目前的Web服务器，不管用户访问什么页面，返回的都是固定页面的数据，接下来需要根据用户的请求返回指定页面的数据<br><img src="https://img-blog.csdnimg.cn/20210413211835438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 返回指定页面数据的实现步骤:</p><ul><li>获取用户请求资源的路径<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request_list = client_request_conent.split(” ”,  maxsplit=<span class="number">2</span>)</span><br><span class="line"> request_path = request_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li>根据请求资源的路径，读取指定文件的数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">file_data = file.read()</span><br></pre></td></tr></table></figure></li><li>组装指定文件数据的响应报文，发送给浏览器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">conn_socket.send(response_data)</span><br></pre></td></tr></table></figure></li><li>判断请求的文件在服务端不存在，组装404状态的响应报文，发送给浏览器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 打开指定文件,代码省略...</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    conn_socket.send(<span class="number">404</span>响应报文数据)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9000</span>))</span><br><span class="line">    <span class="comment"># 设置监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">        new_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">        recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">            new_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">        recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">        <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">        request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求资源路径</span></span><br><span class="line">        request_path = request_list[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">        <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 动态打开指定文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                <span class="comment"># 读取文件数据</span></span><br><span class="line">                file_data = file.read()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="静态Web服务器-多任务版"><a href="#静态Web服务器-多任务版" class="headerlink" title="静态Web服务器-多任务版"></a>静态Web服务器-多任务版</h4><p>目前的Web服务器，不能支持多用户同时访问，只能一个一个的处理客户端的请求，那么如何开发多任务版的web服务器同时处理 多个客户端的请求?</p><p>可以使用多线程，比进程更加节省内存资源。</p><p>多任务版web服务器程序的实现步骤:</p><ol><li>当客户端和服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线程阻塞。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     conn_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">     <span class="comment"># 开辟子线程并执行对应的任务</span></span><br><span class="line">     sub_thread = threading.Thread(target=handle_client_request, args=(conn_socket,))</span><br></pre></td></tr></table></figure></li><li>把创建的子线程设置成为守护主线程，防止主线程无法退出。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开辟子线程并执行对应的任务</span></span><br><span class="line"> sub_thread = threading.Thread(target=handle_client_request, args=(conn_socket,))</span><br><span class="line"> sub_thread.setDaemon(<span class="literal">True</span>) <span class="comment"># 设置守护主线程</span></span><br><span class="line"> sub_thread.start()</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理客户端的请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">    <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">    recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">        new_socket.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">    recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">    <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">    request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取请求资源路径</span></span><br><span class="line">    request_path = request_list[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">    <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 动态打开指定文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="comment"># 读取文件数据</span></span><br><span class="line">            file_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">        <span class="comment"># 响应行</span></span><br><span class="line">        response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">        <span class="comment"># 响应头</span></span><br><span class="line">        response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file_data = file.read()</span><br><span class="line">        <span class="comment"># 响应体</span></span><br><span class="line">        response_body = file_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        new_socket.send(response_data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 响应行</span></span><br><span class="line">        response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="comment"># 响应头</span></span><br><span class="line">        response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应体</span></span><br><span class="line">        response_body = file_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        new_socket.send(response_data)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9000</span>))</span><br><span class="line">    <span class="comment"># 设置监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">        new_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(ip_port)</span><br><span class="line">        <span class="comment"># 当客户端和服务器建立连接程，创建子线程</span></span><br><span class="line">        sub_thread = threading.Thread(target=handle_client_request, args=(new_socket,))</span><br><span class="line">        <span class="comment"># 设置守护主线程</span></span><br><span class="line">        sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 启动子线程执行对应的任务</span></span><br><span class="line">        sub_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="静态Web服务器-多任务版-1"><a href="#静态Web服务器-多任务版-1" class="headerlink" title="静态Web服务器-多任务版"></a>静态Web服务器-多任务版</h4><h5 id="静态Web服务器的问题"><a href="#静态Web服务器的问题" class="headerlink" title="静态Web服务器的问题"></a>静态Web服务器的问题</h5><p>目前的Web服务器，不能支持多用户同时访问，只能一个一个的处理客户端的请求，那么如何开发多任务版的web服务器同时处理 多个客户端的请求?</p><ul><li>可以使用多线程，比进程更加节省内存资源。多任务版web服务器程序的实现步骤:</li></ul><ol><li>当客户端和服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线程阻塞。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">    <span class="comment"># 开辟子线程并执行对应的任务</span></span><br><span class="line">    sub_thread = threading.Thread(target=handle_client_request, args=(conn_socket,))</span><br></pre></td></tr></table></figure></li><li>把创建的<code>子线程设置成为守护主线程，防止主线程无法退出。</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理客户端的请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">    <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">    recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">        new_socket.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">    recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">    <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">    request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取请求资源路径</span></span><br><span class="line">    request_path = request_list[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">    <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 动态打开指定文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="comment"># 读取文件数据</span></span><br><span class="line">            file_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">        <span class="comment"># 响应行</span></span><br><span class="line">        response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">        <span class="comment"># 响应头</span></span><br><span class="line">        response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file_data = file.read()</span><br><span class="line">        <span class="comment"># 响应体</span></span><br><span class="line">        response_body = file_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        new_socket.send(response_data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 响应行</span></span><br><span class="line">        response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="comment"># 响应头</span></span><br><span class="line">        response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应体</span></span><br><span class="line">        response_body = file_data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接响应报文</span></span><br><span class="line">        response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">        <span class="comment"># 发送数据</span></span><br><span class="line">        new_socket.send(response_data)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">        new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 绑定端口号</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9000</span>))</span><br><span class="line">    <span class="comment"># 设置监听</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">        new_socket, ip_port = tcp_server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(ip_port)</span><br><span class="line">        <span class="comment"># 当客户端和服务器建立连接程，创建子线程</span></span><br><span class="line">        sub_thread = threading.Thread(target=handle_client_request, args=(new_socket,))</span><br><span class="line">        <span class="comment"># 设置守护主线程</span></span><br><span class="line">        sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 启动子线程执行对应的任务</span></span><br><span class="line">        sub_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="静态Web服务器-面向对象开发"><a href="#静态Web服务器-面向对象开发" class="headerlink" title="静态Web服务器-面向对象开发"></a>静态Web服务器-面向对象开发</h4>实现步骤:</li></ol><ul><li>把提供服务的Web服务器抽象成一个类(HTTPWebServer)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpWebServer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br></pre></td></tr></table></figure></li><li>提供Web服务器的初始化方法，在初始化方法里面创建socket对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"> <span class="comment"># 初始化服务端套接字，设置监听，代码省略..</span></span><br></pre></td></tr></table></figure></li><li>提供一个开启Web服务器的方法，让Web服务器处理客户端请求操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    service_client_socket, ip_port = self.tcp_server_socket.accept()</span><br><span class="line">    <span class="comment"># 连接建立成功，开辟子线程处理客户端的请求</span></span><br><span class="line">    sub_thread = threading.Thread(target=self.handle_client_request, args=(service_client_socket,))</span><br><span class="line">    sub_thread.start()</span><br></pre></td></tr></table></figure><h5 id="以面向对象的方式开发静态Web服务器"><a href="#以面向对象的方式开发静态Web服务器" class="headerlink" title="以面向对象的方式开发静态Web服务器"></a>以面向对象的方式开发静态Web服务器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义web服务器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpWebServer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">        tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">        tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 绑定端口号</span></span><br><span class="line">        tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, <span class="number">9000</span>))</span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="comment"># 保存创建成功的服务器套接字</span></span><br><span class="line">        self.tcp_server_socket = tcp_server_socket</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理客户端的请求  定义为静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">        <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">        recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">            new_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">        recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">        <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">        request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求资源路径</span></span><br><span class="line">        request_path = request_list[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">        <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 动态打开指定文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                <span class="comment"># 读取文件数据</span></span><br><span class="line">                file_data = file.read()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动web服务器进行工作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">            new_socket, ip_port = self.tcp_server_socket.accept()</span><br><span class="line">            <span class="comment"># 当客户端和服务器建立连接程，创建子线程</span></span><br><span class="line">            sub_thread = threading.Thread(target=self.handle_client_request, args=(new_socket,))</span><br><span class="line">            <span class="comment"># 设置守护主线程</span></span><br><span class="line">            sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 启动子线程执行对应的任务</span></span><br><span class="line">            sub_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建web服务器对象</span></span><br><span class="line">    web_server = HttpWebServer()</span><br><span class="line">    <span class="comment"># 启动web服务器进行工作</span></span><br><span class="line">    web_server.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="命令行启动动态绑定端口号"><a href="#命令行启动动态绑定端口号" class="headerlink" title="命令行启动动态绑定端口号"></a>命令行启动动态绑定端口号</h5></li></ul><ol><li>开发命令行启动动态绑定端口号的静态web服务器<br>实现步骤:</li></ol><ul><li>获取执行python程序的终端命令行参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.argv</span><br></pre></td></tr></table></figure></li><li>判断参数的类型，设置端口号必须是整型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> sys.argv[<span class="number">1</span>].isdigit():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;启动命令如下: python3 xxx.py 9090&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li>给Web服务器类的初始化方法添加一个端口号参数，用于绑定端口号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, port</span>):</span></span><br><span class="line">    self.tcp_server_socket.bind((“”, port))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义web服务器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpWebServer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, port</span>):</span></span><br><span class="line">        <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">        tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">        tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 绑定端口号</span></span><br><span class="line">        tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, port))</span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        <span class="comment"># 保存创建成功的服务器套接字</span></span><br><span class="line">        self.tcp_server_socket = tcp_server_socket</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理客户端的请求</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client_request</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">        <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">        recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">            new_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">        recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">        <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">        request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求资源路径</span></span><br><span class="line">        request_path = request_list[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">        <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 动态打开指定文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                <span class="comment"># 读取文件数据</span></span><br><span class="line">                file_data = file.read()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file_data = file.read()</span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 响应体</span></span><br><span class="line">            response_body = file_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接响应报文</span></span><br><span class="line">            response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动web服务器进行工作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">            new_socket, ip_port = self.tcp_server_socket.accept()</span><br><span class="line">            <span class="comment"># 当客户端和服务器建立连接程，创建子线程</span></span><br><span class="line">            sub_thread = threading.Thread(target=self.handle_client_request, args=(new_socket,))</span><br><span class="line">            <span class="comment"># 设置守护主线程</span></span><br><span class="line">            sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 启动子线程执行对应的任务</span></span><br><span class="line">            sub_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sys.argv)</span><br><span class="line">    <span class="comment"># 判断命令行参数是否等于2,</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 8000&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断字符串是否都是数字组成</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sys.argv[<span class="number">1</span>].isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 8000&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取终端命令行参数</span></span><br><span class="line">    port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 创建web服务器对象</span></span><br><span class="line">    web_server = HttpWebServer(port)</span><br><span class="line">    <span class="comment"># 启动web服务器进行工作</span></span><br><span class="line">    web_server.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Python程序操作MySQL数据库"><a href="#Python程序操作MySQL数据库" class="headerlink" title="Python程序操作MySQL数据库"></a>Python程序操作MySQL数据库</h3><p>安装pymysql第三方包:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@liruilong ~]<span class="comment"># yum  -y install pymysql</span></span><br><span class="line">[root@liruilong ~]<span class="comment"># ls</span></span><br></pre></td></tr></table></figure><h4 id="pymysql的使用"><a href="#pymysql的使用" class="headerlink" title="pymysql的使用:"></a>pymysql的使用:</h4><ol><li>导入 pymysql 包 : import pymysql</li><li>创建连接对象:调用pymysql模块中的connect()函数来创建连接对象<br>conn=connect(参数列表)</li></ol><ul><li>参数host：连接的mysql主机，如果本机是’localhost’</li><li>参数port：连接的mysql主机的端口，默认是3306</li><li>参数user：连接的用户名</li><li>参数password：连接的密码</li><li>参数database：数据库的名称</li><li>参数charset：通信采用的编码方式，推荐使用utf8<h4 id="连接对象操作说明"><a href="#连接对象操作说明" class="headerlink" title="连接对象操作说明:"></a>连接对象操作说明:</h4></li></ul><ul><li><p>关闭连接 conn.close()</p></li><li><p>提交数据 conn.commit()</p></li><li><p>撤销数据 conn.rollback()</p><h4 id="获取游标对象："><a href="#获取游标对象：" class="headerlink" title="获取游标对象："></a>获取游标对象：</h4><p>获取游标对象的目标就是要执行sql语句，完成对数据库的增、删、改、查操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用连接对象的cursor()方法获取游标对象   </span></span><br><span class="line"> cur =conn.cursor()</span><br></pre></td></tr></table></figure><p>游标操作说明:</p></li><li><p>使用游标执行SQL语句: execute(operation [parameters ]) 执行SQL语句，返回受影响的行数，主要用于执行insert、update、delete、select等语句</p></li><li><p>获取查询结果集中的一条数据:cur.fetchone()返回一个元组, 如 (1,’张三’)</p></li><li><p>获取查询结果集中的所有数据: cur.fetchall()返回一个元组,如((1,’张三’),(2,’李四’))</p></li><li><p>关闭游标: cur.close(),表示和数据库操作完成</p><h4 id="pymysql完成数据的查询操作"><a href="#pymysql完成数据的查询操作" class="headerlink" title="pymysql完成数据的查询操作"></a>pymysql完成数据的查询操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;mysql&#x27;</span>,database=<span class="string">&#x27;python&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 SQL 语句</span></span><br><span class="line">sql = <span class="string">&quot;select * from students;&quot;</span></span><br><span class="line"><span class="comment"># 执行 SQL 语句 返回值就是 SQL 语句在执行过程中影响的行数</span></span><br><span class="line">row_count = cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SQL 语句执行影响的行数%d&quot;</span> % row_count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出结果集中一行数据,　例如:(1, &#x27;张三&#x27;)</span></span><br><span class="line"><span class="comment"># print(cursor.fetchone())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出结果集中的所有数据, 例如:((1, &#x27;张三&#x27;), (2, &#x27;李四&#x27;), (3, &#x27;王五&#x27;))</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="pymysql完成对数据的增删改"><a href="#pymysql完成对数据的增删改" class="headerlink" title="pymysql完成对数据的增删改"></a>pymysql完成对数据的增删改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建连接对象</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;mysql&#x27;</span>,database=<span class="string">&#x27;python&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 添加 SQL 语句</span></span><br><span class="line">    <span class="comment"># sql = &quot;insert into students(name) values(&#x27;刘璐&#x27;), (&#x27;王美丽&#x27;);&quot;</span></span><br><span class="line">    <span class="comment"># 删除 SQ L语句</span></span><br><span class="line">    <span class="comment"># sql = &quot;delete from students where id = 5;&quot;</span></span><br><span class="line">    <span class="comment"># 修改 SQL 语句</span></span><br><span class="line">    sql = <span class="string">&quot;update students set name = &#x27;王铁蛋&#x27; where id = 6;&quot;</span></span><br><span class="line">    <span class="comment"># 执行 SQL 语句</span></span><br><span class="line">    row_count = cursor.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SQL 语句执行影响的行数%d&quot;</span> % row_count)</span><br><span class="line">    <span class="comment"># 提交数据到数据库</span></span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 回滚数据， 即撤销刚刚的SQL语句操作</span></span><br><span class="line">    conn.rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>conn.commit() 表示将修改操作提交到数据库</p></li><li><p>conn.rollback() 表示回滚数据</p><h5 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h5><p>什么是SQL注入?用户提交带有恶意的数据与SQL语句进行字符串方式的拼接，从而影响了SQL语句的语义，最终产生数据泄露的现象。</p></li></ul><p><code>·如何防止SQL注入?SQL语句参数化</code></p><p>SQL语言中的参数使用%s来占位，此处不是python中的字符串格式化操作,将SQL语句中%s占位所需要的参数存在一个列表中，把参数列表传递给execute方法中第二个参数<br>防止SQL注入的示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> connect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    find_name = <span class="built_in">input</span>(<span class="string">&quot;请输入物品名称：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Connection连接</span></span><br><span class="line">    conn = connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;mysql&#x27;</span>,database=<span class="string">&#x27;jing_dong&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获得Cursor对象</span></span><br><span class="line">    cs1 = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 非安全的方式</span></span><br><span class="line">    <span class="comment"># 输入 &#x27; or 1 = 1 or &#x27;   (单引号也要输入)</span></span><br><span class="line">    <span class="comment"># sql = &quot;select * from goods where name=&#x27;%s&#x27;&quot; % find_name</span></span><br><span class="line">    <span class="comment"># print(&quot;&quot;&quot;sql===&gt;%s&lt;====&quot;&quot;&quot; % sql)</span></span><br><span class="line">    <span class="comment"># # 执行select语句，并返回受影响的行数：查询所有数据</span></span><br><span class="line">    <span class="comment"># count = cs1.execute(sql)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全的方式</span></span><br><span class="line">    <span class="comment"># 构造参数列表</span></span><br><span class="line">    params = [find_name]</span><br><span class="line">    <span class="comment"># 执行select语句，并返回受影响的行数：查询所有数据</span></span><br><span class="line">    count = cs1.execute(<span class="string">&quot;select * from goods where name=%s&quot;</span>, params)</span><br><span class="line">    <span class="comment"># 注意：</span></span><br><span class="line">    <span class="comment"># 如果要是有多个参数，需要进行参数化</span></span><br><span class="line">    <span class="comment"># 那么params = [数值1, 数值2....]，此时sql语句中有多个%s即可</span></span><br><span class="line">    <span class="comment"># %s 不需要带引号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印受影响的行数</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="comment"># 获取查询的结果</span></span><br><span class="line">    <span class="comment"># result = cs1.fetchone()</span></span><br><span class="line">    result = cs1.fetchall()</span><br><span class="line">    <span class="comment"># 打印查询的结果</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="comment"># 关闭Cursor对象</span></span><br><span class="line">    cs1.close()</span><br><span class="line">    <span class="comment"># 关闭Connection对象</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="事务的介绍"><a href="#事务的介绍" class="headerlink" title="事务的介绍"></a>事务的介绍</h4><p>事务就是用户定义的一系列执行SQL语句的操作, 这些操作要么完全地执行，要么完全地都不执行， 它是一个不可分割的工作执行单元。</p><p>事务的使用场景:在日常生活中，有时我们需要进行银行转账，这个银行转账操作背后就是需要执行多个SQL语句，假如这些SQL执行到一半突然停电了，那么就会导致这个功能只完成了一半，这种情况是不允许出现，要想解决这个问题就需要通过事务来完成。</p><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li><code>原子性Atomicity</code>:一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</li><li><code>一致性Consistency</code>:数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在转账过程中系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）</li><li><code>隔离性Isolation</code>:通常来说，一个事务所做的修改操作在提交事务之前，对于其他事务来说是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）</li><li><code>持久性Durability</code>:一旦事务提交，则其所做的修改会永久保存到数据库。</li></ul><h5 id="事务的使用："><a href="#事务的使用：" class="headerlink" title="事务的使用："></a>事务的使用：</h5><ul><li>在使用事务之前，先要确保表的存储引擎是 InnoDB 类型, 只有这个类型才可以使用事务，MySQL数据库中表的存储引擎默认是 InnoDB 类型。</li><li>表的存储引擎说明:表的存储引擎就是提供存储数据一种机制，不同表的存储引擎提供不同的存储机制。</li><li>开启事务后执行修改命令，变更数据会保存到MySQL服务端的缓存文件中，而不维护到物理表中</li><li>MySQL数据库默认采用自动提交(autocommit)模式，如果没有显示的开启一个事务,那么每条sql语句都会被当作一个事务执行提交的操作当设置autocommit=0就是取消了自动提交事务模式，直到显示的执行commit和rollback表示该事务结束。</li><li>set autocommit = 0 表示取消自动提交事务模式，需要手动执行commit完成事务的提交</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="索引的介绍"><a href="#索引的介绍" class="headerlink" title="索引的介绍"></a>索引的介绍</h5><p>索引在MySQL中也叫做“键”，它是一个特殊的文件，它保存着数据表里所有记录的位置信息，更通俗的来说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度。</p><h5 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景:"></a>应用场景:</h5><p>当数据库中数据量很大时，查找数据会变得很慢，我们就可以通过索引来提高数据库的查询效率。</p><h5 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h5><ul><li>查看表中已有索引: show index from 表名;</li><li>主键列会自动创建索引</li><li>索引名不指定，默认使用字段名<h5 id="验证索引性能操作："><a href="#验证索引性能操作：" class="headerlink" title="验证索引性能操作："></a>验证索引性能操作：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启运行时间监测：</span></span><br><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 查找第1万条数据ha-99999</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_index <span class="keyword">where</span> title<span class="operator">=</span><span class="string">&#x27;ha-99999&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看执行的时间：</span></span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="comment">-- 给title字段创建索引：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_index <span class="keyword">add</span> index (title);</span><br><span class="line"><span class="comment">-- 再次执行查询语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_index <span class="keyword">where</span> title<span class="operator">=</span><span class="string">&#x27;ha-99999&#x27;</span>;</span><br><span class="line"><span class="comment">-- 再次查看执行的时间</span></span><br><span class="line"><span class="keyword">show</span> profiles;</span><br></pre></td></tr></table></figure><h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a><code>联合索引</code></h5>联合索引又叫复合索引，即一个索引覆盖表中两个或者多个字段，一般用在多个字段一起查询的时候。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建teacher表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建联合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index (name,age);</span><br></pre></td></tr></table></figure>联合索引的好处:减少磁盘空间开销，因为每创建一个索引，其实就是创建了一个索引文件，那么会增加磁盘空间的开销。</li></ul><p><code>联合索引的最左原则</code>在使用联合索引的时候，我们要遵守一个最左原则,即index(name,age)支持 name 、name 和 age 组合查询,而不支持单独 age 查询，因为没有用到创建的联合索引。<br>最左原则示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 下面的查询使用到了联合索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span> <span class="comment">-- 这里使用了联合索引的name部分</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="comment">-- 这里完整的使用联合索引，包括 name 和 age 部分 </span></span><br><span class="line"><span class="comment">-- 下面的查询没有使用到联合索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age<span class="operator">=</span><span class="number">10</span> <span class="comment">-- 因为联合索引里面没有这个组合，只有 name | name age 这两种组合</span></span><br></pre></td></tr></table></figure><p><code>在使用联合索引的查询数据时候一定要保证联合索引的最左侧字段出现在查询条件里面，否则联合索引失效</code></p><h5 id="MySQL中索引的优点和缺点和使用原则"><a href="#MySQL中索引的优点和缺点和使用原则" class="headerlink" title="MySQL中索引的优点和缺点和使用原则"></a>MySQL中索引的优点和缺点和使用原则</h5><ul><li>优点：. ==加快数据的查询速度==</li><li>缺点：. ==创建索引会耗费时间和占用磁盘空间，并且随着数据量的增加所耗费的时间也会增加==</li></ul><p><code>使用原则：</code></p><ul><li>通过优缺点对比，不是索引越多越好，而是需要自己合理的使用。</li><li>对经常<code>更新的表就避免对其进行过多索引的创建</code>，对经常用于<code>查询的字段应该创建索引</code>，</li><li>数据量小的表最好不要使用索引，因为由于数据较少，可能<code>查询全部数据花费的时间比遍历索引的时间还要短</code>，索引就可能不会产生优化效+ 果。</li><li><code>在一字段上相同值比较多不要建立索引</code>，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，<code>在一个字段上不同值较多可是建立索引。</code></li></ul><h3 id="闭包-amp-装饰器"><a href="#闭包-amp-装饰器" class="headerlink" title="闭包&amp;装饰器"></a>闭包&amp;装饰器</h3><h4 id="闭包的介绍"><a href="#闭包的介绍" class="headerlink" title="闭包的介绍:"></a>闭包的介绍:</h4><p>我们前面已经学过了函数，我们知道当函数调用完，函数内定义的变量都销毁了，但是我们有时候需要保存函数内的这个变量，每次在这个变量的基础上完成一些列的操作，比如: 每次在这个变量的基础上和其它数字进行求和计算，那怎么办呢?我们就可以通过咱们今天学习的闭包来解决这个需求。<br><code>闭包的定义:</code>在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数称为闭包。</p><h5 id="闭包的构成条件"><a href="#闭包的构成条件" class="headerlink" title="闭包的构成条件"></a>闭包的构成条件</h5><p>通过闭包的定义，我们可以得知闭包的形成条件:</p><ul><li>在函数嵌套(函数里面再定义函数)的前提下</li><li>内部函数使用了外部函数的变量(还包括外部函数的参数)</li><li>外部函数返回了内部函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个外部函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_out</span>(<span class="params">num1</span>):</span></span><br><span class="line">    <span class="comment"># 定义一个内部函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_inner</span>(<span class="params">num2</span>):</span></span><br><span class="line">        <span class="comment"># 内部函数使用了外部函数的变量(num1)</span></span><br><span class="line">        result = num1 + num2</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结果是:&quot;</span>, result)</span><br><span class="line">    <span class="comment"># 外部函数返回了内部函数，这里返回的内部函数就是闭包</span></span><br><span class="line">    <span class="keyword">return</span> func_inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建闭包实例    </span></span><br><span class="line">f = func_out(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 执行闭包</span></span><br><span class="line">f(<span class="number">2</span>)</span><br><span class="line">f(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>结果是: 3<br>结果是: 4</p></blockquote></li></ul><p>闭包执行结果的说明:通过上面的输出结果可以看出闭包保存了外部函数内的变量num1，每次执行闭包都是在num1 = 1 基础上进行计算。</p><h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><p>闭包可以保存外部函数内的变量，不会随着外部函数调用完而销毁。<br><code>注意点:</code>由于闭包引用了外部函数的变量，则外部函数的变量没有及时释放，消耗内存。</p><h4 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h4><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><blockquote><p>需求: 根据配置信息使用闭包实现不同人的对话信息，例如对话:<br>张三: 到北京了吗? 李四: 已经到了，放心吧。</p></blockquote><ul><li>定义外部函数接收不同的配置信息参数，参数是人名</li><li>定义内部函数接收对话信息参数</li><li>在内部函数里面把配置信息和对话信息进行拼接输出<br>功能代码的实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">config_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 内部函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_info</span>(<span class="params">info</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(name + <span class="string">&quot;: &quot;</span> + info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> say_info</span><br><span class="line"></span><br><span class="line">tom = config_name(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"></span><br><span class="line">tom(<span class="string">&quot;你好!&quot;</span>)</span><br><span class="line">tom(<span class="string">&quot;你好, 在吗?&quot;</span>)</span><br><span class="line"></span><br><span class="line">jerry = config_name(<span class="string">&quot;jerry&quot;</span>)</span><br><span class="line"></span><br><span class="line">jerry(<span class="string">&quot;不在, 不和玩!&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:<br>Tom: 你好!<br>Tom: 你好, 在吗?<br>jerry: 不在, 不和玩!</p></blockquote></li></ul><p>闭包案例说明:<code>闭包还可以提高代码的可重用性，不需要再手动定义额外的功能函数。</code></p><h4 id="修改闭包内使用的外部变量"><a href="#修改闭包内使用的外部变量" class="headerlink" title="修改闭包内使用的外部变量"></a>修改闭包内使用的外部变量</h4><p>修改闭包内使用的外部变量的错误示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个外部函数</span><br><span class="line">def func_out(num1):</span><br><span class="line"></span><br><span class="line">    # 定义一个内部函数</span><br><span class="line">    def func_inner(num2):</span><br><span class="line">        # 这里本意想要修改外部num1的值，实际上是在内部函数定义了一个局部变量num1</span><br><span class="line">        num1 = 10</span><br><span class="line">        # 内部函数使用了外部函数的变量(num1)</span><br><span class="line">        result = num1 + num2</span><br><span class="line">        print(&quot;结果是:&quot;, result)</span><br><span class="line"></span><br><span class="line">    print(num1)</span><br><span class="line">    func_inner(1)</span><br><span class="line">    print(num1)</span><br><span class="line"></span><br><span class="line">    # 外部函数返回了内部函数，这里返回的内部函数就是闭包</span><br><span class="line">    return func_inner</span><br><span class="line"></span><br><span class="line"># 创建闭包实例</span><br><span class="line">f = func_out(1)</span><br><span class="line"># 执行闭包</span><br><span class="line">f(2)</span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><ul><li><p>装饰器的定义:<code>就是给已有函数增加额外功能的函数，它本质上就是一个闭包函数。</code>类似于AOP环绕通知的逆向应用<br>装饰器的功能特点:</p></li><li><p>不修改已有函数的源代码</p></li><li><p>不修改已有函数的调用方式</p></li><li><p>给已有函数增加额外的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个登录验证的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请先登录....&quot;</span>)</span><br><span class="line">        fn()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发表评论&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器来装饰函数</span></span><br><span class="line">comment = check(comment)</span><br><span class="line">comment()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器的基本雏形</span></span><br><span class="line"><span class="comment"># def decorator(fn): # fn:目标函数.</span></span><br><span class="line"><span class="comment">#     def inner():</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;执行函数之前&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         fn() # 执行被装饰的函数</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;执行函数之后&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     return inner</span></span><br></pre></td></tr></table></figure><blockquote><p>执行结果:<br>请先登录….<br>发表评论</p></blockquote></li><li><p>闭包函数有且<code>只有一个参数，必须是函数类型</code>，这样定义的函数才是<code>装饰器</code>。</p></li><li><p>写代码要遵循<code>开放封闭原则</code>，<code>它规定已经实现的功能代码不允许被修改，但可以被扩展</code>。</p></li></ul><h4 id="装饰器的语法糖写法"><a href="#装饰器的语法糖写法" class="headerlink" title="装饰器的语法糖写法"></a>装饰器的语法糖写法</h4><p>如果有多个函数都需要添加登录验证的功能，每次都需要编写func = check(func)这样代码对已有函数进行装饰，这种做法还是比较麻烦。</p><p>Python给提供了一个装饰函数更加简单的写法，那就是语法糖，语法糖的书写格式是: @装饰器名字，通过语法糖的方式也可以完成对已有函数的装饰.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个登录验证的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;装饰器函数执行了&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请先登录....&quot;</span>)</span><br><span class="line">        fn()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用语法糖方式来装饰函数</span></span><br><span class="line"><span class="meta">@check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发表评论&quot;</span>)</span><br><span class="line"></span><br><span class="line">comment()</span><br></pre></td></tr></table></figure><h5 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h5><p>装饰器的使用场景</p><ul><li>函数执行时间的统计</li><li>输出日志信息</li></ul><p>装饰器实现已有函数执行时间的统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        begin = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行花费%f&quot;</span> % (end-begin))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@get_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">func1()</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>…<br>99995<br>99996<br>99997<br>99998<br>99999<br>函数执行花费0.329066</p><h5 id="通用装饰器的使用"><a href="#通用装饰器的使用" class="headerlink" title="通用装饰器的使用"></a>通用装饰器的使用</h5><h6 id="装饰带有参数的函数"><a href="#装饰带有参数的函数" class="headerlink" title="装饰带有参数的函数"></a>装饰带有参数的函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加输出日志的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--正在努力计算--&quot;</span>)</span><br><span class="line">        fn(num1, num2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器装饰函数</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>–正在努力计算–<br>3</p></blockquote><h6 id="装饰带有返回值的函数"><a href="#装饰带有返回值的函数" class="headerlink" title="装饰带有返回值的函数"></a>装饰带有返回值的函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加输出日志的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--正在努力计算--&quot;</span>)</span><br><span class="line">        result = fn(num1, num2)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器装饰函数</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>–正在努力计算–<br>3</p></blockquote><h6 id="装饰带有不定长参数的函数"><a href="#装饰带有不定长参数的函数" class="headerlink" title="装饰带有不定长参数的函数"></a>装饰带有不定长参数的函数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加输出日志的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--正在努力计算--&quot;</span>)</span><br><span class="line">        fn(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用语法糖装饰函数</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> args:</span><br><span class="line">        result += value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        result += value</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">sum_num(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>–正在努力计算–<br>13</p></blockquote><h6 id="通用装饰器"><a href="#通用装饰器" class="headerlink" title="通用装饰器"></a>通用装饰器</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加输出日志的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--正在努力计算--&quot;</span>)</span><br><span class="line">        result = fn(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用语法糖装饰函数</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> args:</span><br><span class="line">        result += value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        result += value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtraction</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a - b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">subtraction(<span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>–正在努力计算–<br>13<br>–正在努力计算–<br>2</p></blockquote><h6 id="多个装饰器的使用"><a href="#多个装饰器的使用" class="headerlink" title="多个装饰器的使用"></a>多个装饰器的使用</h6><p><code>多个装饰器的装饰过程是: 离函数最近的装饰器先装饰，然后外面的装饰器再进行装饰，由内到外的装饰过程</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_div</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;对被装饰的函数的返回值 div标签&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;div&gt;&quot;</span> + func() + <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_p</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;对被装饰的函数的返回值 p标签&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;&quot;</span> + func() + <span class="string">&quot;&lt;/p&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰过程: </span></span><br><span class="line"><span class="comment"># 1 content = make_p(content) </span></span><br><span class="line"><span class="comment"># 2 content = make_div(content)</span></span><br><span class="line"><span class="comment"># content = make_div(make_p(content))</span></span><br><span class="line"><span class="meta">@make_div</span></span><br><span class="line"><span class="meta">@make_p</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">content</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;人生苦短&quot;</span></span><br><span class="line"></span><br><span class="line">result = content()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h6 id="带有参数的装饰器"><a href="#带有参数的装饰器" class="headerlink" title="带有参数的装饰器"></a>带有参数的装饰器</h6><p>带有参数的装饰器就是使用<code>装饰器装饰函数的时候可以传入指定参数，语法格式: @装饰器(参数,...)</code><br><code>错误写法</code>:==装饰器只能接收一个参数，并且还是函数类型。==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">fn, flag</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--正在努力加法计算--&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--正在努力减法计算--&quot;</span>)</span><br><span class="line">        result = fn(num1, num2)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator(<span class="params"><span class="string">&#x27;+&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>Traceback (most recent call last):<br>  File “/home/python/Desktop/test/hho.py”, line 12, in <module><br>    @decorator(‘+’)<br>TypeError: decorator() missing 1 required positional argument: ‘flag’</p></blockquote><p><code>正确写法</code>:==在装饰器外面再包裹上一个函数，让最外面的函数接收参数，返回的是装饰器，因为@符号后面必须是装饰器实例。==<br>在装饰器外面再包裹上一个函数，让最外面的函数接收参数，返回的是装饰器，<code>因为@符号后面必须是装饰器实例。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加输出日志的功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span>(<span class="params">flag</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">fn</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;--正在努力加法计算--&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> flag == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;--正在努力减法计算--&quot;</span>)</span><br><span class="line">            result = fn(num1, num2)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回装饰器</span></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器装饰函数</span></span><br><span class="line"><span class="meta">@logging(<span class="params"><span class="string">&quot;+&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(<span class="params"><span class="string">&quot;-&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a - b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = sub(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="类装饰器的使用"><a href="#类装饰器的使用" class="headerlink" title="类装饰器的使用"></a>类装饰器的使用</h5><p>装饰器还有<code>一种特殊的用法就是类装饰器，就是通过定义一个类来装饰函数。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, fn</span>):</span></span><br><span class="line">        <span class="comment"># 初始化操作在此完成</span></span><br><span class="line">        self.__fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现__call__方法，表示对象是一个可调用对象，可以像调用函数一样进行调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 添加装饰功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请先登陆...&quot;</span>)</span><br><span class="line">        self.__fn()</span><br><span class="line"></span><br><span class="line"><span class="meta">@Check</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发表评论&quot;</span>)</span><br><span class="line">comment()</span><br></pre></td></tr></table></figure><ul><li>@Check 等价于 comment = Check(comment), 所以需要提供一个init方法，并多增加一个fn参数。</li><li>要想类的实例对象能够像函数一样调用，需要在类里面使用call方法，<code>把类的实例变成可调用对象(callable)，也就是说可以像调用函数一样进行调用。</code><br><code>在call方法里进行对fn函数的装饰，可以添加额外的功能。</code><blockquote><p>执行结果:<br>请先登陆…<br>发表评论</p></blockquote></li></ul><h3 id="mini-web框架"><a href="#mini-web框架" class="headerlink" title="mini-web框架"></a>mini-web框架</h3><h4 id="web框架概述"><a href="#web框架概述" class="headerlink" title="web框架概述"></a>web框架概述</h4><p>web框架和web服务器的关系介绍：</p><p>前面已经学习过web服务器, 我们知道web服务器主要是接收用户的http请求,根据用户的请求返回不同的资源数据，但是之前我们开发的是静态web服务器，返回的都是静态资源数据，假如我们想要web服务器返回动态资源那么该如何进行处理呢？</p><p>使用web框架专门负责处理用户的动态资源请求，这个web框架其实就是一个为web服务器提供服务的应用程序，简称web框架。</p><p>关系说明:</p><ul><li><p>web服务器接收浏览器发起的请求，如果是动态资源请求找web框架来处理</p></li><li><p>web框架负责处理浏览器的动态资源请求，把处理的结果发生给web服务器</p></li><li><p>web服务器再把响应结果发生给浏览器</p></li><li><p>静态资源:不需要经常变化的资源，这种资源web服务器可以提前准备好，比如: png/jpg/css/js等文件。</p></li><li><p>动态资源:和静态资源相反, 这种资源会经常变化，比如: 我们在京东浏览商品时经常会根据条件进行筛选，选择不同条件, 浏览的商品就不同，这种资源web服务器无法提前准备好，需要web框架来帮web服务器进行准备，在这里web服务器可以把.html的资源请求认为是动态资源请求交由web框架进行处理。</p></li></ul><ul><li>WSGI协议:Web服务器网关接口(Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。它是web服务器和web框架之间进行协同工作的一个规则，<code>WSGI协议规定web服务器把动态资源的请求信息传给web框架处理，web框架把处理好的结果返回给web服务器。</code></li></ul><h4 id="框架程序开发"><a href="#框架程序开发" class="headerlink" title="框架程序开发"></a>框架程序开发</h4><h5 id="框架职责介绍"><a href="#框架职责介绍" class="headerlink" title="框架职责介绍"></a>框架职责介绍</h5><ul><li>接收web服务器的动态资源请求，给web服务器提供处理动态资源请求的服务。<h5 id="动态资源判断"><a href="#动态资源判断" class="headerlink" title="动态资源判断"></a>动态资源判断</h5>根据请求资源路径的后缀名进行判断</li><li>如果请求资源路径的后缀名是.html则是动态资源请求, 让web框架程序进行处理。</li><li>否则是静态资源请求，让web服务器程序进行处理。</li></ul><p><code>web服务器程序(web.py)代码:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> framework</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义web服务器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpWebServer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, port</span>):</span></span><br><span class="line">        <span class="comment"># 创建tcp服务端套接字</span></span><br><span class="line">        tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 设置端口号复用, 程序退出端口立即释放</span></span><br><span class="line">        tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 绑定端口号</span></span><br><span class="line">        tcp_server_socket.bind((<span class="string">&quot;&quot;</span>, port))</span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">        self.tcp_server_socket = tcp_server_socket</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理客户的请求,申明静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_client_quest</span>(<span class="params">new_socket</span>):</span></span><br><span class="line">        <span class="comment"># 代码执行到此，说明连接建立成功</span></span><br><span class="line">        recv_client_data = new_socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(recv_client_data) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器了&quot;</span>)</span><br><span class="line">            <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">            new_socket.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对二进制数据进行解码</span></span><br><span class="line">        recv_client_content = recv_client_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(recv_client_content)</span><br><span class="line">        <span class="comment"># 根据指定字符串进行分割， 最大分割次数指定2</span></span><br><span class="line">        request_list = recv_client_content.split(<span class="string">&quot; &quot;</span>, maxsplit=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求资源路径</span></span><br><span class="line">        request_path = request_list[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(request_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断请求的是否是根目录，如果条件成立，指定首页数据返回</span></span><br><span class="line">        <span class="keyword">if</span> request_path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            request_path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否是动态资源请求</span></span><br><span class="line">        <span class="keyword">if</span> request_path.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;这里是动态资源请求，把请求信息交给框架处理&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 字典存储用户的请求信息</span></span><br><span class="line">            env = &#123;</span><br><span class="line">                <span class="string">&quot;request_path&quot;</span>: request_path</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取处理结果</span></span><br><span class="line">            status, headers, response_body = framework.handle_request(env)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用框架处理的数据拼接响应报文</span></span><br><span class="line">            <span class="comment"># 响应行</span></span><br><span class="line">            response_line = <span class="string">&quot;HTTP/1.1 %s\r\n&quot;</span> % status</span><br><span class="line">            <span class="comment"># 响应头</span></span><br><span class="line">            response_header = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 遍历头部信息</span></span><br><span class="line">            <span class="keyword">for</span> header <span class="keyword">in</span> headers:</span><br><span class="line">                <span class="comment"># 拼接多个响应头</span></span><br><span class="line">                response_header += <span class="string">&quot;%s: %s\r\n&quot;</span> % header</span><br><span class="line">            response_data = (response_line +</span><br><span class="line">                             response_header +</span><br><span class="line">                             <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                             response_body).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            <span class="comment"># 发送数据</span></span><br><span class="line">            new_socket.send(response_data)</span><br><span class="line">            <span class="comment"># 关闭socket</span></span><br><span class="line">            new_socket.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;这里是静态资源请求&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 动态打开指定文件</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static&quot;</span> + request_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    <span class="comment"># 读取文件数据</span></span><br><span class="line">                    file_data = file.read()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 请求资源不存在，返回404数据</span></span><br><span class="line">                <span class="comment"># 响应行</span></span><br><span class="line">                response_line = <span class="string">&quot;HTTP/1.1 404 Not Found\r\n&quot;</span></span><br><span class="line">                <span class="comment"># 响应头</span></span><br><span class="line">                response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;static/error.html&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file_data = file.read()</span><br><span class="line">                <span class="comment"># 响应体</span></span><br><span class="line">                response_body = file_data</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 拼接响应报文</span></span><br><span class="line">                response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">                <span class="comment"># 发送数据</span></span><br><span class="line">                new_socket.send(response_data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 响应行</span></span><br><span class="line">                response_line = <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">                <span class="comment"># 响应头</span></span><br><span class="line">                response_header = <span class="string">&quot;Server: PWS1.0\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 响应体</span></span><br><span class="line">                response_body = file_data</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 拼接响应报文</span></span><br><span class="line">                response_data = (response_line + response_header + <span class="string">&quot;\r\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>) + response_body</span><br><span class="line">                <span class="comment"># 发送数据</span></span><br><span class="line">                new_socket.send(response_data)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># 关闭服务与客户端的套接字</span></span><br><span class="line">                new_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 等待接受客户端的连接请求</span></span><br><span class="line">            new_socket, ip_port = self.tcp_server_socket.accept()</span><br><span class="line">            sub_thread = threading.Thread(target=self.handle_client_quest, args=(new_socket,))</span><br><span class="line">            <span class="comment"># 设置守护线程</span></span><br><span class="line">            sub_thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            sub_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取命令行参数判断长度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 9000&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断端口号是否是数字</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sys.argv[<span class="number">1</span>].isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 9000&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要转成int类型</span></span><br><span class="line">    port = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建web服务器</span></span><br><span class="line">    web_server = HttpWebServer(port)</span><br><span class="line">    <span class="comment"># 启动web服务器</span></span><br><span class="line">    web_server.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="处理客户端的动态资源请求"><a href="#处理客户端的动态资源请求" class="headerlink" title="处理客户端的动态资源请求"></a>处理客户端的动态资源请求</h4><ol><li>创建web框架程序</li><li>接收web服务器的动态资源请求</li><li>处理web服务器的动态资源请求并把处理结果返回给web服务器</li><li>web服务器把处理结果组装成响应报文发送给浏览器</li></ol><p><code>web框架程序(framework.py)代码:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;miniweb框架，负责处理动态资源请求&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取首页数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line">    <span class="comment"># 处理后的数据</span></span><br><span class="line">    data = time.ctime()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有找到动态资源</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line">    <span class="comment"># 处理后的数据</span></span><br><span class="line">    data = <span class="string">&quot;not found&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理动态资源请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">env</span>):</span></span><br><span class="line">    <span class="comment"># 获取动态请求资源路径</span></span><br><span class="line">    request_path = env[<span class="string">&quot;request_path&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的动态资源请求:&quot;</span>, request_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request_path == <span class="string">&quot;/index.html&quot;</span>:</span><br><span class="line">        <span class="comment"># 获取首页数据</span></span><br><span class="line">        result = index()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 没有找到动态资源</span></span><br><span class="line">        result = not_found()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h5 id="模板替换功能开发-使用模拟数据替换模板变量"><a href="#模板替换功能开发-使用模拟数据替换模板变量" class="headerlink" title="模板替换功能开发,使用模拟数据替换模板变量"></a>模板替换功能开发,使用模拟数据替换模板变量</h5><p><code>framework.py示例代码:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取首页数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理后的数据, 从数据库查询</span></span><br><span class="line">    data = time.ctime()</span><br><span class="line">    <span class="comment"># 2. 替换模板文件中的模板遍历</span></span><br><span class="line">    result = file_data.replace(<span class="string">&quot;&#123;%content%&#125;&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, result</span><br></pre></td></tr></table></figure><h5 id="路由列表功能开发"><a href="#路由列表功能开发" class="headerlink" title="路由列表功能开发"></a>路由列表功能开发</h5><ul><li>什么是路由？路由就是请求的URL到处理函数的映射，也就是说提前把请求的URL和处理函数关联好。</li><li>路由列表:这么多的路由如何管理呢， 可以使用一个路由列表进行管理，通过路由列表保存每一个路由。</li><li>在路由列表添加路由,根据用户请求遍历路由列表处理用户请求<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义路由列表</span></span><br><span class="line">route_list = [</span><br><span class="line">    (<span class="string">&quot;/index.html&quot;</span>, index),</span><br><span class="line">    (<span class="string">&quot;/center.html&quot;</span>, center)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理动态资源请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">env</span>):</span></span><br><span class="line">    <span class="comment"># 获取动态请求资源路径</span></span><br><span class="line">    request_path = env[<span class="string">&quot;request_path&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的动态资源请求:&quot;</span>, request_path)</span><br><span class="line">    <span class="comment"># 遍历路由列表，选择执行的函数</span></span><br><span class="line">    <span class="keyword">for</span> path, func <span class="keyword">in</span> route_list:</span><br><span class="line">        <span class="keyword">if</span> request_path == path:</span><br><span class="line">            result = func()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 没有找到动态资源</span></span><br><span class="line">        result = not_found()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></li></ul><h5 id="装饰器方式的添加路由"><a href="#装饰器方式的添加路由" class="headerlink" title="装饰器方式的添加路由"></a>装饰器方式的添加路由</h5><p>前面我们已经实现了路由列表，但是每次添加路由都需要手动添加来完成，接下来我们想要完成路由的自动添加，可以通过装饰器来实现，在使用装饰器对处理函数进行装饰的时候我们需要知道装饰的函数和那个请求路径进行关联，也就是说装饰器需要接收一个url参数，这样我们定义的装饰器是一个带有参数的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;miniweb框架，负责处理动态资源请求&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由列表</span></span><br><span class="line">route_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义带有参数的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="comment"># 当执行装饰器装饰指定函数的时候，把路径和函数添加到路由列表</span></span><br><span class="line">        route_list.append((path, func))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">            <span class="comment"># 执行指定函数</span></span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="comment"># 返回装饰器</span></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取首页数据</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理后的数据, 从数据库查询</span></span><br><span class="line">    data = time.ctime()</span><br><span class="line">    <span class="comment"># 替换模板文件中的模板遍历</span></span><br><span class="line">    result = file_data.replace(<span class="string">&quot;&#123;%content%&#125;&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取个人中心数据</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">center</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/center.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理后的数据, 从数据库查询</span></span><br><span class="line">    data = time.ctime()</span><br><span class="line">    <span class="comment"># 替换模板文件中的模板遍历</span></span><br><span class="line">    result = file_data.replace(<span class="string">&quot;&#123;%content%&#125;&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有找到动态资源</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line">    <span class="comment"># 处理后的数据</span></span><br><span class="line">    data = <span class="string">&quot;not found&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理动态资源请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">env</span>):</span></span><br><span class="line">    <span class="comment"># 获取动态请求资源路径</span></span><br><span class="line">    request_path = env[<span class="string">&quot;request_path&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的动态资源请求:&quot;</span>, request_path)</span><br><span class="line">    <span class="comment"># 遍历路由列表，选择执行的函数</span></span><br><span class="line">    <span class="keyword">for</span> path, func <span class="keyword">in</span> route_list:</span><br><span class="line">        <span class="keyword">if</span> request_path == path:</span><br><span class="line">            result = func()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 没有找到动态资源</span></span><br><span class="line">        result = not_found()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h5 id="显示股票信息页面的开发"><a href="#显示股票信息页面的开发" class="headerlink" title="显示股票信息页面的开发"></a>显示股票信息页面的开发</h5><h6 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database stock_db charset<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">use stock_db;</span><br><span class="line"><span class="comment">-- 执行sql文件</span></span><br><span class="line">source stock_db.sql;</span><br></pre></td></tr></table></figure><ul><li>根据sql语句查询股票信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取首页数据</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理后的数据, 从数据库查询</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                           password=<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">                           database=<span class="string">&quot;stock_db&quot;</span>,</span><br><span class="line">                           charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 查询sql语句</span></span><br><span class="line">    sql = <span class="string">&quot;select * from info;&quot;</span></span><br><span class="line">    <span class="comment"># 执行sql</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 获取结果集</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li>使用查询数据替换模板变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取首页数据</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/index.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理后的数据, 从数据库查询</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                           password=<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">                           database=<span class="string">&quot;stock_db&quot;</span>,</span><br><span class="line">                           charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 查询sql语句</span></span><br><span class="line">    sql = <span class="string">&quot;select * from info;&quot;</span></span><br><span class="line">    <span class="comment"># 执行sql</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 获取结果集</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">        data += <span class="string">&#x27;&#x27;&#x27;&lt;tr&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;%s&lt;/td&gt;</span></span><br><span class="line"><span class="string">                    &lt;td&gt;&lt;input type=&quot;button&quot; value=&quot;添加&quot; id=&quot;toAdd&quot; name=&quot;toAdd&quot; systemidvaule=&quot;000007&quot;&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                   &lt;/tr&gt;&#x27;&#x27;&#x27;</span> % row</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换模板文件中的模板遍历</span></span><br><span class="line">    result = file_data.replace(<span class="string">&quot;&#123;%content%&#125;&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, result</span><br></pre></td></tr></table></figure><h5 id="个人中心数据接口的开发"><a href="#个人中心数据接口的开发" class="headerlink" title="个人中心数据接口的开发"></a>个人中心数据接口的开发</h5>根据sql语句查询个人中心数据.将个人中心数据转成json字符串并返回<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 个人中心数据接口开发</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center_data.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">center_data</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span>;</span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>), (<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>)]</span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">                           password=<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">                           database=<span class="string">&quot;stock_db&quot;</span>,</span><br><span class="line">                           charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 查询sql语句</span></span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;select i.code, i.short, i.chg, </span></span><br><span class="line"><span class="string">             i.turnover, i.price, i.highs, f.note_info </span></span><br><span class="line"><span class="string">             from info as i inner join focus as f on i.id = f.info_id;&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 执行sql</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 获取结果集</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">     <span class="comment"># 个人中心数据列表</span></span><br><span class="line">    center_data_list = <span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># 遍历每一行数据转成字典</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># 创建空的字典</span></span><br><span class="line">        center_dict = <span class="built_in">dict</span>()</span><br><span class="line">        center_dict[<span class="string">&quot;code&quot;</span>] = row[<span class="number">0</span>]</span><br><span class="line">        center_dict[<span class="string">&quot;short&quot;</span>] = row[<span class="number">1</span>]</span><br><span class="line">        center_dict[<span class="string">&quot;chg&quot;</span>] = row[<span class="number">2</span>]</span><br><span class="line">        center_dict[<span class="string">&quot;turnover&quot;</span>] = row[<span class="number">3</span>]</span><br><span class="line">        center_dict[<span class="string">&quot;price&quot;</span>] = <span class="built_in">str</span>(row[<span class="number">4</span>])</span><br><span class="line">        center_dict[<span class="string">&quot;highs&quot;</span>] = <span class="built_in">str</span>(row[<span class="number">5</span>])</span><br><span class="line">        center_dict[<span class="string">&quot;note_info&quot;</span>] = row[<span class="number">6</span>]</span><br><span class="line">        <span class="comment"># 添加每个字典信息</span></span><br><span class="line">        center_data_list.append(center_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把列表字典转成json字符串, 并在控制台显示</span></span><br><span class="line">    json_str = json.dumps(center_data_list,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(json_str)</span><br><span class="line">    <span class="keyword">return</span> status, response_header, json_str</span><br></pre></td></tr></table></figure>代码说明:</li><li>json.dumps函数把字典转成json字符串:函数的第一个参数表示要把指定对象转成json字符串,参数的第二个参数ensure_ascii=False表示不使用ascii编码，可以在控制台显示中文。</li><li>响应头添加Content-Type表示指定数据的编码格式</li></ul><h5 id="ajax请求数据渲染个人中心页面"><a href="#ajax请求数据渲染个人中心页面" class="headerlink" title="ajax请求数据渲染个人中心页面"></a>ajax请求数据渲染个人中心页面</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取个人中心数据</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&quot;/center.html&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">center</span>():</span></span><br><span class="line">    <span class="comment"># 响应状态</span></span><br><span class="line">    status = <span class="string">&quot;200 OK&quot;</span></span><br><span class="line">    <span class="comment"># 响应头</span></span><br><span class="line">    response_header = [(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;PWS2.0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开模板文件，读取数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;template/center.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 替换模板文件中的模板遍历</span></span><br><span class="line">    result = file_data.replace(<span class="string">&quot;&#123;%content%&#125;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status, response_header, result</span><br></pre></td></tr></table></figure><p>根据用户请求返回个人中心空模板文件数据,在个人中心模板文件添加ajax请求获取个人中心数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 发送ajax请求获取个人中心页面数据</span><br><span class="line">$.get(<span class="string">&quot;center_data.html&quot;</span>, function (data) &#123;</span><br><span class="line"></span><br><span class="line">    var data_array = data;</span><br><span class="line"></span><br><span class="line">    // 获取table标签对象</span><br><span class="line">    var $table = $(<span class="string">&quot;.table&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; data_array.length; i++)&#123;</span><br><span class="line">        // 获取每一条对象</span><br><span class="line">        var center_obj = data_array[i];</span><br><span class="line">        var row_html = <span class="string">&#x27;&lt;tr&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.code +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.short +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.chg +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.turnover +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.price +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.highs +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&#x27;</span>+ center_obj.note_info +<span class="string">&#x27;&lt;/td&gt;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&lt;td&gt;&lt;a type=&quot;button&quot; class=&quot;btn btn-default btn-xs&quot; href=&quot;/update/000007.html&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; 修改 &lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;button&quot; value=&quot;删除&quot; id=&quot;toDel&quot; name=&quot;toDel&quot; systemidvaule=&quot;000007&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        // 为table标签添加每一行组装的html数据</span><br><span class="line">        $table.append(row_html);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="string">&quot;json&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="logging日志"><a href="#logging日志" class="headerlink" title="logging日志"></a>logging日志</h4><h5 id="logging日志的介绍"><a href="#logging日志的介绍" class="headerlink" title="logging日志的介绍"></a>logging日志的介绍</h5><p>在现实生活中，记录日志非常重要，比如:银行转账时会有转账记录；飞机飞行过程中，会有个黑盒子（飞行数据记录器）记录着飞机的飞行过程，那在咱们python程序中想要记录程序在运行时所产生的日志信息，怎么做呢?<br>可以使用 logging 这个包来完成<br>记录程序日志信息的目的是:</p><ul><li>可以很方便的了解程序的运行情况</li><li>可以分析用户的操作行为、喜好等信息</li><li>方便开发人员检查bug<h5 id="logging日志级别介绍"><a href="#logging日志级别介绍" class="headerlink" title="==logging日志级别介绍=="></a>==logging日志级别介绍==</h5>日志等级可以分为5个，从低到高分别是:DEBUG,INFO,WARNING,ERROR,CRITICAL<br>日志等级说明:</li><li><code>DEBUG</code>：程序调试bug时使用</li><li><code>INFO</code>：程序正常运行时使用</li><li><code>WARNING</code>：程序未按预期运行时使用，但并不是错误，如:用户登录密码错误</li><li><code>ERROR</code>：程序出错误时使用，如:IO操作失败</li><li><code>CRITICAL</code>：特别严重的问题，导致程序不能再继续运行时使用，如:磁盘空间为空，一般很少使用<br>默认的是WARNING等级，当在WARNING或WARNING之上等级的才记录日志信息。<br>日志等级从低到高的顺序是: DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL<h5 id="logging日志的使用"><a href="#logging日志的使用" class="headerlink" title="logging日志的使用"></a>logging日志的使用</h5>在 logging 包中记录日志的方式有两种:</li><li>输出到控制台</li><li>保存到日志文件<br>日志信息输出到控制台的示例代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;这是一个debug级别的日志信息&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是一个info级别的日志信息&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是一个warning级别的日志信息&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是一个error级别的日志信息&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是一个critical级别的日志信息&#x27;</span>)</span><br></pre></td></tr></table></figure>日志信息只显示了大于等于WARNING级别的日志，这说明<code>·默认的日志级别设置为WARNING·</code>logging日志等级和输出格式的设置:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志等级和输出日志格式</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;这是一个debug级别的日志信息&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是一个info级别的日志信息&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是一个warning级别的日志信息&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是一个error级别的日志信息&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是一个critical级别的日志信息&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>level 表示设置的日志等级</li><li>format 表示日志的输出格式, 参数说明:<ul><li>%(levelname)s: 打印日志级别名称</li><li>%(filename)s: 打印当前执行程序名</li><li>%(lineno)d: 打印日志的当前行号</li><li>%(asctime)s: 打印日志的时间</li><li>%(message)s: 打印日志信息<br>日志信息保存到日志文件的示例代码:</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span>,</span><br><span class="line">                    filename=<span class="string">&quot;log.txt&quot;</span>,</span><br><span class="line">                    filemode=<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;这是一个debug级别的日志信息&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;这是一个info级别的日志信息&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;这是一个warning级别的日志信息&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;这是一个error级别的日志信息&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;这是一个critical级别的日志信息&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="logging日志在mini-web项目中应用"><a href="#logging日志在mini-web项目中应用" class="headerlink" title="logging日志在mini-web项目中应用"></a>logging日志在mini-web项目中应用</h5><h6 id="web-py-程序使用logging日志示例"><a href="#web-py-程序使用logging日志示例" class="headerlink" title="web.py 程序使用logging日志示例:"></a>web.py 程序使用logging日志示例:</h6><p>1.程序入口模块设置logging日志的设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="keyword">import</span> sys</span><br><span class="line"> <span class="keyword">import</span> framework</span><br><span class="line"> <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"> <span class="comment"># logging日志的配置</span></span><br><span class="line"> logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                     <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span>,</span><br><span class="line">                     filename=<span class="string">&quot;log.txt&quot;</span>,</span><br><span class="line">                     filemode=<span class="string">&quot;w&quot;</span>)</span><br></pre></td></tr></table></figure><p>2.INFO级别的日志输出，示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否是动态资源请求</span></span><br><span class="line"> <span class="keyword">if</span> request_path.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">     <span class="string">&quot;&quot;&quot;这里是动态资源请求，把请求信息交给框架处理&quot;&quot;&quot;</span></span><br><span class="line">     logging.info(<span class="string">&quot;动态资源请求:&quot;</span> + request_path)</span><br><span class="line">     ...</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="string">&quot;&quot;&quot;这里是静态资源请求&quot;&quot;&quot;</span></span><br><span class="line">     logging.info(<span class="string">&quot;静态资源请求:&quot;</span> + request_path)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>3.WARNING级别的日志输出，示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取命令行参数判断长度</span></span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 9000&quot;</span>)</span><br><span class="line">     logging.warning(<span class="string">&quot;用户在命令行启动程序参数个数不正确!&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 判断端口号是否是数字</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> sys.argv[<span class="number">1</span>].isdigit():</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;执行命令如下: python3 xxx.py 9000&quot;</span>)</span><br><span class="line">     logging.warning(<span class="string">&quot;用户在命令行启动程序参数不是数字字符串!&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h5 id="framework-py-程序使用logging日志示例"><a href="#framework-py-程序使用logging日志示例" class="headerlink" title="framework.py 程序使用logging日志示例:"></a>framework.py 程序使用logging日志示例:</h5><p>4.ERROR级别的日志输出，示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理动态资源请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">env</span>):</span></span><br><span class="line">    <span class="comment"># 获取动态请求资源路径</span></span><br><span class="line">    request_path = env[<span class="string">&quot;request_path&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的动态资源请求:&quot;</span>, request_path)</span><br><span class="line">    <span class="comment"># 遍历路由列表，选择执行的函数</span></span><br><span class="line">    <span class="keyword">for</span> path, func <span class="keyword">in</span> route_list:</span><br><span class="line">        <span class="keyword">if</span> request_path == path:</span><br><span class="line">            result = func()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.error(<span class="string">&quot;没有设置相应的路由:&quot;</span> + request_path)</span><br><span class="line">        <span class="comment"># 没有找到动态资源</span></span><br><span class="line">        result = not_found()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>==logging日志配置信息在程序入口模块设置一次，整个程序都可以生效==。<code>logging.basicConfig </code>表示 logging 日志配置操作</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python陆续的学了好几次，大学时便开始学，都是学点皮面之后没有坚持来，基本语法，正则，Socket，爬虫都接触过。做java比较多，平常基本不用，所以一直没有一篇系统的笔记来供自己温习，这里整理一篇较基础的，供自己温习。原来资源是小伙伴分享的学习笔记，这里自己稍作整理汇总。生活加油&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://liruilongs.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://liruilongs.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>企业级网络架构(搭建)学习笔记(网管)</title>
    <link href="https://liruilongs.github.io/2021/03/25/%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84(%E6%90%AD%E5%BB%BA)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E7%BD%91%E7%AE%A1)/"/>
    <id>https://liruilongs.github.io/2021/03/25/%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84(%E6%90%AD%E5%BB%BA)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E7%BD%91%E7%AE%A1)/</id>
    <published>2021-03-24T16:00:00.000Z</published>
    <updated>2021-06-26T19:01:56.150Z</updated>
    
    <content type="html"><![CDATA[<p>技不压身，了解下企业级网络的搭建，虽然偏硬件，但是有利于知识体系的构建。和学TCP/IP协议时的一些东西互通，同时为以后回老家当网管做准备，哈哈，生活加油！是一起参加红帽考试的小伙伴分享的资源，然后稍作整理，时间原因，这篇笔记后面部分没有实际敲Demo，先知道个大概，以后涉及到这方面在深入研究，补充一些实战的东西。</p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><p>技不压身，了解下企业级网络的搭建，虽然偏硬件，但是有利于知识体系的构建。和学TCP/IP协议时的一些东西互通，同时为以后回老家当网管做准备，哈哈，生活加油！是一起参加红帽考试的小伙伴分享的资源，然后稍作整理，时间原因，这篇笔记后面部分没有实际敲Demo，先知道个大概，以后涉及到这方面在深入研究，补充一些实战的东西。</p><p><strong><font color="#d92e2e">另：如果想详细的了解HTTP、TCP/IP 等协议，小伙伴可以看看这几篇博客：</font></strong></p><h3 id="《图解TCP-IP》读书笔记"><a href="#《图解TCP-IP》读书笔记" class="headerlink" title="《图解TCP/IP》读书笔记"></a><a href="https://blog.csdn.net/sanhewuyang/article/details/86369071">《图解TCP/IP》读书笔记</a></h3><h3 id="《图解HTTP》读书笔记"><a href="#《图解HTTP》读书笔记" class="headerlink" title="《图解HTTP》读书笔记"></a><a href="https://blog.csdn.net/sanhewuyang/article/details/82285866">《图解HTTP》读书笔记</a></h3><hr><h2 id="一、计算机硬件、在线攒机"><a href="#一、计算机硬件、在线攒机" class="headerlink" title="一、计算机硬件、在线攒机"></a>一、计算机硬件、在线攒机</h2><h3 id="显示器-输出设备"><a href="#显示器-输出设备" class="headerlink" title="显示器 (输出设备)"></a>显示器 (输出设备)</h3><ol><li>屏幕尺寸：20.1寸、27寸、32寸…  一寸=2.54cm #计算方式： 显示器和电视机都是采用<code>测试对角线的方式</code>来定义的.</li><li>分辨率： 1280x720 高清、1920x1080 全高清、3840x2160 超高清</li><li>接口：<ul><li>HDMI：高清晰度多媒体(音频+视频) 接口</li><li>老式显示接口：DVI (视频数字接口)、VGA (视频图阵接口)<h3 id="键盘、鼠标（输入设备）"><a href="#键盘、鼠标（输入设备）" class="headerlink" title="键盘、鼠标（输入设备）"></a>键盘、鼠标（输入设备）</h3>鼠标接口：</li></ul></li></ol><ul><li>PS2 圆口 不支持热插拔；</li><li>USB 扁口 支持热插拔；</li><li>无线收发<h3 id="主机-核心"><a href="#主机-核心" class="headerlink" title="主机 (核心)"></a>主机 (核心)</h3>一台计算机的最核心构件：容纳处理器、内存、磁盘等计算和存储元件；提供人机交互的各种输入/输出接口；主机的组成：</li></ul><ol><li><code>CPU处理器；CPU(Central Processing Unit)</code>，中央处理器是整个计算机运算与控制的核心,CPU性能指标：<ul><li>核心数：单核、双核、四核、八核等；</li><li>线程数：四线程、八线程、等；</li><li>主频：2.8GHz、3.4GHz、3.9GHz、、4.2GHz等；</li><li>缓存：3.0MB、6.0MB、8.0MB、20MB等；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU ( 缓存 ) &lt;——&gt; 内存 &lt;——&gt; 硬盘:</span><br><span class="line">cpu不能直接处理硬盘中的数据，需要先将硬盘中的数据读取内存中，然后再从内存中读取数据；</span><br><span class="line">为了提高处理效率，在CPU中也有一个缓存区，处理数据时，先将内存里的数据读取CPU的缓存中，CPU处理完自己的内容后，</span><br><span class="line">直接从自己的CPU缓存中读取数据，CPU缓存继续从内存中读取数据，内存再从硬盘中读取数据，循环往复。</span><br></pre></td></tr></table></figure></li><li>CPU的散热方式：风冷、水冷、液冷；</li><li>内存： 内部存储器：用于暂时存放CPU中的程序运算数据，以及与硬盘等外部存储器交互的数据主要指标：<ul><li>容量：4G、8G、16G</li><li>频率：DDR3 800<del>2133MHz、DDR4 2133</del> 2666MHz</li></ul></li></ul></li><li><code>主板</code>；也称主机板、系统板：集成了计算机的主要电路系统；提供一系列芯片及扩展槽以连接其他配件；主要指标：<ul><li>芯片组（Inter、AMD、NVIDIA）;</li><li>主板尺寸 (标准型、紧凑型、迷你型)</li></ul></li><li><code>显卡、声卡、网卡</code>；处理图像、音频、网络数据的专用设备：通常由主板集成，有特殊需求也可独立配备 (性能更优)；主要指标：<ul><li>显存大小(1G, 2G, 4G) 、显卡接口 (AGP、PCI-E)；</li><li>网卡速度 (百兆、千兆)、双网口、无线网卡</li></ul></li><li><code>硬盘、光驱</code>；硬盘 主要的外接存储器，光驱 用来读取光盘介质的驱动器设备(已经淘汰，不再使用：DVD ROM 只读光驱；DVD RW 刻录机；DVD 移动(USB接口) 刻录机)，硬盘属性：<ul><li>容量 (500GB、1TB、2TB、4TB)；</li><li>转速（5400、7200、10000）；</li><li>类型（SATA、SSD固态）</li></ul></li><li><code>机箱及电源</code>；机箱用来固定主板、硬盘、光驱及各种扩展卡；电源及风扇用来提供能源及散热</li><li><code>主板BLOS设置</code>；Basic Input/Output System 基本输入输出系统固化在主板的一个芯片中，用于加电自检/初始化计算机；<ul><li>进入BlOS设置的方法根据计算机加电后的提示操作，<code>通常为 Del键或 F2 键</code></li></ul><ul><li>常见的BLOS设置<ul><li>开启虚拟化支持、设置启动顺序、设置安全密码；</li><li>清除BLOS自定义设置；<br>​​​​​​​​<img src="https://img-blog.csdnimg.cn/20210320151649378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul></li></ol><h3 id="在线攒机"><a href="#在线攒机" class="headerlink" title="在线攒机"></a>在线攒机</h3><p>浏览器中输入在线攒机即可：例如：<a href="http://zj.zol.com.cn/">http://zj.zol.com.cn/</a><br><img src="https://img-blog.csdnimg.cn/20210320151704840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="二、网络概述"><a href="#二、网络概述" class="headerlink" title="二、网络概述"></a>二、网络概述</h2><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><ul><li>硬件方面：通过线缆将网络设备和计算机连接起来；</li><li>软件方面：操作系统，应用软件，应用程序通过通信线路互联；<br>作用： 实现资源共享，信息传递，增加可靠性，提高系统处理能力<h3 id="标准化组织"><a href="#标准化组织" class="headerlink" title="标准化组织"></a>标准化组织</h3>ISO（国际标准化组织）；IEEE（电气和电子工程师协会）<h3 id="WAN与LAN"><a href="#WAN与LAN" class="headerlink" title="WAN与LAN"></a>WAN与LAN</h3>WAN（广域网):范围：几十到几千千米；<code>作用：用于连接远距离的计算机网络；应用：Internet；</code><br>LAN(局域网)：范围：1km左右；<code>作用：用于连接较短距离内的计算机；应用：企业网，校园网；</code><h3 id="网络设备生产厂商"><a href="#网络设备生产厂商" class="headerlink" title="网络设备生产厂商"></a>网络设备生产厂商</h3>华为；Cisco(思科)<h3 id="路由交换设备"><a href="#路由交换设备" class="headerlink" title="路由交换设备"></a>路由交换设备</h3></li><li>路由器(Router)；</li><li>交换机(Switch)；<br><img src="https://img-blog.csdnimg.cn/2021032015233949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a>网络拓扑结构</h3><ol><li>点对点拓扑结构：两台设备之间有一条单独的连接；作用：专用于广域网中连接两台路由器；</li><li>星型拓扑：<ul><li>优点：易于实现；易于网络扩展；易于故障排查；</li><li>缺点：中心节点压力大；组网成本较高</li></ul></li><li>网状拓扑结构：一个节点与其他节点相连；<ul><li>优点：提供冗余性和容错性；可靠性高；</li><li>缺点：组网成本高；<br><img src="https://img-blog.csdnimg.cn/20210320153027822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ol><hr><h2 id="三、OSI参考模型"><a href="#三、OSI参考模型" class="headerlink" title="三、OSI参考模型"></a>三、OSI参考模型</h2><h3 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h3><p>分层思想：梳理网络体系，便于相关人员能够更精确的定位到问题所在将复杂的流程分解，复杂问题简单化；更容易发现问题并针对性的解决问题</p><p>国际标准化组织 ( ISO )：规定将网络分为七层，从下往上依次是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</p><p><code>OSI理论七层模型</code><br>更多见博客： <a href="https://blog.csdn.net/sanhewuyang/article/details/86369071">https://blog.csdn.net/sanhewuyang/article/details/86369071</a></p><ul><li><p>应用层：为应用程序提供服务并规定通信相关的细节，针对特定应用的协议，包括文件传输，电子邮件，远程登录等协议。</p></li><li><p>表示层：将应用处理的信息转换为适合网络传输的格式，或者将下一层的数据转化为上一层能够处理的格式，主要负责数据格式的转换。将设备固有的数据格式转换为网络标准传输格式，不同设备对同一比特流的解释可能不同，使他们保持一致。</p></li><li><p>会话层：通信管理，负责建立和断开通信连接(数据流动的逻辑通路)，管理传输层以下的分层，以及数据的分割等数据传输相关的管理。(何时建立/断开连接，保持多久的连接)</p></li><li><p>传输层：起着可靠传输的作用，只在通信双方节点上进行处理（确保数据被可靠的传输送到目标地址），无需路由器上处理。</p></li><li><p>网络层：将数据传输到目标地址，目标地址可以是多个网络通过路由器连接的而成的某一个地址，负责寻址和路由选择。（经过那个路由传递到目标地址）</p></li><li><p>数据链路层：负责物理层面上的互连的，节点之间的通信出传输，将0，1序列划分为具有意义的数据帧传送给对端(数据帧 的生成与接收，数据帧与比特流的之间的准换)</p></li><li><p>物理层：负责0,1比特流与电压高低，光的闪灭之间的互换，界定连接器与网络的规格。</p></li></ul><p><code>TCP/IP 五层模型</code></p><ul><li>应用层： 上层数据 —–》 计算机 HTTP, FTP, TFTP, SMTP, SNMP, DNS </li><li>传输层： 数据段 —–》 防火墙TCP, UDP </li><li>网络层： 数据包 —–》 路由器 ICMP, IGMP, IP, ARP </li><li>数据链路层： 数据帧 —–》 交换机 VLAN, TRUNK, MSTP </li><li>物理层： 比特流 —–》 网卡<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># HTTP协议：超文本传输协议,例：互联网的访问;</span><br><span class="line"># FTP协议：文件传输协议，例：文件的共享与互相传递；</span><br><span class="line"># TFTP协议：简单的文件传输协议，例：只能传递小文件，文件的大小以KB来衡量；</span><br><span class="line"># SMTP协议：电子邮件传输协议，例：发送邮件；</span><br><span class="line"># SNMP协议：简单网络管理协议，例：远程控制；</span><br><span class="line"># DNS协议：域名解析协议，将IP地址解析为域名，例：www.baidu.com（域名）</span><br></pre></td></tr></table></figure><code>什么是协议</code>:为了使数据可以在网络上从源传递到目的地，网络上所有设备需要“讲”相同的“语言”；描述网络通信中“语言”规范的一组规则就是协议<br><code>常用的以太网接口</code></li><li>RJ-11: 四根线序，连接电话；</li><li>RJ-45: 八根线序，最常用的规范（廉价稳定）；<br><code>线序的类型</code></li><li>T568A: 白绿，绿，白橙，蓝，白蓝，橙，白棕，棕</li><li>T568B: 白橙，橙，白绿，蓝，白蓝，绿，白棕，棕</li><li>标准网线(直通线)：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T568A --------------- T568A</span><br><span class="line">T568B --------------- T568B</span><br></pre></td></tr></table></figure></li><li>交叉网线(交叉线)：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T568A --------------- T568B</span><br></pre></td></tr></table></figure><code>线序的选择</code></li><li>直通线：线缆两头的线序相同；</li><li>交叉线：线缆两头的线序不同；</li><li>有交换机时用直通线 ( 一条线连接的两台设备 )；</li><li>没有交换机时用交叉线 ( 一条线连接的两台设备 )；</li></ul><p><code>双绞线（网线）</code>目前使用最广，价格相对便宜的一种传输介质；由两根绝缘铜导线相互缠绕组成，以减少对邻近线的电气干扰；</p><p><code>双绞线的标准：</code><br>|类型| 传输速率|<br>|–|–|<br>|cat5 |100Mbps|<br>|cat5e| 100Mbps|<br>|cat6 |1000Mbps ——&gt; 服务器|<br>|cat7 |10000Mbps —–&gt; 使用需要万兆网卡，少用|</p><p><code>中继器（物理层设备）</code>放大信号；延长网络传输距离；网线一般不要超过150米，否则会丢失数据，可以加一个中继器。<br><code>数据封装和解封装</code><br><img src="https://img-blog.csdnimg.cn/20210320160857240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>协议数据单元 (PDU)</code><br><img src="https://img-blog.csdnimg.cn/20210320160955105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 设备与层的对应关系</p><ul><li>应用层： 上层数据 —–》 计算机 HTTP, FTP, TFTP, SMTP, SNMP, DNS </li><li>传输层： 数据段 —–》 防火墙TCP, UDP </li><li>网络层： 数据包 —–》 路由器 ICMP, IGMP, IP, ARP </li><li>数据链路层： 数据帧 —–》 交换机VLAN, TRUNK, MSTP </li><li>物理层： 比特流 —–》 网卡</li></ul><h2 id="四、IP地址分类"><a href="#四、IP地址分类" class="headerlink" title="四、IP地址分类"></a>四、IP地址分类</h2><h3 id="IP地址的组成"><a href="#IP地址的组成" class="headerlink" title="IP地址的组成"></a>IP地址的组成</h3><p>IP地址<code>由32个二进制数构成</code>。总体上可以分为两部分：<code>网络位＋主机位</code>；为了方便表示，人为地，<code>将8位换算成10进制数，共4段。4段数字用小数点分隔，称作点分10进制</code>的表示方式；</p><ul><li>相同的网络，网络部分相同；主机部分一定不同；</li><li>不同的网络，网络部分一定不同；主机部分可以相同；<br><code>子网掩码：</code>用于判定一个IP地址的网络部分和主机部分；<code>网络部分全写为1，主机部分写为0；1对应的部分是网络，0对应的部分是主机；</code><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3></li><li>A类： 1 - 127          网络位+主机位+主机位+主机位       255.0.0.0 （127常用于表示本机）</li><li>B类： 128 - 191      网络位+网络位+主机位+主机位       255.255.0.0</li><li>C类： 192 - 223      网络位+网络位+网络位+主机位       255.255.255.0</li><li>D类：  用于多播，也叫组播</li><li>E类：保留<h3 id="私有IP地址-网段"><a href="#私有IP地址-网段" class="headerlink" title="私有IP地址(网段)"></a>私有IP地址(网段)</h3></li><li>A：10.0.0.0/8 /8表示网络位是8位 10.0.0.1 ~ 10.255.255.255</li><li>B：172.16.0.0 - 172.31.0.0/16       176.16.0.1 ~ 176.31.255.255</li><li>C：192.168.0.0/24                         192.168.0.1 ~ 192.168.255.255<h2 id="五、windows网络配置"><a href="#五、windows网络配置" class="headerlink" title="五、windows网络配置"></a>五、windows网络配置</h2><h3 id="查看当前网络的IP地址信息"><a href="#查看当前网络的IP地址信息" class="headerlink" title="查看当前网络的IP地址信息"></a>查看当前网络的IP地址信息</h3>选择“网络” ——&gt; 右键 “属性” ——&gt; 选择“更改适配器设置” ——&gt; 双击“以太网”或者“WLAN” 或者其他<br>虚拟网卡(必须是已经启用或者能够已连接的) ——&gt; 点击“详细信息</li></ul><h3 id="windows系统的常用操作"><a href="#windows系统的常用操作" class="headerlink" title="windows系统的常用操作"></a>windows系统的常用操作</h3><ul><li>打开命令提示符： 点击搜索，输入“cmd” 或者使用快捷方式 “Windows”徽标键 + “R” 打开运行界面，输入“cmd”;</li><li>查看网卡信息：输入 ipconfig ;</li><li>验证网络连通性： ping IP地址 —&gt; (例如：ping 127.0.0.1(自己ping自己) 或者验证能否连通外网:ping <a href="http://www.baidu.com/">www.baidu.com</a>)</li><li>修改网卡的IP地址<br>首先，按照 P3.1 操作，显示出所有的网卡；然后，选择一个要修改的网卡 ( 例如：以太网 )，右键“属性”；再次，双击 “Internet 协议版本4 (TCP/IPV4)”;最后，选择 “使用下面的IP 地址” 配置 IP地址，子网掩码和网关；</li></ul><p><img src="https://img-blog.csdnimg.cn/20210320174206872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="六-、交换机的命令行视图"><a href="#六-、交换机的命令行视图" class="headerlink" title="六 、交换机的命令行视图"></a>六 、交换机的命令行视图</h2><h3 id="华为交换机的命令行"><a href="#华为交换机的命令行" class="headerlink" title="华为交换机的命令行"></a>华为交换机的命令行</h3><p><img src="https://img-blog.csdnimg.cn/20210320185413856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt; <span class="comment">#用户视图</span></span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei] <span class="comment">#系统视图</span></span><br><span class="line">[Huawei]interface Ethernet 0/0/1 <span class="comment">#进入接口视图</span></span><br><span class="line"><span class="comment">#interface: 接口，Ethernet: 接口类型，0/0/1: 第一个“0”代表槽位号，第二个“0”代表子卡号，最后一个“1”代表接口号</span></span><br><span class="line">[Huawei-Ethernet0/0/1] <span class="comment">#接口视图</span></span><br><span class="line">[Huawei]ospf <span class="comment">#进入协议视图</span></span><br><span class="line">[Huawei-ospf-1] <span class="comment">#协议视图</span></span><br><span class="line"><span class="comment">#在系统视图下，输入相关路由协议命令即可进入路由协议视图</span></span><br></pre></td></tr></table></figure><h3 id="命令行的层次关系"><a href="#命令行的层次关系" class="headerlink" title="命令行的层次关系"></a><code>命令行的层次关系</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户视图         <span class="comment">#查看运行状态或其他参数</span></span><br><span class="line">    系统视图     <span class="comment">#配置设备的系统参数等</span></span><br><span class="line">        接口视图 <span class="comment">#配置接口参数</span></span><br><span class="line">            协议 <span class="comment">#配置路由协议</span></span><br></pre></td></tr></table></figure><h3 id="视图间的转换"><a href="#视图间的转换" class="headerlink" title="视图间的转换"></a><code>视图间的转换</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt; <span class="comment">#用户视图</span></span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei] <span class="comment">#系统视图</span></span><br><span class="line">[Huawei]quit <span class="comment">#退出系统视图，一次只能退一层</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]</span><br><span class="line">[Huawei]interface Ethernet 0/0/1 <span class="comment">#由系统视图进入到接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1] <span class="comment">#接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1]<span class="built_in">return</span> <span class="comment">#直接退回到最初的用户视图下，快捷键 “Ctrl + Z”</span></span><br><span class="line">&lt;Huawei&gt;</span><br></pre></td></tr></table></figure><h2 id="七、交换机的基本配置"><a href="#七、交换机的基本配置" class="headerlink" title="七、交换机的基本配置"></a>七、交换机的基本配置</h2><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主机名的配置必须在系统视图模式下进行</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]sysname yunduan <span class="comment">#更改设备的名字</span></span><br><span class="line">[yunduan]</span><br></pre></td></tr></table></figure><h3 id="显示VRP的版本信息"><a href="#显示VRP的版本信息" class="headerlink" title="显示VRP的版本信息"></a>显示VRP的版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;display version</span><br></pre></td></tr></table></figure><h3 id="查看交换机的所有配置"><a href="#查看交换机的所有配置" class="headerlink" title="查看交换机的所有配置"></a>查看交换机的所有配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;display current-configuration</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]display current-configuration</span><br></pre></td></tr></table></figure><h3 id="使用账户和密码登录终端"><a href="#使用账户和密码登录终端" class="headerlink" title="使用账户和密码登录终端"></a>使用账户和密码登录终端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]</span><br><span class="line">[Huawei]aaa <span class="comment">#进入aaa模式，此模式下才可以设置用户名和登录密码</span></span><br><span class="line">[Huawei-aaa]local-user admin01 password cipher 123 <span class="comment">#设置用户名和密码(加密的，安全性更</span></span><br><span class="line">高)</span><br><span class="line">[Huawei-aaa]display this <span class="comment">#查看aaa模式做过哪些配置</span></span><br><span class="line">[Huawei-aaa]undo local-user admin01 <span class="comment">#删除创建的用户，可以不操作</span></span><br><span class="line">[Huawei-aaa]quit <span class="comment">#退回到系统视图</span></span><br><span class="line">[Huawei] <span class="comment">#此时用户名密码并没有生效，需要进入console 0来通过aaa认证</span></span><br><span class="line">[Huawei]user-interface console 0 <span class="comment">#进入console 0 接口</span></span><br><span class="line">[Huawei-ui-console0]authentication-mode aaa <span class="comment">#通过aaa认证</span></span><br><span class="line">[Huawei-ui-console0]<span class="built_in">return</span> <span class="comment">#返回到用户模式下</span></span><br><span class="line">&lt;Huawei&gt;save <span class="comment">#保存配置，保证重启后仍然有效</span></span><br><span class="line">&lt;Huawei&gt;reboot <span class="comment">#重启交换机验证，或者Ctrl + ]使用这个，不用重启就可以验证</span></span><br></pre></td></tr></table></figure><h3 id="保存交换机的配置"><a href="#保存交换机的配置" class="headerlink" title="保存交换机的配置"></a>保存交换机的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们之前在交换机上做的配置，交换机并不会给我们永久保存，重启后所有配置失效，需要在用户视图下保存配置</span></span><br><span class="line">&lt;Huawei&gt;save <span class="comment">#永久保存配置信息，只能在用户视图下进行</span></span><br></pre></td></tr></table></figure><h3 id="恢复设备出厂默认值"><a href="#恢复设备出厂默认值" class="headerlink" title="恢复设备出厂默认值"></a>恢复设备出厂默认值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;reset saved-configuration <span class="comment">#恢复出厂默认值</span></span><br><span class="line">Warning: The action will delete the saved configuration <span class="keyword">in</span> the device.</span><br><span class="line">The configuration will be erased to reconfigure. Continue? [Y/N]: y <span class="comment">#询问你是否确</span></span><br><span class="line">认操作，y是同意的意思</span><br><span class="line">&lt;Huawei&gt;reboot <span class="comment">#重启设备</span></span><br><span class="line">Info: The system is now comparing the configuration, please <span class="built_in">wait</span>.</span><br><span class="line">Warning: All the configuration will be saved to the configuration file <span class="keyword">for</span> the n</span><br><span class="line">ext startup:, Continue?[Y/N]: n</span><br><span class="line"><span class="comment">#第一次的提示，警告所以的配置会被保存到配置文件，下次重启会再次加载以前的配置文件，所以要选择 n,</span></span><br><span class="line">否则会报错</span><br><span class="line">Info: If want to reboot with saving diagnostic information, input <span class="string">&#x27;N&#x27;</span> and <span class="keyword">then</span> e</span><br><span class="line">xecute <span class="string">&#x27;reboot save diagnostic-information&#x27;</span>.</span><br><span class="line">System will reboot! Continue?[Y/N]: y</span><br><span class="line"><span class="comment">#第二条信息提示我们，系统将被重启，是否继续，选择 y 同意，设备将进入重启状态</span></span><br></pre></td></tr></table></figure><h3 id="避免自动退出配置界面"><a href="#避免自动退出配置界面" class="headerlink" title="避免自动退出配置界面"></a>避免自动退出配置界面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#空闲一段时间后(默认控制台会话时间为10分钟)</span></span><br><span class="line"><span class="comment">#配置控制台会话时间(避免老是进入自动待机状态)</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]user-interface console 0 <span class="comment">#进入console 0 接口</span></span><br><span class="line">[Huawei-ui-console0]idle-timeout 100 <span class="comment">#设置控制台会话时间（100分钟）</span></span><br><span class="line">[Huawei-ui-console0]display this <span class="comment">#查看当前接口下做的配置(必须切换到对应的接口)</span></span><br></pre></td></tr></table></figure><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h4 id="更改语言为中文"><a href="#更改语言为中文" class="headerlink" title="更改语言为中文"></a>更改语言为中文</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;language-mode Chinese <span class="comment">#用户视图下</span></span><br></pre></td></tr></table></figure><h4 id="信息不提示命令"><a href="#信息不提示命令" class="headerlink" title="信息不提示命令"></a><code>信息不提示命令</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取消控制台的错误，日志等各种提示信息</span></span><br><span class="line">&lt;Huawei&gt;undo terminal debugging</span><br><span class="line">&lt;Huawei&gt;undo terminal monitor</span><br><span class="line">&lt;Huawei&gt;undo terminal logging</span><br><span class="line">&lt;Huawei&gt;undo terminal trapping</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图，测试</span></span><br><span class="line"><span class="comment">#华为模拟器支持命令的批量执行，一起执行上述命令，在用户视图下，复制，粘贴，即可一键运行</span></span><br><span class="line">undo terminal debugging</span><br><span class="line">undo terminal monitor</span><br><span class="line">undo terminal logging</span><br><span class="line">undo terminal trapping</span><br><span class="line">system-view</span><br><span class="line"><span class="comment">#让华为设备命令行不输出任何的提示信息</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]undo info-center <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h4 id="配置设备永不自动关机"><a href="#配置设备永不自动关机" class="headerlink" title="配置设备永不自动关机"></a><code>配置设备永不自动关机</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">[Huawei]system-view</span><br><span class="line">[Huawei]user-interface console 0</span><br><span class="line">[Huawei]idle-timeout 0 <span class="comment">#0代表会话一直存在(不推荐使用，有安全风险)</span></span><br></pre></td></tr></table></figure><h4 id="查看系统配置信息"><a href="#查看系统配置信息" class="headerlink" title="查看系统配置信息"></a>查看系统配置信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">[Huawei]system-view <span class="comment">#切换系统视图</span></span><br><span class="line">[Huawei]display current-configuration <span class="comment">#查看当前设备的所有配置配置</span></span><br><span class="line">[Huawei]interface Ethernet0/0/1</span><br><span class="line">[Huawei-Ethernet0/0/1]display this <span class="comment">#查看ethernet 0/0/1 接口下都做过哪些配置</span></span><br><span class="line">[Huawei]user-interface console 0</span><br><span class="line">[Huawei-ui-console0]display this <span class="comment">#查看console 0接口下都做过哪些配置</span></span><br><span class="line"><span class="comment">#注：此条命令适用于其他所有的接口视图模式，前提必须进入相应的接口或视图</span></span><br></pre></td></tr></table></figure><h4 id="查看当前设备简要的接口信息"><a href="#查看当前设备简要的接口信息" class="headerlink" title="查看当前设备简要的接口信息"></a>查看当前设备简要的接口信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#系统视图下进行</span></span><br><span class="line">[Huawei]display interface brief</span><br></pre></td></tr></table></figure><h4 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;display history-command <span class="comment">#必须是在用户视图下</span></span><br></pre></td></tr></table></figure><h4 id="查看MAC地址表"><a href="#查看MAC地址表" class="headerlink" title="查看MAC地址表"></a>查看MAC地址表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;display mac-address <span class="comment">#用户视图下使用</span></span><br></pre></td></tr></table></figure><h2 id="八、数据链路层"><a href="#八、数据链路层" class="headerlink" title="八、数据链路层"></a>八、数据链路层</h2><p><img src="https://img-blog.csdnimg.cn/20210320192357759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="以太网MAC地址"><a href="#以太网MAC地址" class="headerlink" title="以太网MAC地址"></a>以太网MAC地址</h3><p><img src="https://img-blog.csdnimg.cn/20210320192833900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>用来识别一个以太网上的某个单独的设备或一组设备。</strong></p><h3 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h3><p><img src="https://img-blog.csdnimg.cn/20210320192906432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数据链路层的协议数据单元</p><h3 id="什么是交换机"><a href="#什么是交换机" class="headerlink" title="什么是交换机"></a>什么是交换机</h3><ul><li>交换机是用来<code>连接局域网的主要设备</code></li><li>交换机能够根据<code>以太网帧中目标地址智能的转发数据，因此交换机工作在数据链路层</code><h3 id="交换机转发原理"><a href="#交换机转发原理" class="headerlink" title="交换机转发原理"></a>交换机转发原理</h3><img src="https://img-blog.csdnimg.cn/20210321100406116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210321100416248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><ul><li>初始状态(一无所知)；</li><li>MAC地址学习(将源地址记录到MAC地址表中)；</li><li>广播未知数据帧(广播目的地址，接收方回应，交换机记录接收方的源MAC地址到MAC地址表中)</li></ul><h3 id="交换机的工作原理"><a href="#交换机的工作原理" class="headerlink" title="交换机的工作原理"></a>交换机的工作原理</h3><p><img src="https://img-blog.csdnimg.cn/20210320200006759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210320200044508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>学习–》MAC地址表是交换机通过学习接收的数据帧的源MAC地址来形成的；</li><li>广播–》如果目标地址在MAC地址表中没有，交换机就向发送该数据帧的接口外的其他所有接口广播该数据帧；</li><li>转发–》交换机根据MAC地址表单播转发数据帧；</li><li>更新–》交换机MAC地址表的老化时间是300秒，交换机如果发现一个帧的源接口和MAC地址表中的源MAC地址的所在接口不同，交换机将MAC地址重新学习到新的接口；注意：断电，拔网线，过300秒都会使MAC地址表变化<br>查看MAC地址表<br><img src="https://img-blog.csdnimg.cn/20210321100446349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210321100451768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;display mac-address <span class="comment">#用户视图下使用</span></span><br></pre></td></tr></table></figure><p>VLAN：交换机按照其端口区分了多个网段,从而区分了广播数据传播的范围、减少了网络负载并提高了网络的安全性。,然而异构的两个网段之间,就需要利用<code>具有路由功能的交换机(如3层交换机)</code>,或在各段中间通过路由器的连接才能实现通信。<br><img src="https://img-blog.csdnimg.cn/20210320193250925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="九、VLAN技术与应用"><a href="#九、VLAN技术与应用" class="headerlink" title="九、VLAN技术与应用"></a>九、VLAN技术与应用</h2><h3 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h3><p>广播域指接收同样广播消息的节点的集合：在该集合中的任何一个节点传输一个广播帧，则其他所有能接收到这个帧的节点都被认为是该广播帧的一部分；<code>交换机的所有接口默认属于同一个广播域；</code></p><h3 id="VLAN概述"><a href="#VLAN概述" class="headerlink" title="VLAN概述"></a>VLAN概述</h3><p><code>什么是VLAN</code>:Virtual LAN(虚拟局域网)是物理设备上连接的不受物理位置限制的用户的一个逻辑组；<br><code>为什么引入VLAN</code>:交换机的所有接口默认属于同一个广播域；随着接入设备的增多，网络中广播增多，降低了网络的效率；<code>为了分割广播域，引入了VLAN</code></p><h3 id="VLAN的作用"><a href="#VLAN的作用" class="headerlink" title="VLAN的作用"></a>VLAN的作用</h3><ul><li>广播控制；</li><li>增加安全性；</li><li>提高带宽利用；</li><li>降低延迟<h3 id="静态VLAN的配置"><a href="#静态VLAN的配置" class="headerlink" title="静态VLAN的配置"></a>静态VLAN的配置</h3>VLAN的最大数量(默认)：4096个(vlan0默认保留，从vlan1开始，vlan1是默认存在的，所有接口默认<br>属于vlan1)<br><code>配置VLAN的步骤</code></li></ul><ol><li>创建VLAN；</li><li>将接口加入到相应的VLAN中；</li><li>验证<h3 id="查看VLAN"><a href="#查看VLAN" class="headerlink" title="查看VLAN"></a>查看VLAN</h3><img src="https://img-blog.csdnimg.cn/20210321100849997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#查看当前设备下定义了哪些vlan，vlan下都有哪些接口</span></span><br></pre></td></tr></table></figure><h3 id="创建单个VLAN"><a href="#创建单个VLAN" class="headerlink" title="创建单个VLAN"></a>创建单个VLAN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]vlan 10 <span class="comment">#创建vlan 10</span></span><br><span class="line">[Huawei-vlan10]quit <span class="comment">#创建后会默认进入vlan10中，退出即可</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#查看我们创建的vlan</span></span><br></pre></td></tr></table></figure><h3 id="批量创建VLAN"><a href="#批量创建VLAN" class="headerlink" title="批量创建VLAN"></a>批量创建VLAN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]vlan batch 10 15 20 <span class="comment">#同时创建多个不连续的vlan</span></span><br><span class="line">[Huawei]vlan batch 30 to 35 <span class="comment">#同时创建多个连续的vlan</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的创建结果</span></span><br></pre></td></tr></table></figure><h3 id="删除VLAN"><a href="#删除VLAN" class="headerlink" title="删除VLAN"></a>删除VLAN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#查看设备下都有哪些vlan</span></span><br><span class="line">[Huawei]undo vlan 10 <span class="comment">#删除vlan 10</span></span><br><span class="line">[Huawei]undo vlan batch 10 15 <span class="comment">#删除vlan 10和vlan 15</span></span><br><span class="line">[Huawei]undo vlan batch 30 to 35 <span class="comment">#删除30到35之间的vlan</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br></pre></td></tr></table></figure><h3 id="将接口加入VLAN"><a href="#将接口加入VLAN" class="headerlink" title="将接口加入VLAN"></a>将接口加入VLAN</h3><ul><li>首先将接口视图的类型修改成 access;</li><li>然后再将接口加入到 VLAN中</li></ul><h4 id="将单个接口加入到vlan"><a href="#将单个接口加入到vlan" class="headerlink" title="将单个接口加入到vlan"></a>将单个接口加入到vlan</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]interface ethernet 0/0/1 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-ethernet0/0/1]port link-type access <span class="comment">#修改接口视图的类型为access</span></span><br><span class="line">[Huawei-ethernet0/0/1]port default vlan 2 <span class="comment">#将接口ethernet 0/0/1加入到vlan 2中</span></span><br><span class="line">[Huawei-ethernet0/0/1]undo port default vlan <span class="comment">#将接口从vlan中删除</span></span><br><span class="line">[Huawei-ethernet0/0/1]undo port link-type</span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br></pre></td></tr></table></figure><h4 id="将不连续多个接口加入到vlan"><a href="#将不连续多个接口加入到vlan" class="headerlink" title="将不连续多个接口加入到vlan"></a>将不连续多个接口加入到vlan</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将不连续的端口加入到vlan2,首先创建端口组，再对端口进行配置：</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]port-group 1 <span class="comment">#接口组的组号可以自己定义，1或2或3或4等等</span></span><br><span class="line">[Huawei-port-group-1]group-member ethernet0/0/2 ethernet0/0/5 <span class="comment">#将接口加入到接口组中</span></span><br><span class="line">[Huawei-port-group-1]port link-type access <span class="comment">#修改接口视图的类型为access</span></span><br><span class="line">[Huawei-port-group-1]port default vlan 2 <span class="comment">#将接口组中所有的接口加入到vlan 2中</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br></pre></td></tr></table></figure><h4 id="将连续多个接口加入到vlan"><a href="#将连续多个接口加入到vlan" class="headerlink" title="将连续多个接口加入到vlan"></a>将连续多个接口加入到vlan</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将连续的端口加入到vlan 3中,首先创建端口组，再对端口进行配置：</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]port-group 2 <span class="comment">#接口组的组号可以自己定义，1或2或3或4等等</span></span><br><span class="line">[Huawei-port-group-2]group-member ethernet0/0/2 to ethernet0/0/5</span><br><span class="line"><span class="comment">#将接口加入到接口组中</span></span><br><span class="line">[Huawei-port-group-2]port link-type access <span class="comment">#修改接口视图的类型为access</span></span><br><span class="line">[Huawei-port-group-2]port default vlan 3 <span class="comment">#将接口组中所有的接口加入到vlan 4中</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210321101036674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210321101052537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="十、Trunk中继链路"><a href="#十、Trunk中继链路" class="headerlink" title="十、Trunk中继链路"></a>十、Trunk中继链路</h2><p><code>Trunk出现的原因：</code>接入链路只能实现一个vlan通信，终极链路可以实现多个vlan通信。<br><img src="https://img-blog.csdnimg.cn/20210321102032630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210321102037264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210321102103911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Trunk概念和特点"><a href="#Trunk概念和特点" class="headerlink" title="Trunk概念和特点"></a>Trunk概念和特点</h3><p>trunk干道类型，<code>一般应用在交换机和交换机相连的接口上</code>；特点：</p><ul><li>用在交换机之间，<code>可以实现不同交换机上相同VLAN通信</code>;</li><li>中继链路不属于任何VLAN;</li><li>中继链路可以承载所有VLAN的数据;<h3 id="Trunk的配置"><a href="#Trunk的配置" class="headerlink" title="Trunk的配置"></a>Trunk的配置</h3>首先，进入端口后修改端口链路类型,然后，为已经修改为Trunk模式的端口添加允许的VLAN,注意：Trunk的配置是在交换机的接口上配置的，配置的接口为连接两台交换机的线缆的接口，两台交换机都得配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]interface Ethernet0/0/1 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1]port link-type trunk <span class="comment">#接口中修改链路类型魏trunk</span></span><br><span class="line">[Huawei-Ethernet0/0/1]port trunk allow-pass vlan all <span class="comment">#允许这个接口可以通过所有的vlan</span></span><br></pre></td></tr></table></figure><h3 id="链路聚合功能"><a href="#链路聚合功能" class="headerlink" title="链路聚合功能"></a>链路聚合功能</h3>也叫以太通道, 如果交换机之间只有一条线路，这条链路可能成为网络的瓶颈;<code>可以在交换机之间再增加额外的链路</code>，<code>使多条链路成为一个逻辑链路</code>;</li><li>多条线路负载均衡，提高带宽</li><li>容错，当一条线路失效时，不会造成全网中断<br><img src="https://img-blog.csdnimg.cn/20210321102247388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="十一、链路聚合的配置"><a href="#十一、链路聚合的配置" class="headerlink" title="十一、链路聚合的配置"></a>十一、链路聚合的配置</h2><h3 id="初始化接口"><a href="#初始化接口" class="headerlink" title="初始化接口"></a>初始化接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]clear configuration interface Ethernet 0/0/1 <span class="comment">#清除e 0/0/1的自定义配置,让接口回复到初始状态</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#查看接口 e 0/0/1 的状态，接口必须是up（开启状态）</span></span><br><span class="line"><span class="comment">#如果e 0/0/1 的接口状态为down(关闭状态，则需要手动开启)</span></span><br><span class="line">[Huawei]interface Ethernet0/0/1 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1]undo shutdown <span class="comment">#不关闭接口，即开启接口</span></span><br><span class="line">[Huawei-Ethernet0/0/1]quit <span class="comment">#返回到系统视图下</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#再次确认接口状态</span></span><br></pre></td></tr></table></figure><h3 id="创建链路聚合接口-即虚拟接口"><a href="#创建链路聚合接口-即虚拟接口" class="headerlink" title="创建链路聚合接口(即虚拟接口)"></a>创建链路聚合接口(即虚拟接口)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]interface Eth-Trunk 1 <span class="comment">#进入的同时会自己先创建链路聚合接口</span></span><br><span class="line">[Huawei-Eth-Trunk1]quit <span class="comment">#返回系统视图</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#可以看到新创建的链路聚合接口</span></span><br></pre></td></tr></table></figure><h3 id="将通过vlan的接口加入到链路聚合接口中"><a href="#将通过vlan的接口加入到链路聚合接口中" class="headerlink" title="将通过vlan的接口加入到链路聚合接口中"></a>将通过vlan的接口加入到链路聚合接口中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先，先将ethernet 0/0/1 接口加入到链路聚合接口中</span></span><br><span class="line">[Huawei]interface Ethernet0/0/1 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1]eth-trunk 1 <span class="comment">#将e 0/0/1接口加入eth-trunk 1中</span></span><br><span class="line">[Huawei-Ethernet0/0/1]quit</span><br><span class="line">[Huawei]display interface brief <span class="comment">#确认是否加入</span></span><br><span class="line"><span class="comment">#其次，再将ethernet 0/0/2 接口也加入到链路聚合接口中</span></span><br><span class="line">[Huawei]interface Ethernet0/0/2 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/1]eth-trunk 1 <span class="comment">#将e 0/0/2接口加入eth-trunk 1中</span></span><br><span class="line">[Huawei-Ethernet0/0/1]quit</span><br><span class="line">[Huawei]display interface brief <span class="comment">#确认e 0/0/2接口也加入到 eth-trunk 1中</span></span><br><span class="line"><span class="comment">#还可以通过另一种方式将接口加入到链路聚合接口中</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]interface Eth-Trunk 1 <span class="comment">#进入链路聚合接口</span></span><br><span class="line">[Huawei-Eth-Trunk1]trunkport Ethernet 0/0/1 0/0/2</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210321102314201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>检查<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display this</span><br></pre></td></tr></table></figure></li></ul><h2 id="十二、拓扑结构练习"><a href="#十二、拓扑结构练习" class="headerlink" title="十二、拓扑结构练习"></a>十二、拓扑结构练习</h2><ul><li><code>第一步</code>：设计好网络拓扑结构<br><img src="https://img-blog.csdnimg.cn/20210320201959798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><code>第二步</code>：配置IP地址和子网掩码,在每台电脑上配置相应的IP地址和子网掩码</li><li><code>第三步</code>：在交换机上配置vlan并将接口加入到相应的vlan中（LSW1 和 LSW2 都要做）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]vlan batch 2 to 3 <span class="comment">#创建vlan 2 和vlan 3</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证结果</span></span><br><span class="line">[Huawei]port-group 1 <span class="comment">#接口组的组号可以自己定义，1或2或3或4等等</span></span><br><span class="line">[Huawei-port-group-1]group-member ethernet0/0/3 to ethernet0/0/4 <span class="comment">#将接口加入到接口组中</span></span><br><span class="line">[Huawei-port-group-1]port link-type access <span class="comment">#修改接口视图的类型为access</span></span><br><span class="line">[Huawei-port-group-1]port default vlan 2 <span class="comment">#将接口组中所有的接口加入到vlan 2中</span></span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br><span class="line">[Huawei]port-group 2</span><br><span class="line">[Huawei-port-group-2]group-member ethernet0/0/5 to ethernet0/0/6</span><br><span class="line">[Huawei-port-group-2]port link-type access</span><br><span class="line">[Huawei-port-group-2]port default vlan 3</span><br><span class="line">[Huawei]display vlan <span class="comment">#验证我们的操作</span></span><br></pre></td></tr></table></figure><ul><li>如果交换机之间只有一条线，则需要配置中继链路，执行第四步操作；如果交换机要提高传输速率，和安全性，则需要配置聚合链路，执行第五步操作；</li><li>第四步：配置中继链路，让所有的vlan 都可以通过交换机之间的一条线路进行通信（LSW1 和 LSW2都要做）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在交换机相互连接的接口上配置，我这里都是 Ethernet 0/0/7</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]interface Ethernet0/0/7 <span class="comment">#进入接口视图</span></span><br><span class="line">[Huawei-Ethernet0/0/7]port link-type trunk <span class="comment">#接口中修改链路类型魏trunk</span></span><br><span class="line">[Huawei-Ethernet0/0/7]port trunk allow-pass vlan all <span class="comment">#允许这个接口可以通过所有的</span></span><br><span class="line">vlan</span><br><span class="line">&lt;Huawei&gt;save <span class="comment">#存盘</span></span><br><span class="line"><span class="comment">#配置完成，用ping命令测试</span></span><br></pre></td></tr></table></figure><ul><li><code>第五步</code>：配置聚合链路，将两条线路捆绑起来，提高带宽和安全性（LSW1 和 LSW2 都要做）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交换机之间增加了一条网线，两端接口均为 Ethernet 0/0/8</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]clear configuration interface Ethernet 0/0/7 <span class="comment">#如果接口上之前做了配置，先清空接口信息</span></span><br><span class="line">[Huawei]interface Ethernet0/0/7</span><br><span class="line">[Huawei-Ethernet0/0/7]display this <span class="comment">#发现shutdown，接口关闭，需要开启</span></span><br><span class="line">[Huawei-Ethernet0/0/7]undo shutdown <span class="comment">#开启接口</span></span><br><span class="line">[Huawei]interface Eth-Trunk 1 <span class="comment">#进入的同时会自己先创建链路聚合接口</span></span><br><span class="line">[Huawei-Eth-Trunk1]trunkport Ethernet 0/0/7 0/0/8 <span class="comment">#将两个接口一起加入Eth-Trunk1中</span></span><br><span class="line">[Huawei-Eth-Trunk1]port link-type trunk</span><br><span class="line">[Huawei-Eth-Trunk1]port trunk allow-pass vlan all</span><br><span class="line">[Huawei-Eth-Trunk1]display this <span class="comment">#可以查看到允许所以的vlan通过</span></span><br><span class="line">[Huawei]display current-configuration <span class="comment">#验证自己的配置结果</span></span><br><span class="line">&lt;Huawei&gt;save <span class="comment">#存盘</span></span><br><span class="line"><span class="comment">#配置完成，用ping命令测试，删除一条线，再次用ping命令测试</span></span><br></pre></td></tr></table></figure><h2 id="十三、路由原理及配置"><a href="#十三、路由原理及配置" class="headerlink" title="十三、路由原理及配置"></a>十三、路由原理及配置</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3>将数据包从一个网络发送到另一个网络，需要依靠路由器来完成；<code>路由器只关心网络的状态，决定最佳路径路由器可以根据路由表选择最佳路径</code></li><li>每个路由器都维护着一张<code>路由表</code>，这是路由器转发数据包的关键；</li><li>每条路由表记录指明了：<code>到达某个子网或主机应从路由器的哪个物理接口发送，通过此接口可到达该路径的下一个路由器的地址(或直接相连网络中的目标主机地址)</code><h3 id="如何获得路由表"><a href="#如何获得路由表" class="headerlink" title="如何获得路由表"></a>如何获得路由表</h3></li><li><code>直连路由:路由设备配置IP地址后自动生成；</code></li></ul><hr><h4 id="直连路由的配置："><a href="#直连路由的配置：" class="headerlink" title="直连路由的配置："></a>直连路由的配置：</h4><p><img src="https://img-blog.csdnimg.cn/20210321112910467.png" alt="在这里插入图片描述"></p><ul><li><code>第一步</code>：设计好网络拓扑结构；</li><li><code>第二步</code>：在PC2和PC1中配置IP地址，子网掩码和网关；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC2: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC1: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在路由器AR2上给相应的接口配置IP地址；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图下</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#查看设备接口信息，百兆还是千兆接口</span></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/0 <span class="comment">#进入g 0/0/0的接口视图下</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.254 255.255.255.0 <span class="comment">#为接口 g0/0/0配置IP地址和子网掩码</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display this <span class="comment">#查看配置结果</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]quit <span class="comment">#回到系统视图下</span></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1 <span class="comment"># #进入g 0/0/1的接口视图下</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.2.254 255.255.255.0 <span class="comment">##为接口 g0/0/0配置IP地址和子网掩码</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display this <span class="comment">#查看配置结果</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/1]quit <span class="comment">#退回到系统视图</span></span><br><span class="line">[Huawei]display ip routing-table <span class="comment">#查看路由表信息，数据过多，可以用下面命令来筛选</span></span><br><span class="line">[Huawei]display ip routing-table | include /24 <span class="comment">#删选查看，只查看 /24结尾的路由信息</span></span><br></pre></td></tr></table></figure></li><li><code>第四步</code>：使用 ping 命令 进行测试</li></ul><hr><ul><li><code>静态路由:由管理员在路由器上手工指定；</code>:</li><li>动态路由:根据网络拓扑或流量变化，由路由器通过路由协议自动设置；适合ISP服务商、广域网、园区网等大型网络<h2 id="十四、静态路由与默认路由"><a href="#十四、静态路由与默认路由" class="headerlink" title="十四、静态路由与默认路由"></a>十四、静态路由与默认路由</h2><h3 id="静态路由主要特点"><a href="#静态路由主要特点" class="headerlink" title="静态路由主要特点"></a>静态路由主要特点</h3>由管理员手工配置，为单向条目；通信双方的边缘路由器都需要指定，否则会导致数据包有去无回；<br>使用 ip route-static 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1》指定到达 IP 目的网络；</span><br><span class="line">2》基本格式：</span><br><span class="line">[Huawei]ip route-static 目标网络ID 子网掩码 下一跳</span><br><span class="line"><span class="comment">#目标网络ID 一般为网段，可以代表这个网段下的所有主机，IP地址只能代表一台主机,局限性比较大</span></span><br><span class="line">[Huawei]dis ip routing-table | include /24 <span class="comment">#确认自己配置的是否正确</span></span><br></pre></td></tr></table></figure><h3 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h3></li><li>默认路由是一种特殊的静态路由；</li><li>默认路由的目标网络为 <code>0.0.0.0 </code> <code>0.0.0.0</code>，可匹配任何目标地址；</li><li>只有当从路由表中找不到任何明确匹配的路由条目才会使用默认路由，<code>一般在企业网关出口使用</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目标网络为0.0.0.0，子网掩码简写为0，192.168.2.2 为下一跳</span></span><br></pre></td></tr></table></figure></li><li>默认路由不能随便配置。容易照成路由环路，只能用于内部网路和外部网路。</li></ul><hr><h4 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h4><p><img src="https://img-blog.csdnimg.cn/2021032112494288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><ul><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210321122408193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><code>第二步</code>：在PC1、PC2 和 PC3 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.3.1/24 网关：192.168.3.254</span><br><span class="line">PC3: IP地址：192.168.4.1/24 网关：192.168.4.254</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在路由器AR1上给相应的接口配置IP地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/0 上给192.168.1.0/24网段配置网关，IP地址：192.168.1.254/24</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图下</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#查看设备接口信息，百兆还是千兆接口</span></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/0 <span class="comment">#进入g 0/0/0的接口视图下</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.254 255.255.255.0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display this</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/1 上配置IP地址：192.168.2.1/24</span></span><br><span class="line">&lt;Huawei&gt;sys</span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.2.1 24 <span class="comment">#掩码255.255.255.0 可以用24 来表示</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display this</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]quit</span><br><span class="line">[Huawei]dis ip routing-table | include /24 <span class="comment">#确认自己配置的是否正确</span></span><br></pre></td></tr></table></figure></li><li><code>第四步</code>：在路由器 AR2 上给相应的接口配置IP地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/1 上配置IP地址：192.168.2.2/24</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.2.2 24 <span class="comment">#掩码255.255.255.0可以用 24 来表示</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display this</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/0 上给192.168.3.0/24 网段配置网关，IP地址：192.168.3.254/24</span></span><br><span class="line">&lt;Huawei&gt;</span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图下</span></span><br><span class="line">[Huawei]display interface brief <span class="comment">#查看设备接口信息，百兆还是千兆接口</span></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/0 <span class="comment">#进入g 0/0/0的接口视图下</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.3.254 255.255.255.0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display this</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/2 上给192.168.4.0/24网段配置网关，IP地址：192.168.4.254/24</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.4.254 24 <span class="comment">#掩码255.255.255.0可以用 24 来表示</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/2]display this</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]quit</span><br><span class="line">[Huawei]dis ip routing-table | include /24 <span class="comment">#确认自己配置的是否正确</span></span><br></pre></td></tr></table></figure></li><li><code>第五步</code>：配置静态路由，让全网互通<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AR1上配置静态路由，AR2上也要配置，否则不通</span></span><br><span class="line"><span class="comment">#静态路由的配置是让在不同路由器上的设备互相连通的，如果设备是由同一台路由器连接的，是直接通过直连路由是连通的</span></span><br><span class="line">[Huawei]ip route-static 192.168.3.0 24 192.168.2.2 <span class="comment">#目标地址为3.0网段，代表这个网段下的所有主机</span></span><br><span class="line">[Huawei]ip route-static 192.168.4.0 24 192.168.2.2</span><br><span class="line">[Huawei]dis ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AR2上配置静态路由，AR1上也要配置，否则不通</span></span><br><span class="line">[Huawei]ip route-static 192.168.1.0 24 192.168.2.1</span><br><span class="line">[Huawei]dis ip routing-table | include /24 <span class="comment">#发现这台路由器上的192.168.3.0/24 网段和 192.168.4.0/24 网段都设置了静态路由</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><code>注释：如果发现IP地址配置错误，使用如下方法删除并重新设置</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display this <span class="comment">#复制粘贴信息</span></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]undo ip address 192.168.3.200 255.255.255.0 <span class="comment">#删除</span></span><br><span class="line">IP地址</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display this</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.3.254 24 <span class="comment">#设置新的IP地址</span></span><br></pre></td></tr></table></figure><ul><li><code>第六步</code>：使用 ping 命令 进行测试</li><li><code>第七步</code>：保存配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;save <span class="comment">#永久保存配置信息，只能在用户视图下进行</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210321134108465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="十五、三层交换机"><a href="#十五、三层交换机" class="headerlink" title="十五、三层交换机"></a>十五、三层交换机</h2><h3 id="什么是三层交换"><a href="#什么是三层交换" class="headerlink" title="什么是三层交换"></a>什么是三层交换</h3>实现数据互通必须使用交换机，交换机只能连接相同的网段的网路互通，交换机是链路层工具（二层）。路由器(具备路由转发功能，三层)是网络层工具，使用三层交换技术实现VLAN间通信；三层交换 = 二层交换 + 三层转发。<br><img src="https://img-blog.csdnimg.cn/20210324065408754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-D9MnPcsX-1616539978036)(imgclip.png &quot;imgclip.png&quot;)]"><br>使用三层交换机必须使用VLAN<h3 id="虚接口概述"><a href="#虚接口概述" class="headerlink" title="虚接口概述"></a>虚接口概述</h3>三层交换机连接不同网段的，类似二层交换机连接不同的网段。使用三层需要规划好VLAN，二层交换机的不同网段，类别于三层交换机的不用的VLAN。<br>在三层交换机上配置的VLAN接口为虚拟接口；<br>使用 vlanif (VLAN接口) 实现VLAN间路由：VLAN接口的引入使得应用更加灵活。VLAN 接口相当于二层交换机的路由接口配置。<br><img src="https://img-blog.csdnimg.cn/20210324065432354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Sltoc280-1616539978042)(imgclip_1.png &quot;imgclip_1.png&quot;)]"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface Vlanif 1 <span class="comment">#进入vlan的虚接口，可以是2，3，4...</span></span><br><span class="line">[Huawei-Vlanif1]ip address 192.168.1.254 24 <span class="comment">#给虚接口设置IP地址，相当于VLAN1的网关</span></span><br><span class="line">[Huawei-Vlanif1]display this <span class="comment">#查看配置的结果</span></span><br><span class="line">[Huawei]display ip interface brief</span><br></pre></td></tr></table></figure><h3 id="三层交换配置思路"><a href="#三层交换配置思路" class="headerlink" title="三层交换配置思路"></a>三层交换配置思路</h3></li><li>确认哪些VLAN需要配置网关；</li><li>如果三层交换机上没有该VLAN则创建它；</li><li>为每个VLAN创建相关的虚拟接口；</li><li>给每个VLAN虚拟接口配置IP地址；</li><li>如果需要，配置三层交换机的动态或静态路由</li></ul><h4 id="三层交换VLAN间通信"><a href="#三层交换VLAN间通信" class="headerlink" title="三层交换VLAN间通信"></a>三层交换VLAN间通信</h4><p>路由器默认只有三个接口，<code>最多只能连接三个不同的网段。想要多网段互通，需要使用多个路由器来实现多网段的路由配置。</code>这样十分浪费资源，解决办法是使用，三层交换机。<br><code>路由器默认只有三个接口</code><br><img src="https://img-blog.csdnimg.cn/20210324065452651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eB6SNOS7-1616539978045)(imgclip_3.png &quot;imgclip_3.png&quot;)]"></p><ul><li><code>第一步</code>：设计好网络拓扑结构；</li><li><code>第二步</code>：在PC1、PC2 和 PC3 中配置IP地址，子网掩码和网关；<br><img src="https://img-blog.csdnimg.cn/20210324065506648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HOTp17Xl-1616539978049)(imgclip_2.png &quot;imgclip_2.png&quot;)]"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.3.1/24 网关：192.168.3.254</span><br></pre></td></tr></table></figure><ul><li><code>第三步</code>：在三层交换机LSW1上创建VLAN；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]vlan batch 2 to 3 <span class="comment">#根据设备所在的vlan,在三次交换机上创建相应的vlan</span></span><br></pre></td></tr></table></figure></li><li><code>第四步</code>：将接口加入到对应VLAN中；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port default vlan 2</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port default vlan 3</span><br></pre></td></tr></table></figure><ul><li><code>第五步</code>：在三层交换机上给VLAN配置网关；`<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给 vlan 1配置网关：192.168.1.254/24</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface Vlanif 1</span><br><span class="line">[Huawei-Vlanif1]ip address 192.168.1.254 24</span><br><span class="line">[Huawei-Vlanif1]display this <span class="comment">#查看配置的结果</span></span><br><span class="line"><span class="comment">#给 vlan 2配置网关：192.168.2.254/24</span></span><br><span class="line">[Huawei]interface Vlanif 2</span><br><span class="line">[Huawei-Vlanif2]ip address 192.168.2.254 24</span><br><span class="line">[Huawei-Vlanif2]display this <span class="comment">#查看配置的结果</span></span><br><span class="line"><span class="comment">#给 vlan 3配置网关：192.168.3.254/24</span></span><br><span class="line">[Huawei]interface Vlanif 3</span><br><span class="line">[Huawei-Vlanif3]ip address 192.168.3.254 24</span><br><span class="line">[Huawei-Vlanif3]display this <span class="comment">#查看配置的结果</span></span><br><span class="line">[Huawei-Vlanif3]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24 <span class="comment">#查看配置的所有VLAN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><code>第六步</code>：使用 ping 命令 进行测试</li></ul><h2 id="十六、综合组网"><a href="#十六、综合组网" class="headerlink" title="十六、综合组网"></a>十六、综合组网</h2><p><code>案例(更合理的使用三层交换机)</code>：交换机、三层交换、路由构建网络<br><img src="https://img-blog.csdnimg.cn/20210324220411703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><code>第一步</code>：设计好网络拓扑结构；为了缓解三层交换机的压力，通常连接外部网路需要连接一个路由器。路由器的功能要比三成交换机强大。<br><img src="https://img-blog.csdnimg.cn/20210324065528408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-miywkSVO-1616539978055)(imgclip_4.png &quot;imgclip_4.png&quot;)]"></li><li><code>第二步</code>：在PC1、PC2 和 PC3 及PC4 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.3.1/24 网关：192.168.3.254</span><br><span class="line">PC4: IP地址：192.168.5.1/24 网关：192.168.5.254</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在二层交换机 (S3700) LSW1上创建VLAN；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;LSW1&gt;system-view</span><br><span class="line">[LSW1]vlan batch 2 to 3 <span class="comment">#二层交换机上创建vlan</span></span><br></pre></td></tr></table></figure></li><li><code>第四步</code>：将接口加入到交换机 (S3700) LSW1相应的vlan中；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[LSW1]interface Ethernet 0/0/2</span><br><span class="line">[LSW1-Ethernet0/0/2]port link-type access</span><br><span class="line">[LSW1-Ethernet0/0/2]port default vlan 2</span><br><span class="line">[LSW1-Ethernet0/0/2]display vlan <span class="comment">#查看结果</span></span><br><span class="line">[LSW1]interface Ethernet 0/0/3</span><br><span class="line">[LSW1-Ethernet0/0/3]port link-type access</span><br><span class="line">[LSW1-Ethernet0/0/3]port default vlan 3</span><br><span class="line">[LSW1-Ethernet0/0/3]display vlan <span class="comment">#查看结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>第五步</code>：在二层交换机LSW1 (S3700) 和三层交换机LSW2(S5700) 上配置trunk（中继链路）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在二层交换机LSW1 (S3700)的Ethernet 0/0/4接口配置trunk</span></span><br><span class="line">[LSW1]interface Ethernet 0/0/4</span><br><span class="line">[LSW1-Ethernet0/0/4]port link-type trunk</span><br><span class="line">[LSW1-Ethernet0/0/4]port trunk allow-pass vlan all</span><br><span class="line">[LSW1-Ethernet0/0/4]quit</span><br><span class="line">[LSW1]display current-configuration</span><br><span class="line"><span class="comment">#在三层交换机LSW2(S5700)的Ethernet 0/0/4接口配置trunk</span></span><br><span class="line">[LSW2]interface GigabitEthernet 0/0/1</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]port trunk allow-pass vlan all</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]quit</span><br><span class="line">[LSW2]display current-configuration</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>第六步</code>：在三层交换机LSW2(S5700)上创建vlan，并将接口GE 0/0/2加入到vlan 4中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;LSW2&gt;system-view</span><br><span class="line">[LSW2]vlan batch 2 to 4 <span class="comment">#三层交换机上创建vlan</span></span><br><span class="line">[LSW2]interface GigabitEthernet 0/0/2</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]port link-type access</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]port default vlan 4</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]display vlan <span class="comment">#查看结果</span></span><br></pre></td></tr></table></figure><ul><li><p><code>第七步</code>：在三层交换机 LSW2(S5700) 的虚接口上配置IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在vlan 1上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 1</span><br><span class="line">[LSW2-Vlanif1]ip address 192.168.1.254 24</span><br><span class="line">[LSW2-Vlanif1]quit</span><br><span class="line"><span class="comment">#在vlan 2上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 2</span><br><span class="line">[LSW2-Vlanif2]ip address 192.168.2.254 24</span><br><span class="line">[LSW2-Vlanif2]quit</span><br><span class="line"><span class="comment">#在vlan 3上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 3</span><br><span class="line">[LSW2-Vlanif3]ip address 192.168.3.254 24</span><br><span class="line">[LSW2-Vlanif3]quit</span><br><span class="line"><span class="comment">#在vlan 4上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 4</span><br><span class="line">[LSW2-Vlanif4]ip address 192.168.4.1 24</span><br><span class="line">[LSW2-Vlanif4]quit</span><br><span class="line">[LSW2]display ip routing-table | include /24 <span class="comment">#查看虚接口配置信息</span></span><br></pre></td></tr></table></figure></li><li><p><code>第八步</code>：在路由器AR1(AR2220) 上给接口配置IP地址</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;AR1&gt;system-view</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.4.2 24</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.5.254 24 <span class="comment">#在路由器上给5.0网段配置网关</span></span><br><span class="line">[AR1]display ip routing-table | include /24 <span class="comment">#查看接口IP地址配置信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>第九步</code>：在三层交换机LSW2(S5700)上配置静态路由</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;LSW2&gt;system-view</span><br><span class="line">[LSW2]ip route-static 192.168.5.0 24 192.168.4.2 <span class="comment">#目标网段，子网掩码，下一跳地址</span></span><br><span class="line">[LSW2]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><ul><li><code>第十步</code>：在路由器AR1(AR2220) 上配置静态路由</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;AR1&gt;system-view</span><br><span class="line">[AR1]ip route-static 192.168.1.0 24 192.168.4.1 <span class="comment">#目标网段，子网掩码，下一跳地址</span></span><br><span class="line">[AR1]ip route-static 192.168.2.0 24 192.168.4.1</span><br><span class="line">[AR1]ip route-static 192.168.3.0 24 192.168.4.1</span><br><span class="line">[AR1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><ul><li><code>第十一步</code>：测试，保持全网互通</li></ul><h2 id="十七、动态路由"><a href="#十七、动态路由" class="headerlink" title="十七、动态路由"></a>十七、动态路由</h2><h3 id="动态路由概述"><a href="#动态路由概述" class="headerlink" title="动态路由概述"></a>动态路由概述</h3><p>动态路由是基于某种路由协议来实现的；使用动态路由可以减少了管理任务；但是占用了网络带宽.<br><img src="https://img-blog.csdnimg.cn/20210324222134197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图为直连路由，配置动态路由的时候，所以路由都需要开启动态路由，同时需要<code>宣告</code>连接的网段。实现的网段共享。全网互通。全网可达。<br><img src="https://img-blog.csdnimg.cn/20210324222626115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>动态更新路由信息</code><br><img src="https://img-blog.csdnimg.cn/20210324222851304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="动态路由协议-OSPF"><a href="#动态路由协议-OSPF" class="headerlink" title="动态路由协议 OSPF"></a>动态路由协议 OSPF</h3><p>动态路由协议 <code>OSPF</code>，全称为Open Shortest Path Firsh ( 开放式最短路径优先 )；适合大中型网络使用；</p><h4 id="OSPF区域"><a href="#OSPF区域" class="headerlink" title="OSPF区域"></a>OSPF区域</h4><p>为了适应大型的网络，<code>OSPF</code>在网络内部划分多个区域；每个<code>OSPF</code>路由器只维护所在区域的完整链路状态信息</p><h4 id="区域ID"><a href="#区域ID" class="headerlink" title="区域ID"></a>区域ID</h4><p>区域ID可以表示成一个十进制的数字；也可以表示一个IP</p><h4 id="骨干区域Area-0"><a href="#骨干区域Area-0" class="headerlink" title="骨干区域Area 0"></a>骨干区域Area 0</h4><p>负责区域间路由信息的传播，必须要拥有的一个区域</p><h2 id="十八、OSPF配置"><a href="#十八、OSPF配置" class="headerlink" title="十八、OSPF配置"></a>十八、OSPF配置</h2><h3 id="OSPF基本配置"><a href="#OSPF基本配置" class="headerlink" title="OSPF基本配置"></a>OSPF基本配置</h3><ul><li>启动OSPF路由进程并进入首个区域<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ospf 1 <span class="comment">#开启一个进程，进程号为 1，小型网络开启一个进程就可以</span></span><br><span class="line">[Huawei-ospf-1]area 0 <span class="comment">#进入骨干区域，相当于控制中枢，必须得有</span></span><br></pre></td></tr></table></figure></li><li>宣告所在的网段<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.0.0 0.0.0.255 <span class="comment">#宣告网段，192.168.0.0的子网掩码为255.255.255.0，反掩码则为0.0.0.255</span></span><br></pre></td></tr></table></figure><h2 id="十九、OSPF动态路由配置案例"><a href="#十九、OSPF动态路由配置案例" class="headerlink" title="十九、OSPF动态路由配置案例"></a>十九、OSPF动态路由配置案例</h2></li><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210324224134252.png" alt="在这里插入图片描述"></li><li><code>第二步</code>：在PC1、PC2 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：10.0.0.1/8 网关：10.0.0.2</span><br><span class="line">PC2: IP地址：40.0.0.2/8 网关：40.0.0.1</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在路由器AR1(AR2220) 上的接口上配置IP地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口 g0/0/0 上配置IP地址</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 10.0.0.2 8</span><br><span class="line"><span class="comment">#在接口 g0/0/1 上配置IP地址</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 20.0.0.1 8</span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#通过路由表查看配置结果</span></span><br><span class="line">[AR1]display ip routing-table | include /8</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在路由器AR2(AR2220) 上的接口上配置IP地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口 g0/0/0 上配置IP地址</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR2-GigabitEthernet0/0/0]ip address 20.0.0.2 8</span><br><span class="line"><span class="comment">#在接口 g0/0/1 上配置IP地址</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR2-GigabitEthernet0/0/1]ip address 30.0.0.1 8</span><br><span class="line">[AR2-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#通过路由表查看配置结果</span></span><br><span class="line">[AR2]display ip routing-table | include /8</span><br></pre></td></tr></table></figure><ul><li><code>第四步</code>：在路由器AR3(AR2220) 上的接口上配置IP地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口 g0/0/0 上配置IP地址</span></span><br><span class="line">[AR3]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR3-GigabitEthernet0/0/0]ip address 30.0.0.2 8</span><br><span class="line"><span class="comment">#在接口 g0/0/1 上配置IP地址</span></span><br><span class="line">[AR3-GigabitEthernet0/0/0]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR3-GigabitEthernet0/0/1]ip address 40.0.0.1 8</span><br><span class="line">[AR3-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#通过路由表查看配置结果</span></span><br><span class="line">[AR1]display ip routing-table | include /8</span><br></pre></td></tr></table></figure><ul><li><code>第五步</code>：在路由器AR1(AR2220) 上配置动态路由OSPF</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[AR1]ospf 1 <span class="comment">#启动一个进程，进程号为 1</span></span><br><span class="line">[AR1-ospf-1]area 0 <span class="comment">#进入骨干区域</span></span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 10.0.0.0 0.255.255.255 <span class="comment">#宣告网段，10.0.0.0的子网掩码为255.0.0.0，`反掩码则为0.255.255.255`</span></span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 20.0.0.0 0.255.255.255</span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]display ip routing-table | include /8</span><br></pre></td></tr></table></figure><ul><li><code>第六步</code>：在路由器AR2(AR2220) 上配置动态路由OSPF</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[AR2]ospf 1 <span class="comment">#启动一个进程，进程号为 1</span></span><br><span class="line">[AR2-ospf-1]area 0 <span class="comment">#进入骨干区域</span></span><br><span class="line">[AR2-ospf-1-area-0.0.0.0]network 20.0.0.0 0.255.255.255 <span class="comment">#宣告网段，20.0.0.0的子网掩码为255.0.0.0，反掩码则为0.255.255.255</span></span><br><span class="line">[AR2-ospf-1-area-0.0.0.0]network 30.0.0.0 0.255.255.255</span><br><span class="line">[AR2-ospf-1-area-0.0.0.0]display ip routing-table | include /8</span><br></pre></td></tr></table></figure><ul><li><code>第七步</code>：在路由器AR3(AR2220) 上配置动态路由OSPF</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[AR3]ospf 1 <span class="comment">#启动一个进程，进程号为 1</span></span><br><span class="line">[AR3-ospf-1]area 0 <span class="comment">#进入骨干区域</span></span><br><span class="line">[AR3-ospf-1-area-0.0.0.0]network 30.0.0.0 0.255.255.255 <span class="comment">#宣告网段，30.0.0.0的子网掩码为255.0.0.0，反掩码则为0.255.255.255</span></span><br><span class="line">[AR3-ospf-1-area-0.0.0.0]network 40.0.0.0 0.255.255.255</span><br><span class="line">[AR3-ospf-1-area-0.0.0.0]display ip routing-table | include /8</span><br></pre></td></tr></table></figure><ul><li><code>第八步</code>：测试，保持全网互通</li></ul><h2 id="二十、案例使用动态路由完成综合组网"><a href="#二十、案例使用动态路由完成综合组网" class="headerlink" title="二十、案例使用动态路由完成综合组网"></a>二十、案例使用动态路由完成综合组网</h2><ul><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210324230056818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><code>第二步</code>：在PC1、PC2 和 PC3 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.3.1/24 网关：192.168.3.254</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在二层交换机 (S3700) LSW1上创建VLAN；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;LSW1&gt;system-view</span><br><span class="line">[LSW1]vlan batch 2 to 3 <span class="comment">#二层交换机上创建vlan</span></span><br></pre></td></tr></table></figure></li><li><code>第四步</code>：将接口加入到交换机 (S3700) LSW1相应的vlan中；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[LSW1]interface Ethernet 0/0/2</span><br><span class="line">[LSW1-Ethernet0/0/2]port link-type access</span><br><span class="line">[LSW1-Ethernet0/0/2]port default vlan 2</span><br><span class="line">[LSW1-Ethernet0/0/2]display vlan <span class="comment">#查看结果</span></span><br><span class="line">[LSW1]interface Ethernet 0/0/3</span><br><span class="line">[LSW1-Ethernet0/0/3]port link-type access</span><br><span class="line">[LSW1-Ethernet0/0/3]port default vlan 3</span><br><span class="line">[LSW1-Ethernet0/0/3]display vlan <span class="comment">#查看结果</span></span><br></pre></td></tr></table></figure></li><li><code>第五步</code>：在二层交换机LSW1 (S3700) 和三层交换机LSW2(S5700) 上配置trunk<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在二层交换机LSW1 (S3700)的Ethernet 0/0/4接口配置trunk</span></span><br><span class="line">[LSW1]interface Ethernet 0/0/4</span><br><span class="line">[LSW1-Ethernet0/0/4]port link-type trunk</span><br><span class="line">[LSW1-Ethernet0/0/4]port trunk allow-pass vlan all</span><br><span class="line">[LSW1-Ethernet0/0/4]quit</span><br><span class="line">[LSW1]display current-configuration</span><br><span class="line"><span class="comment">#在三层交换机LSW2(S5700)的Ethernet 0/0/4接口配置trunk</span></span><br><span class="line">[LSW2]interface GigabitEthernet 0/0/1</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]port link-type trunk</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]port trunk allow-pass vlan all</span><br><span class="line">[LSW2-GigabitEthernet0/0/1]quit</span><br><span class="line">[LSW2]display current-configuration</span><br></pre></td></tr></table></figure></li><li><code>第六步</code>：在三层交换机LSW2(S5700)上创建vlan，并将接口GE 0/0/2加入到vlan 4中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;LSW2&gt;system-view</span><br><span class="line">[LSW2]vlan batch 2 to 4 <span class="comment">#三层交换机上创建vlan</span></span><br><span class="line">[LSW2]interface GigabitEthernet 0/0/2</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]port link-type access</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]port default vlan 4</span><br><span class="line">[LSW2-GigabitEthernet0/0/2]display vlan <span class="comment">#查看结果</span></span><br></pre></td></tr></table></figure></li><li><code>第七步</code>：在三层交换机 LSW2(S5700) 的虚接口上配置IP<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在vlan 1上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 1</span><br><span class="line">[LSW2-Vlanif1]ip address 192.168.1.254 24</span><br><span class="line">[LSW2-Vlanif1]quit</span><br><span class="line"><span class="comment">#在vlan 2上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 2</span><br><span class="line">[LSW2-Vlanif2]ip address 192.168.2.254 24</span><br><span class="line">[LSW2-Vlanif2]quit</span><br><span class="line"><span class="comment">#在vlan 3上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 3</span><br><span class="line">[LSW2-Vlanif3]ip address 192.168.3.254 24</span><br><span class="line">[LSW2-Vlanif3]quit</span><br><span class="line"><span class="comment">#在vlan 4上配置IP地址</span></span><br><span class="line">[LSW2]interface Vlanif 4</span><br><span class="line">[LSW2-Vlanif4]ip address 192.168.4.1 24</span><br><span class="line">[LSW2-Vlanif4]quit</span><br></pre></td></tr></table></figure></li><li><code>第八步</code>：在路由器AR1(AR2220) 上给接口配置IP地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;AR1&gt;system-view</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.4.2 24</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.5.254 24 <span class="comment">#在路由器上给5.0网段配置网关</span></span><br><span class="line">[AR1]display ip routing-table | include /24 <span class="comment">#查看接口IP地址配置信息</span></span><br></pre></td></tr></table></figure></li><li><code>第八步</code>：在三层交换机LSW2(S5700)上配置动态路由<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#宣告网段，配置反掩码</span></span><br><span class="line">[LSW2]ospf 1</span><br><span class="line">[LSW2-ospf-1]area 0</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.2.0 0.0.0.255</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.4.0 0.0.0.255</span><br></pre></td></tr></table></figure></li><li><code>第九步</code>：在三层交换机LSW2(S5700)上配置连通外网的默认路由<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[LSW2]ip route-static 0.0.0.0 0 192.168.4.2 <span class="comment">#默认路由匹配所有的外围地址</span></span><br></pre></td></tr></table></figure></li><li><code>第十步</code>：在路由器AR1(AR2220) 上配置动态路由<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[AR1]ospf 1</span><br><span class="line">[AR1-ospf-1]area 0</span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 192.168.4.0 0.0.0.255</span><br></pre></td></tr></table></figure></li><li><code>第十一步</code>：在路由器AR1(AR2220) 上配置默认路由<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[AR2]ip route-static 0.0.0.0 0 192.168.5.1 <span class="comment">#下一跳为运营商提供的IP地址，由运营商代替访问互联网</span></span><br></pre></td></tr></table></figure></li><li><code>第十一步</code>：测试<br>注意：在实际的环境中，架构完成以后，要访问外网需要在三层交换机LSW2和 路由器 AR1上都要配置去外面的静态路由.</li></ul><h2 id="二十一、传输层概述"><a href="#二十一、传输层概述" class="headerlink" title="二十一、传输层概述"></a>二十一、传输层概述</h2><h3 id="传输层的作用"><a href="#传输层的作用" class="headerlink" title="传输层的作用"></a>传输层的作用</h3><ul><li>网络层提供<code>点到点的连接</code>；</li><li>传输层提供<code>端到端的连接</code>；端口号区分<br>传输层最主要的功能就是<code>能够让应用程序之间实现通信</code>。计算机内部,通常同一时间运行着多个程序。为此,必须分清是哪些程序与哪些程序在进行通信。识别这些应用程序的是端口号。<h3 id="传输层的协议"><a href="#传输层的协议" class="headerlink" title="传输层的协议"></a>传输层的协议</h3><h4 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）"></a>TCP（Transmission Control Protocol）</h4></li><li>传输控制协议；可靠的、面向连接的； 传输效率低<br><img src="https://img-blog.csdnimg.cn/20210326231728900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>TCP是一种面向有连接的传输层协议，它保证两端通行主机之间的通信可达，正确处理传输过程中丢失的，传输顺序乱等异常情况。TCP能够有效利用带宽，缓解网络拥堵。建立与断开需要7次发包收包。<br><code>tcp如何保证传输的可靠性：</code></li><li>将应用数据分割为tcp认为合适发送的数据包。</li><li>超时传送，当tcp发送一个段后，它会启动一个定时器，等待目的端确认受到这个报文段，如果没有收到确认，将重发这个报文段。</li><li>当tcp收到tcp链发送的的数据时，会发送一个确认，(对于收到的请求做一个确认)，这个请求不会立即发送，会推迟几秒</li><li>若tcp收到包，校验出包有错，丢弃报文段，不给出响应，tcp对端会重发。</li><li>对于失序数据进行重排序，然后教给应用层(tcp报文段作为ip数据报进行传输，而ip数据报的到达会失序，)因此tcp也可能失序。</li><li>对于重复数据，直接丢弃。 tcp可以进行流量控制，防止较快主机导致较慢主机的缓存区溢出</li></ul><h4 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h4><ul><li>用户数据报协议；不可靠、无连接的； 传输效率高<h4 id="TCP的封装格式"><a href="#TCP的封装格式" class="headerlink" title="TCP的封装格式"></a>TCP的封装格式</h4><img src="https://img-blog.csdnimg.cn/20210325220917379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="三次握手："><a href="#三次握手：" class="headerlink" title="三次握手："></a>三次握手：</h3></li><li>第一次握手：Host A 向Host B发送一个SYN，等待Host B确认；我们建立连接吧</li><li>第二次握手：Host B收到数据包后，知道Host A 请求建立连接，给Host A回复SYN和ACK，确认连接请求；我也想和你建立连接</li><li>第三次握手：Host A收到确认后，发送ACK给Host B；嗯，好的。<br><img src="https://img-blog.csdnimg.cn/20210325221820719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="TCP的四次断开"><a href="#TCP的四次断开" class="headerlink" title="TCP的四次断开"></a>TCP的四次断开</h3><img src="https://img-blog.csdnimg.cn/20210325222419418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="四次断开："><a href="#四次断开：" class="headerlink" title="四次断开："></a>四次断开：</h5>即终止TCP连接，就是断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。</li><li>第一次断开：Host A发送一个FIN，用来关闭Host A到Host B的数据传送；</li><li>第二次断开：Host B收到FIN后，发送一个ACK给Host A;</li><li>第三次断开：Host B发送一个FIN，用来关闭Host B到Host A的数据传送；</li><li>第四次断开：Host A收到FIN后，发送一个ACK给Host B；</li></ul><h3 id="TCP的应用"><a href="#TCP的应用" class="headerlink" title="TCP的应用"></a>TCP的应用</h3><p><img src="https://img-blog.csdnimg.cn/20210325224359489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="UDP的封装格式"><a href="#UDP的封装格式" class="headerlink" title="UDP的封装格式"></a>UDP的封装格式</h3><p><img src="https://img-blog.csdnimg.cn/20210325224450221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="UDP的应用"><a href="#UDP的应用" class="headerlink" title="UDP的应用"></a>UDP的应用</h3><p><img src="https://img-blog.csdnimg.cn/20210325224601637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二十二、ACL简介与基本配置"><a href="#二十二、ACL简介与基本配置" class="headerlink" title="二十二、ACL简介与基本配置"></a>二十二、ACL简介与基本配置</h2><h3 id="ACL的作用"><a href="#ACL的作用" class="headerlink" title="ACL的作用"></a>ACL的作用</h3><ul><li>访问控制列表（Access Control List, ACL）是应用在<code>路由器接口</code>的指令列表(即规则)；<br><img src="https://img-blog.csdnimg.cn/20210325224823225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>读取第三层、第四层报文头信息；</li><li>根据预先定义好的规则对报文进行过滤；<br><img src="https://img-blog.csdnimg.cn/2021032522492631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="ACL的主要类型"><a href="#ACL的主要类型" class="headerlink" title="ACL的主要类型"></a>ACL的主要类型</h3><table><thead><tr><th>分类</th><th>编号范围</th><th>参数</th></tr></thead><tbody><tr><td>基本ACL</td><td>2000-2999</td><td>源IP地址</td></tr><tr><td>高级ACL</td><td>3000-3999</td><td>源IP地址、目标IP地址、端口、协议</td></tr></tbody></table><h4 id="ACL规则"><a href="#ACL规则" class="headerlink" title="ACL规则:"></a>ACL规则:</h4>每个ACL可以包含多个规则，路由器根据规则对数据流量进行过滤，<code>匹配即停止.</code><br>根据规则号（rule 后面的数字）匹配，前面的规则匹配了，就不再匹配后面的规则；前面的规则不匹配，则继续匹配下面的规则.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">255.255.255.0 <span class="comment">#十进制表示</span></span><br><span class="line">11111111.11111111.11111111.00000000 <span class="comment">#二进制表示</span></span><br><span class="line">00000000.00000000.00000000.11111111 <span class="comment">#反掩码，即0和1互换</span></span><br><span class="line">0.0.0.255 <span class="comment">#反掩码的十进制表示</span></span><br><span class="line">0 <span class="comment">#二进制中 0 表示匹配</span></span><br><span class="line">1 <span class="comment">#而进制中 1 表示不匹配</span></span><br><span class="line">例如：192.168.1.0 192.168.2.1</span><br><span class="line">掩码为：255.255.255.0</span><br><span class="line">反掩码为：0.0.0.255 <span class="comment">#匹配IP地址的前三位</span></span><br><span class="line"><span class="comment">#也可以不按照IP地址的分类来，可以自定义匹配规则：#</span></span><br><span class="line">例如：172.17.0.0 属于B类IP地址，子网掩码为：255.255.0.0， 反掩码可设置为：0.0.0.255 代表</span><br><span class="line">匹配前三位 172.17.0 即：IP地址前三位为172.17.0的服务器发送的数据将被拒绝发送</span><br></pre></td></tr></table></figure><h3 id="基本ACL概述"><a href="#基本ACL概述" class="headerlink" title="基本ACL概述"></a>基本ACL概述</h3><ul><li>基于源IP地址过滤数据包；</li><li>列表号是 2000 ~ 2999；</li></ul><h2 id="二十三、基本ACL配置-1"><a href="#二十三、基本ACL配置-1" class="headerlink" title="二十三、基本ACL配置(1)"></a>二十三、基本ACL配置(1)</h2><h3 id="需求描述："><a href="#需求描述：" class="headerlink" title="需求描述："></a>需求描述：</h3><ul><li>禁止PC1访问服务器 Server1;</li><li>允许其他所有的访问流量</li></ul><p><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210325231538631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>第二步</code>：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：    192.168.1.1/24    网关：192.168.1.254</span><br><span class="line">PC2: IP地址：    192.168.2.1/24    网关：192.168.2.254</span><br><span class="line">Server1: IP地址：    192.168.100.1/24  网关：192.168.100.254</span><br></pre></td></tr></table></figure><p><code>第三步</code>：在路由器AR1(AR2220) 上配置直连路由；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给路由器接口上配置上配置相应的IP地址</span></span><br><span class="line">&lt;AR1&gt;</span><br><span class="line">&lt;AR1&gt;system-view <span class="comment">#进入系统视图下</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0 <span class="comment">#进入g 0/0/0的接口视图下</span></span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.1.254 255.255.255.0 <span class="comment">#为接口 g 0/0/0配置IP地址和子网掩码</span></span><br><span class="line">[AR1-GigabitEthernet0/0/0]display this <span class="comment">#查看配置结果</span></span><br><span class="line">[AR1-GigabitEthernet0/0/0]quit <span class="comment">#回到系统视图下</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1 <span class="comment"># #进入g 0/0/1的接口视图下</span></span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.2.254 255.255.255.0 <span class="comment">##为接口 g0/0/0配置IP地址和子网掩码</span></span><br><span class="line">[AR1-GigabitEthernet0/0/1]display this <span class="comment">#查看配置结果</span></span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit <span class="comment">#退回到系统视图</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/2 <span class="comment"># #进入g 0/0/2的接口视图下</span></span><br><span class="line">[AR1-GigabitEthernet0/0/2]ip address 192.168.100.254 255.255.255.0 <span class="comment">##为接口 g0/0/0配置IP地址和子网掩码</span></span><br><span class="line">[AR1-GigabitEthernet0/0/2]display this <span class="comment">#查看配置结果</span></span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit <span class="comment">#退回到系统视图</span></span><br><span class="line">[AR1]display ip routing-table | include /24 <span class="comment">#删选查看，只查看 /24结尾的路由信息</span></span><br></pre></td></tr></table></figure><p><code>第四步</code>：设置ACL访问限制；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]acl 2000 <span class="comment">#基本acl，列表号是 2000~2999</span></span><br><span class="line">[Huawei-acl-basic-2000]rule 5 deny <span class="built_in">source</span> 192.168.1.1 0</span><br><span class="line"><span class="comment">#规则号为5，并以5为间隔，是为了方便去插入规则，反掩码只有一个 0,是0.0.0.0的缩写，代表匹配整个IP地址，就是只拒绝一个设备发送数据</span></span><br><span class="line">[AR1]interface g0/0/2</span><br><span class="line">[AR1-GigabitEthernet0/0/2]traffic-filter outbound acl 2000 `<span class="comment">#规则写好后要加入到接口处让其生效`</span></span><br></pre></td></tr></table></figure><p><code>第五步</code>：查看设置的ACL策略；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AR1]display acl 2000 <span class="comment">#查看单个ACL策略</span></span><br><span class="line">[AR1]display acl all <span class="comment">#查看设备上配置的所有ACL策略</span></span><br></pre></td></tr></table></figure><p><code>第六步</code>：测试；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1 不能 ping 通 Server1;</span><br><span class="line">PC2 可以 ping 通 Server1;</span><br></pre></td></tr></table></figure><h2 id="二十四、案例-基本ACL配置-2"><a href="#二十四、案例-基本ACL配置-2" class="headerlink" title="二十四、案例/基本ACL配置(2)"></a>二十四、案例/基本ACL配置(2)</h2><p>需求描述：<code>禁止主机PC2与PC1互通</code>，而允许其他的所有流量.</p><ul><li>第一步：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210325232434790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>第二步：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.2.2/24 网关：192.168.2.254</span><br></pre></td></tr></table></figure></li><li>第三步：在路由器AR1(AR2220) 上配置直连路由；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[AR1]interface g0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.1.254 24</span><br><span class="line">[AR1-GigabitEthernet0/0/0]quit</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.2.254 255.255.255.0</span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit</span><br><span class="line">[AR1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure>第四步：测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1 可以 ping 通 PC2;</span><br><span class="line">PC1 可以 ping 通 PC3;</span><br></pre></td></tr></table></figure></li><li>第五步：路由器上配置ACL策略；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]acl 2000 <span class="comment">#基本acl，列表号是 2000~2999</span></span><br><span class="line">[Huawei-acl-basic-2000]rule 5 deny <span class="built_in">source</span> 192.168.2.1 0</span><br><span class="line"><span class="comment">#规则号为5，并以5为间隔，是为了方便去插入规则，反掩码只有一个 0,是0.0.0.0的缩写，代表匹配整个IP地址，就是只拒绝一个设备发送数据</span></span><br><span class="line"><span class="comment">#[Huawei-acl-basic-2000]undo rule 5 #如果发现规则写错了可以这样删除</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]traffic-filter inbound acl 2000 `<span class="comment">#规则写好后要加入到接口处让其生效,因为是禁止其他设备访问，所以是数据的进入，这里用 inbound`</span></span><br></pre></td></tr></table></figure><p>第六步：查看设置的ACL策略；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AR1]display acl 2000 <span class="comment">#查看单个ACL策略</span></span><br><span class="line">[AR1]display acl all <span class="comment">#查看设备上配置的所有ACL策略</span></span><br></pre></td></tr></table></figure><p>第七步：测试；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC2 可以 ping 通 PC1;</span><br><span class="line">PC3 不能 ping 通 PC1;</span><br></pre></td></tr></table></figure><h2 id="二十五、案例3-基本ACL配置-3"><a href="#二十五、案例3-基本ACL配置-3" class="headerlink" title="二十五、案例3/基本ACL配置(3)"></a>二十五、案例3/基本ACL配置(3)</h2><ul><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210325233532394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>第二步</code>：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.2.2/24 网关：192.168.2.254</span><br></pre></td></tr></table></figure><code>第三步</code>：在路由器AR1(AR2220) 上配置直连路由；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[AR1]interface g0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.1.254 24</span><br><span class="line">[AR1-GigabitEthernet0/0/0]quit</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.2.254 255.255.255.0</span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit</span><br><span class="line">[AR1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure>第四步：测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1 可以 ping 通 PC2;</span><br><span class="line">PC1 可以 ping 通 PC3;</span><br></pre></td></tr></table></figure><code>第五步</code>：路由器上配置ACL策略；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一步：配置规则，允许主机PC2与PC1互通</span></span><br><span class="line">[AR1]acl 2000 <span class="comment">#要删除2000下的所有规则，undo acl 2000</span></span><br><span class="line">[AR1-acl-basic-2000]display this <span class="comment">#查看2000下的所有规则</span></span><br><span class="line">[AR1-acl-basic-2000]rule permit <span class="built_in">source</span> 192.168.2.1 0 <span class="comment">#配置规则允许192.168.2.1和192.168.1.1互通</span></span><br><span class="line">[AR1-acl-basic-2000]display this <span class="comment">#查看2000下的所有规则</span></span><br><span class="line"><span class="comment">#第二步：配置规则，禁止其他所有设备访问PC1</span></span><br><span class="line">[AR1-acl-basic-2000]rule deny <span class="built_in">source</span> any `<span class="comment">#any指的就是其他所有的IP地址`</span></span><br><span class="line">[AR1-acl-basic-2000]quit</span><br><span class="line"><span class="comment">#第三步：将规则加入到相应的接口中</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]traffic-filter inbound acl 2000 `<span class="comment">#规则写好后要加入到接口处让其生效,因为是禁止其他设备访问，所以是数据的进入，这里用 inbound`</span></span><br><span class="line">[AR1-GigabitEthernet0/0/1]display this <span class="comment">#查看2000下的所有规则</span></span><br></pre></td></tr></table></figure>第六步：测试；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC2 可以 ping 通 PC1;</span><br><span class="line">PC3 不能 ping 通 PC1;</span><br></pre></td></tr></table></figure><h2 id="二十六、ACL高级配置"><a href="#二十六、ACL高级配置" class="headerlink" title="二十六、ACL高级配置"></a>二十六、ACL高级配置</h2>高级ACL概述:基于源IP地址、目标IP地址、源端口、目标端口、协议 过滤数据包；列表号是 3000 ~ 3999；</li></ul><h3 id="案例1：高级ACL配置-1"><a href="#案例1：高级ACL配置-1" class="headerlink" title="案例1：高级ACL配置(1)"></a>案例1：高级ACL配置(1)</h3><p><code>需求描述：</code><br>允许Client1 访问Server1的Web服务；允许Clinet1 访问网络 192.168.2.0/24; 禁止Client1 访问其他网络</p><ul><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210327153938485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>第二步</code>：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC1: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">Server1: IP地址：192.168.3.1/24 网关：192.168.3.254</span><br></pre></td></tr></table></figure><code>第三步</code>：在路由器AR1，AR2，AR3上配置直连路由；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在路由器AR1上的接口上配置IP地址</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.1.254 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]quit</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.4.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在路由器AR2上的接口配置IP地址</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.4.2 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]quit</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.5.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]quit</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.2.254 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在路由器AR3上的接口配置IP地址</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.5.2 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]quit</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]ip address 192.168.3.254 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><code>第四步</code>：配置动态路由OSPF，在路由器AR1，AR2，AR3上宣告网段；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#路由器AR1 宣告跟它相连的网段</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255 <span class="comment">#后跟反掩码</span></span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.4.0 0.0.0.255 <span class="comment"># #后跟反掩码</span></span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]quit</span><br><span class="line">[Huawei-ospf-1]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#路由器AR2 宣告跟它相连的网段</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.4.0 0.0.0.255 <span class="comment">#后跟反掩码</span></span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.2.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.5.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#路由器AR3 宣告跟它相连的网段</span></span><br><span class="line">&lt;Huawei&gt;system-view</span><br><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]area 0</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.5.0 0.0.0.255 <span class="comment"># #后跟反掩码</span></span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.0]quit</span><br><span class="line">[Huawei-ospf-1]quit</span><br><span class="line">[Huawei]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><code>第五步</code>：测试全网互通；<br><code>第六步</code>：路由器AR1上配置ACL策略；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许Client1(192.168.1.1) 访问Server1(192.168.3.1)的Web服务</span></span><br><span class="line">&lt;AR1&gt;system-view</span><br><span class="line">[AR1]acl 3000</span><br><span class="line">[AR1-acl-adv-3000]rule 5 permit tcp <span class="built_in">source</span> 192.168.1.1 0 destination 192.168.3.1 0 destination-port eq 80</span><br><span class="line"><span class="comment">#允许Clinet1(192.168.1.1) 访问网络 192.168.2.0/24</span></span><br><span class="line">[AR1-acl-adv-3000]rule 10 permit ip <span class="built_in">source</span> 192.168.1.1 0 destination 192.168.2.0 0.0.0.255</span><br><span class="line">[AR1-acl-adv-3000]display this</span><br><span class="line"><span class="comment">#禁止Client1(192.168.1.1) 访问其他网络</span></span><br><span class="line">[AR1-acl-adv-3000]rule 15 deny ip <span class="built_in">source</span> any</span><br><span class="line">[AR1-acl-adv-3000]quit</span><br><span class="line"><span class="comment">#将规则加入到相应的接口中 g 0/0/2</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/2</span><br><span class="line">[AR1-GigabitEthernet0/0/2]traffic-filter inbound acl 3000</span><br><span class="line"><span class="comment">#查看 ACL规则</span></span><br><span class="line">[AR1]display acl 3000 <span class="comment">#查看3000的acl策略</span></span><br><span class="line">[AR1]display acl all <span class="comment">#查看所有的acl策略</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试</span></span><br><span class="line">Client1(192.168.1.1) 可以访问Server1(192.168.3.1)的web服务;</span><br><span class="line">Client1(192.168.1.1) 可以ping 通网络 192.168.2.0/24；</span><br><span class="line">Client1(192.168.1.1) 不能ping 通网络 192.168.3.0/24;</span><br></pre></td></tr></table></figure><h3 id="案例2：高级ACL配置-2"><a href="#案例2：高级ACL配置-2" class="headerlink" title="案例2：高级ACL配置(2)"></a>案例2：高级ACL配置(2)</h3><code>需求描述：</code></li><li>通过配置高级acl禁止Client1 访问 Server1 的 www 服务；禁止Client2 访问Server1的 ftp 服务器；所有主机的其他服务不受限制</li><li><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210327154951847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><code>第二步</code>：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC3: IP地址：192.168.2.2/24 网关：192.168.2.254</span><br></pre></td></tr></table></figure></li><li><code>第三步</code>：在路由器AR1(AR2220) 上配置直连路由；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接口g 0/0/0上配置IP地址：192.168.1.254/24</span></span><br><span class="line">[AR1]interface g0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.1.254 24</span><br><span class="line">[AR1-GigabitEthernet0/0/0]quit</span><br><span class="line"><span class="comment">#接口g 0/0/1上配置IP地址：192.168.2.254/24</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.2.254 255.255.255.0</span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit</span><br><span class="line">[AR1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><code>第四步</code>：路由器上配置ACL策略；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置高级acl禁止Client1(192.168.2.1) 访问 Server1(192.168.1.1) 的www(80)服务</span></span><br><span class="line">[AR1]acl 3000</span><br><span class="line">[AR1-acl-adv-3000]rule deny tcp <span class="built_in">source</span> 192.168.2.1 0 destination 192.168.1.1 0</span><br><span class="line">destination-port eq 80</span><br><span class="line">[AR1-acl-adv-3000]display this</span><br><span class="line"><span class="comment">#将规则加入到相应的接口中</span></span><br><span class="line">[AR1-acl-adv-3000]quit</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]traffic-filter inbound acl 3000</span><br><span class="line"><span class="comment">#配置高级acl禁止Client2(192.168.2.2) 访问 Server1(192.168.1.1) 的ftp(21)服务</span></span><br><span class="line">[AR1-acl-adv-3000]rule deny tcp <span class="built_in">source</span> 192.168.2.2 0 destination 192.168.1.1 0</span><br><span class="line">destination-port eq 21</span><br><span class="line">[AR1-acl-adv-3000]display this</span><br><span class="line">[AR1-acl-adv-3000]</span><br></pre></td></tr></table></figure><code>第五步</code>：路由器上查看ACL策略；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看 ACL#</span></span><br><span class="line">[AR1]display acl 3000 <span class="comment">#查看3000的acl策略</span></span><br><span class="line">[AR1]display acl all <span class="comment">#查看所有的acl策略</span></span><br></pre></td></tr></table></figure>第六步：测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Client1(192.168.2.1) 不可以访问 Server1(192.168.1.1) 的 www(80) 服务;</span><br><span class="line">Client2(192.168.2.2) 不可以访问 Server1(192.168.1.1) 的 ftp(21) 服务；</span><br></pre></td></tr></table></figure><h2 id="二十七、NAT概述"><a href="#二十七、NAT概述" class="headerlink" title="二十七、NAT概述"></a>二十七、NAT概述</h2><h3 id="NAT的作用"><a href="#NAT的作用" class="headerlink" title="NAT的作用"></a>NAT的作用</h3>Network Address Translation，网络地址转换；NAT是通过将内部网络的私有IP地址转换成全球唯一的公网IP地址，使内部网络可以连接到外部网络；<h3 id="私有IP地址分类"><a href="#私有IP地址分类" class="headerlink" title="私有IP地址分类"></a>私有IP地址分类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A类 10.0.0.0 ~ 10.255.255.255</span><br><span class="line">B类 172.16.0.0 ~ 172.31.255.255</span><br><span class="line">C类 192.168.0.0 ~ 192.168.255.255</span><br></pre></td></tr></table></figure><h3 id="NAT的特性"><a href="#NAT的特性" class="headerlink" title="NAT的特性"></a>NAT的特性</h3></li><li>NAT的优:  节省公有合法IP地址；处理地址重叠；安全性</li><li>NAT的缺点:延迟增大；配置和维护的复杂性；<h3 id="NAT实现方式"><a href="#NAT实现方式" class="headerlink" title="NAT实现方式"></a>NAT实现方式</h3>静态转换;Easy IP;<h3 id="NAT-的工作过程"><a href="#NAT-的工作过程" class="headerlink" title="NAT 的工作过程"></a>NAT 的工作过程</h3></li><li>静态<br><img src="https://img-blog.csdnimg.cn/20210327171028604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Easy IP<br><img src="https://img-blog.csdnimg.cn/20210327171050184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="二十八、静态NAT"><a href="#二十八、静态NAT" class="headerlink" title="二十八、静态NAT"></a>二十八、静态NAT</h2><h3 id="静态NAT概述"><a href="#静态NAT概述" class="headerlink" title="静态NAT概述"></a>静态NAT概述</h3><p>静态转换是指将内部网络的私有地址转换为公有地址时，IP地址的对应关系是确定的；静态转换是一对一的转换；静态转换是双向的；</p><h3 id="静态NAT配置命令"><a href="#静态NAT配置命令" class="headerlink" title="静态NAT配置命令"></a>静态NAT配置命令</h3><p>将内部地址10.1.1.11、10.1.1.12静态<code>转换</code>为公网地址 200.1.1.11、200.1.1.12，以便访问外网主机或被外网主机访问<br><img src="https://img-blog.csdnimg.cn/20210327171140367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#g0/0/2为和外部网络相连的接口(出门口)；</span></span><br><span class="line"><span class="comment">#200.1.1.11 200.1.1.12 为公网IP地址；</span></span><br><span class="line"><span class="comment">#10.1.1.11 10.1.1.12 为私网IP地址；</span></span><br><span class="line">interface g0/0/2</span><br><span class="line">nat static global 200.1.1.11 inside 10.1.1.11</span><br><span class="line">nat static global 200.1.1.12 inside 10.1.1.12</span><br></pre></td></tr></table></figure><h3 id="案例1-静态NAT配置"><a href="#案例1-静态NAT配置" class="headerlink" title="案例1 静态NAT配置"></a>案例1 静态NAT配置</h3><p><code>需求分析</code>：<br>在AR2上配置静态NAT 使192.168.2.1 转换为100.0.0.2，192.168.2.2 转换为100.0.0.3，实现外部<br>网络访问。</p><ul><li><p>第一步：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/2021032717122120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>第二步：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC2: IP地址：192.168.2.2/24 网关：192.168.2.254</span><br><span class="line">Server1: IP地址：100.0.0.10/8 <span class="comment">#不用配网关</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：在路由器AR2(AR2220) 上的接口配置IP地址；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口 g0/0/1上配置IP：192.168.2.254/24</span></span><br><span class="line">&lt;AR2&gt;system-view</span><br><span class="line">[AR2]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR2-GigabitEthernet0/0/1]ip address 192.168.2.254 24</span><br><span class="line">[AR2-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#在接口 g0/0/2 上配置IP: 100.0.0.0.1/8</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/2</span><br><span class="line">[AR2-GigabitEthernet0/0/2]ip address 100.0.0.1 8</span><br><span class="line">[AR2-GigabitEthernet0/0/2]quit</span><br><span class="line">[AR2]display ip routing-table <span class="comment">#查看配置信息</span></span><br></pre></td></tr></table></figure><p>第四步：在路由器AR2(AR2220) 上配置静态NAT；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nat是在进入外网的接口上配置的，本次拓扑需要在接口 g 0/0/2 上配置</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/2</span><br><span class="line"><span class="comment">#将私网IP地址 192.168.2.1 转换为 公网IP地址 100.0.0.2</span></span><br><span class="line">[AR2-GigabitEthernet0/0/2]nat static global 100.0.0.2 inside 192.168.2.1</span><br><span class="line"><span class="comment">#将私网IP地址 192.168.2.2 转换为 公网IP地址 100.0.0.3</span></span><br><span class="line">[AR2-GigabitEthernet0/0/2]nat static global 100.0.0.3 inside 192.168.2.2</span><br><span class="line">[AR2-GigabitEthernet0/0/2]display this <span class="comment">#查看以上配置是否正确</span></span><br></pre></td></tr></table></figure><p><code>注意：私网地址与公网地址绑定以后，外网服务器直接可以访问绑定的公网地址来访问私网服务器</code><br>第五步：查看设备上配置NAT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AR2]display nat static <span class="comment">#查看配置的静态NAT</span></span><br><span class="line">[AR2]display nat static interface GigabitEthernet 0/0/2 <span class="comment">#查看接口上的多组NAT</span></span><br></pre></td></tr></table></figure><p>第六步：测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1(192.168.2.1) 可以访问 Server1(100.0.0.10);</span><br><span class="line">PC1(192.168.2.2) 可以访问 Server1(100.0.0.10);</span><br><span class="line">Server1(100.0.0.10) 可以通过访问 100.0.0.2 来访问PC1(192.168.2.1);</span><br></pre></td></tr></table></figure><p>第七步 路由器AR2上添加默认路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以上完成了访问单台外网服务器的拓扑，在真实的环境下外网的服务器有很多台，为了可以访问所有的网</span></span><br><span class="line">络，需要配置默认路由，下一跳地址为运营商提供的IP地址。 例如：100.0.0.0.10</span><br><span class="line">&lt;AR2&gt;system-view</span><br><span class="line">[AR2]ip route-static 0.0.0.0 0 100.0.0.10</span><br><span class="line">[AR2]display ip routing-table</span><br></pre></td></tr></table></figure><h2 id="二十九、EASY-IP"><a href="#二十九、EASY-IP" class="headerlink" title="二十九、EASY IP"></a>二十九、EASY IP</h2><p>Easy IP 允许将多个内部地址映射到网关出接口；Easy IP 是多对一的转换；Easy IP 是单向的</p><h2 id="案例1-Easy-IP配置"><a href="#案例1-Easy-IP配置" class="headerlink" title="案例1 Easy IP配置"></a>案例1 Easy IP配置</h2><p><code>需求分析：</code><br>在路由器AR2上配置Easy IP，使企业内网192.168.2.0/24都可以通过接口 g0/0/2 的IP, 实现外部网<br>络的访问</p></li><li><p><code>第一步</code>：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210327171309604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><code>第二步</code>：在PC1、PC2 和 Server1 中配置IP地址，子网掩码和网关；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.2.1/24 网关：192.168.2.254</span><br><span class="line">PC2: IP地址：192.168.2.2/24 网关：192.168.2.254</span><br><span class="line">Server1: IP地址：100.0.0.10/8 <span class="comment">#不用配网关</span></span><br></pre></td></tr></table></figure></li><li><p><code>第三步</code>：在路由器AR1(AR2220) 上的接口配置IP地址；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口 g0/0/1上配置IP：192.168.2.254/24</span></span><br><span class="line">&lt;AR2&gt;system-view</span><br><span class="line">[AR2]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR2-GigabitEthernet0/0/1]ip address 192.168.2.254 24</span><br><span class="line">[AR2-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#在接口 g0/0/2 上配置IP: 100.0.0.0.1/8</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/2</span><br><span class="line">[AR2-GigabitEthernet0/0/2]ip address 100.0.0.1 8</span><br><span class="line">[AR2-GigabitEthernet0/0/2]quit</span><br><span class="line">[AR2]display ip routing-table <span class="comment">#查看配置信息</span></span><br></pre></td></tr></table></figure></li><li><p><code>第四步</code>：在路由器AR2(AR2220) 上配置Easy IP；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置允许192.168.2.0网段的规则</span></span><br><span class="line">[AR2]acl 2000</span><br><span class="line">[AR2-acl-basic-2000]rule 5 permit <span class="built_in">source</span> 192.168.2.0 0.0.0.255</span><br><span class="line">[AR2-acl-basic-2000]quit</span><br><span class="line"><span class="comment">#在接口g 0/0/2上设置Easy IP</span></span><br><span class="line">[AR2]interface GigabitEthernet 0/0/2</span><br><span class="line">[AR2-GigabitEthernet0/0/2]nat outbound 2000</span><br><span class="line">[AR2-GigabitEthernet0/0/2]quit</span><br><span class="line">[AR2-GigabitEthernet0/0/2]display this <span class="comment">#查看接口配置是否正确</span></span><br><span class="line"><span class="comment">#查看所有的acl规则</span></span><br><span class="line">[AR2]display acl all</span><br></pre></td></tr></table></figure></li><li><p><code>第五步</code>：查看设备上配置Easy IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[AR2]display nat outbound <span class="comment">#查看配置的Easy IP</span></span><br></pre></td></tr></table></figure></li><li><p><code>第六步</code>：测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1(192.168.2.1) 可以访问 Server1(100.0.0.10);</span><br><span class="line">PC1(192.168.2.2) 可以访问 Server1(100.0.0.10);</span><br></pre></td></tr></table></figure><p><code>注意：如果同时配置了静态 NAT 和 Easy IP, 通信时优先使用的是 静态 NAT</code><br><code>第七步</code>: 路由器AR2上添加默认路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以上完成了访问单台外网服务器的拓扑，在真实的环境下外网的服务器有很多台，为了可以访问所有的网络，需要配置默认路由，下一跳地址为运营商提供的IP地址。 例如：100.0.0.0.10</span></span><br><span class="line">&lt;AR2&gt;system-view</span><br><span class="line">[AR2]ip route-static 0.0.0.0 0 100.0.0.10</span><br><span class="line">[AR2]display ip routing-tab</span><br></pre></td></tr></table></figure></li></ul><h2 id="三十、VRRP概述与环境"><a href="#三十、VRRP概述与环境" class="headerlink" title="三十、VRRP概述与环境"></a>三十、VRRP概述与环境</h2><h3 id="单网关场景分析"><a href="#单网关场景分析" class="headerlink" title="单网关场景分析"></a>单网关场景分析</h3><p>当网关路由器出现故障时，本网段内以该设备为网关的主机都不能与 Internet 进行通信。<br><img src="https://img-blog.csdnimg.cn/2021032718055552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="多网关存在的问题"><a href="#多网关存在的问题" class="headerlink" title="多网关存在的问题"></a>多网关存在的问题</h3><p>通过部署多网关的方式实现网关的备份,存在的问题:</p><ul><li>1、网关间IP地址冲突；</li><li>2、主机会频繁切换网络出口<h3 id="什么是VRRP"><a href="#什么是VRRP" class="headerlink" title="什么是VRRP"></a>什么是VRRP</h3>VRRP是虚拟路由冗余协议,VRRP能够在不改变组网的情况下，从多台网关设备里产生一个虚拟路由器，通过配置虚拟路由器的IP地址为默认网关，实现网关的备份<h3 id="VRRP应用"><a href="#VRRP应用" class="headerlink" title="VRRP应用"></a>VRRP应用</h3><h4 id="VRRP组成员角色"><a href="#VRRP组成员角色" class="headerlink" title="VRRP组成员角色"></a>VRRP组成员角色</h4></li><li>主(Master) 路由器；</li><li>备份(Backup) 路由器；</li><li>虚拟(Virtual) 路由器<br><img src="https://img-blog.csdnimg.cn/20210327180617852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="VRRP原理"><a href="#VRRP原理" class="headerlink" title="VRRP原理"></a>VRRP原理</h3>企业级的架构中，需要保证架构的稳定性，即关键设备中有一台出现问题了，不会导致整个网络的瘫<br>痪；一个网络访问另外的网络需要通过路由器来完成，<br><code>VRRP的作用就是</code>：由两台配置了不同IP地址(网关)的路由器，组成一个虚拟的路由器，对外提供网关服务的是这个虚拟路由器。这样不管是真实路由器哪个出现问题，都不会影响整个网络的运行，提高了网络结构的稳定性。<br><img src="https://img-blog.csdnimg.cn/20210327180639944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="三十一、VRRP配置"><a href="#三十一、VRRP配置" class="headerlink" title="三十一、VRRP配置"></a>三十一、VRRP配置</h2><h3 id="VRRP配置步骤"><a href="#VRRP配置步骤" class="headerlink" title="VRRP配置步骤"></a>VRRP配置步骤</h3></li></ul><ol><li>配置VRRP的成员；</li><li>配置VRRP的优先级 (默认100)；</li><li>查看VRRP信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三层交换机SW1上配置, 主路由器(Master)</span></span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]sysname SW1 <span class="comment">#修改设备名字</span></span><br><span class="line">[SW1]</span><br><span class="line">[SW1]undo info-center <span class="built_in">enable</span> <span class="comment">#取消信息提示</span></span><br><span class="line"><span class="comment">#给vlan1配置网关</span></span><br><span class="line">[SW1]interface Vlanif 1</span><br><span class="line">[SW1-Vlanif1]ip address 192.168.1.252 255.255.255.0</span><br><span class="line"><span class="comment">#将三层交换机SW1配置为VRRP的成员，设置虚拟IP地址</span></span><br><span class="line">[SW1-Vlanif1]vrrp vrid 1 virtual-ip 192.168.1.254</span><br><span class="line"><span class="comment">#配置VRRP的优先级，不写默认为100</span></span><br><span class="line">[SW1-Vlanif1]vrrp vrid 1 priority 105</span><br><span class="line">[SW1-Vlanif1]</span><br><span class="line"><span class="comment">#查看VRRP配置信息</span></span><br><span class="line">[SW1-Vlanif1]display vrrp brief</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三层交换机SW2上配置,,备用路由器(backup)</span></span><br><span class="line">&lt;Huawei&gt;system-view <span class="comment">#进入系统视图</span></span><br><span class="line">[Huawei]sysname SW2 <span class="comment">#修改设备名字</span></span><br><span class="line">[SW2]</span><br><span class="line">[SW2]undo info-center <span class="built_in">enable</span> <span class="comment">#取消信息提示</span></span><br><span class="line"><span class="comment">#给vlan1配置网关</span></span><br><span class="line">[SW2]interface Vlanif 1</span><br><span class="line">[SW2-Vlanif1]ip address 192.168.1.253 255.255.255.0</span><br><span class="line"><span class="comment">#将三层交换机SW1配置为VRRP的成员，设置虚拟IP地址</span></span><br><span class="line">[SW2-Vlanif1]vrrp vrid 1 virtual-ip 192.168.1.254</span><br><span class="line"><span class="comment">#不用设置优先级，默认为100</span></span><br><span class="line"><span class="comment">#查看VRRP配置信息</span></span><br><span class="line">[SW2-Vlanif1]display vrrp brief</span><br></pre></td></tr></table></figure><h3 id="案例-三层交换配置VRRP"><a href="#案例-三层交换配置VRRP" class="headerlink" title="案例:三层交换配置VRRP"></a>案例:三层交换配置VRRP</h3>在三层交换机配置 VRRP 后使其产生一个虚拟 IP 地址 192.168.1.254为内部主机的网关</li></ol><ul><li><p>第一步：设计好网络拓扑结构；<br><img src="https://img-blog.csdnimg.cn/20210327180724293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>第二步：在PC1、PC2 中配置IP地址，子网掩码和网关；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1: IP地址：192.168.1.1/24 网关：192.168.1.254</span><br><span class="line">PC2: IP地址：192.168.4.1/24 网关：192.168.2.254</span><br></pre></td></tr></table></figure></li><li><p>第三步：在三层交换机LSW1和LSW2上配置IP地址；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在三层交换机LSW1上配置IP地址</span></span><br><span class="line">&lt;LSW1&gt;system-view</span><br><span class="line">[LSW1]vlan batch vlan 2 <span class="comment">#创建vlan</span></span><br><span class="line"><span class="comment">#将接口 g0/0/1加入到vlan 2中</span></span><br><span class="line">[LSW1]interface GigabitEthernet 0/0/1</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]port link-type access</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]port default vlan 2</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#给vlan 2配置IP地址，三层交换机不能直接给接口配IP地址</span></span><br><span class="line">[LSW1]interface Vlanif 2</span><br><span class="line">[LSW1-Vlanif2]ip address 192.168.2.2 24</span><br><span class="line">[LSW1-Vlanif2]quit</span><br><span class="line"><span class="comment">#给vlan 1配置IP地址</span></span><br><span class="line">[LSW1]interface Vlanif 1</span><br><span class="line">[LSW1-Vlanif1]ip address 192.168.1.252 255.255.255.0</span><br><span class="line"><span class="comment">#查看配置信息</span></span><br><span class="line">[LSW1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在三层交换机LSW2上配置IP地址</span></span><br><span class="line">&lt;LSW2&gt;system-view</span><br><span class="line">[LSW2]vlan batch 3</span><br><span class="line"><span class="comment">#将接口 g0/0/1加入到vlan 3中</span></span><br><span class="line">[LSW1]interface GigabitEthernet 0/0/1</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]port link-type access</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]port default vlan 3</span><br><span class="line">[LSW1-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#给vlan 1配置IP地址</span></span><br><span class="line">[LSW2]interface vlan 1</span><br><span class="line">[LSW2-Vlanif1]ip address 192.168.1.253 24</span><br><span class="line">[LSW2-Vlanif1]quit</span><br><span class="line"><span class="comment">#给vlan 3配置IP地址，三层交换机不能直接给接口配IP地址</span></span><br><span class="line">[LSW2]interface vlan 3</span><br><span class="line">[LSW2-Vlanif3]ip address 192.168.3.2 24</span><br><span class="line">[LSW2]display ip routing-table | include /24 <span class="comment">#查看配置信息</span></span><br></pre></td></tr></table></figure><p><code>第四步</code>：给路由器配置直连路由；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在接口g 0/0/0上配置IP地址192.168.2.1/24</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip address 192.168.2.1 24</span><br><span class="line">[AR1-GigabitEthernet0/0/0]quit</span><br><span class="line"><span class="comment">#在接口g 0/0/1上配置IP地址192.168.3.1/24</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/1</span><br><span class="line">[AR1-GigabitEthernet0/0/1]ip address 192.168.3.1 24</span><br><span class="line">[AR1-GigabitEthernet0/0/1]quit</span><br><span class="line"><span class="comment">#在接口g 0/0/2上配置IP地址192.168.4.254/24</span></span><br><span class="line">[AR1]interface GigabitEthernet 0/0/2</span><br><span class="line">[AR1-GigabitEthernet0/0/2]ip address 192.168.4.254 24</span><br><span class="line">[AR1-GigabitEthernet0/0/2]quit</span><br><span class="line">[AR1]display ip routing-table | include /24 <span class="comment">#查看配置信息</span></span><br></pre></td></tr></table></figure><p>第五步：三层交换机和路由器上配置动态路由OSPF；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三层交换机LSW1上配置动态路由</span></span><br><span class="line">&lt;LSW1&gt;system-view</span><br><span class="line">[LSW1]OSPF 1 <span class="comment">#启动进程，进程号为1</span></span><br><span class="line">[LSW1-ospf-1]area 0 <span class="comment">#进入骨干区域</span></span><br><span class="line"><span class="comment">#宣告跟它相连的网段,注意反掩码的书写</span></span><br><span class="line">[LSW1-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</span><br><span class="line">[LSW1-ospf-1-area-0.0.0.0]network 192.168.2.0 0.0.0.255</span><br><span class="line">[LSW1-ospf-1-area-0.0.0.0]quit</span><br><span class="line"><span class="comment">#过滤查看路由表</span></span><br><span class="line">[LSW1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#三层交换机LSW2上配置动态路由</span><br><span class="line">&lt;LSW2&gt;system-view</span><br><span class="line">[LSW2]ospf 1 # #启动进程，进程号为1</span><br><span class="line">[LSW2-ospf-1]area 0 # #进入骨干区域</span><br><span class="line">#宣告跟它相连的网段,注意反掩码的书写</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</span><br><span class="line">[LSW2-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255</span><br><span class="line">#过滤查看路由表</span><br><span class="line">[LSW2]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;AR1&gt;system-view</span><br><span class="line">[AR1]ospf 1 <span class="comment">#启动进程，进程号为1</span></span><br><span class="line">[AR1-ospf-1]area 0 <span class="comment">#进入骨干区域</span></span><br><span class="line"><span class="comment">#宣告跟它相连的网段,注意反掩码的书写</span></span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 192.168.2.0 0.0.0.255</span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255</span><br><span class="line">[AR1-ospf-1-area-0.0.0.0]network 192.168.4.0 0.0.0.255</span><br><span class="line"><span class="comment">#过滤查看路由表</span></span><br><span class="line">[AR1]display ip routing-table | include /24</span><br></pre></td></tr></table></figure><p>第六步：两台三层交换机上配置VRRP(虚拟路由)；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三层交换机SW1上配置, 主路由器(Master)</span></span><br><span class="line">[SW1]interface vlan 1</span><br><span class="line"><span class="comment">#将三层交换机SW1配置为VRRP的成员，设置虚拟IP地址</span></span><br><span class="line">[SW1-Vlanif1]vrrp vrid 1 virtual-ip 192.168.1.254</span><br><span class="line"><span class="comment">#配置VRRP的优先级，不写则默认为100</span></span><br><span class="line">[SW1-Vlanif1]vrrp vrid 1 priority 105</span><br><span class="line">[SW1-Vlanif1]</span><br><span class="line"><span class="comment">#查看VRRP配置信息</span></span><br><span class="line">[SW1-Vlanif1]display vrrp brief</span><br><span class="line"><span class="comment">#三层交换机SW2上配置,备用路由器(backup)</span></span><br><span class="line">[SW2]interface vlan 1</span><br><span class="line"><span class="comment">#将三层交换机SW1配置为VRRP的成员，设置虚拟IP地址</span></span><br><span class="line">[SW2-Vlanif1]vrrp vrid 1 virtual-ip 192.168.1.254</span><br><span class="line"><span class="comment">#不用设置优先级，默认为100</span></span><br><span class="line"><span class="comment">#查看VRRP配置信息</span></span><br><span class="line">[SW2-Vlanif1]display vrrp brief</span><br></pre></td></tr></table></figure><p><code>第七步</code>：测试；<br>断开任何一条二层交换机与三层交换机之间的连线，网络还是互通的；<br><code>注意：断开连线测试时，需要等一会儿，切换需要时间</code></p><h2 id="三十二、企业级网络分析与升级"><a href="#三十二、企业级网络分析与升级" class="headerlink" title="三十二、企业级网络分析与升级"></a>三十二、企业级网络分析与升级</h2><h3 id="目前网络环境"><a href="#目前网络环境" class="headerlink" title="目前网络环境"></a>目前网络环境</h3><p>公司介绍:一家网络服务的IT公司；公司位于北京，有若干服务器；通过NAT技术将业务服务器与 Internet 互联</p><h3 id="目前网络拓扑结构"><a href="#目前网络拓扑结构" class="headerlink" title="目前网络拓扑结构"></a>目前网络拓扑结构</h3><p><img src="https://img-blog.csdnimg.cn/20210327180832207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="目前网络技术"><a href="#目前网络技术" class="headerlink" title="目前网络技术"></a>目前网络技术</h3><p>目前网络环境已用技术：</p></li><li><p>默认路由：实现到互联网数以万计网络访问的简化配置；</p></li><li><p>静态路由：路由器与三层交换间配置静态路由；</p></li><li><p>NAT：将业务服务器与Internet 互联</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>现有网络环境问题分析：</p></li><li><p>接入层交换机只与同一个三层交换机互连，存在单点故障而影响网络通信；</p></li><li><p>互联网连接单一服务商；</p></li><li><p>网络规模不断增加，静态路由缺乏灵活</p><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p>现有网络需求：</p></li><li><p>为提高主机对本公司网络服务访问的可靠性，需要使用很多的冗余技术；</p></li><li><p>为了保证局域网络高可用使用了网状拓扑；</p></li><li><p>为了保证服务器不会因为使用单一网关而出现的单点失败，影响网络通信，需要网关冗余；</p></li><li><p>为了保证到互联网的高可用，接入需使用冗余互联网连接。</p><h3 id="项目技术"><a href="#项目技术" class="headerlink" title="项目技术"></a>项目技术</h3><p>基于项目的需求，解决方案中需要增加如下技术：</p></li><li><p>OSPF路由协议：实现网络路径的自动学习；</p></li><li><p>VRRP：实现冗余网关；</p></li><li><p>链路聚合：实现增加链路可靠性</p><h3 id="项目拓扑"><a href="#项目拓扑" class="headerlink" title="项目拓扑"></a>项目拓扑</h3><p>重新规划后的网络拓扑:<br><img src="https://img-blog.csdnimg.cn/20210327180910462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;技不压身，了解下企业级网络的搭建，虽然偏硬件，但是有利于知识体系的构建。和学TCP/IP协议时的一些东西互通，同时为以后回老家当网管做准备，哈哈，生活加油！是一起参加红帽考试的小伙伴分享的资源，然后稍作整理，时间原因，这篇笔记后面部分没有实际敲Demo，先知道个大概，以后涉及到这方面在深入研究，补充一些实战的东西。&lt;/p&gt;</summary>
    
    
    
    <category term="网络架构" scheme="https://liruilongs.github.io/categories/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="网管" scheme="https://liruilongs.github.io/tags/%E7%BD%91%E7%AE%A1/"/>
    
    <category term="企业级网络架构" scheme="https://liruilongs.github.io/tags/%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes(K8S) 容器管理“扫盲“ 学习笔记</title>
    <link href="https://liruilongs.github.io/2013/07/13/kubernetes(K8S)%20%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E2%80%9C%E6%89%AB%E7%9B%B2%E2%80%9C%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://liruilongs.github.io/2013/07/13/kubernetes(K8S)%20%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E2%80%9C%E6%89%AB%E7%9B%B2%E2%80%9C%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2013-07-13T12:46:25.000Z</published>
    <updated>2021-06-26T19:01:56.183Z</updated>
    
    <content type="html"><![CDATA[<p>太多人活得不像自己。思想是别人的意见,生活是别人的模仿,情感是别人的引述。—-王尔德</p><span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><ul><li>看着<code>Activiti</code>官网的博客教程学<code>Activiti7</code>，需要用这个，之前看有些运维岗需要学，所以了解一下。</li><li>笔记是看视频学的时候做的</li><li>笔记内容包含对<code>K8S</code>的一个基本认识。</li></ul><p><strong><font color="#409EFF">太多人活得不像自己。思想是别人的意见,生活是别人的模仿,情感是别人的引述。—-王尔德</font></strong></p><hr><h2 id="一、kubernetes-概述"><a href="#一、kubernetes-概述" class="headerlink" title="一、kubernetes 概述"></a>一、kubernetes 概述</h2><h3 id="1、kubernetes-基本介绍"><a href="#1、kubernetes-基本介绍" class="headerlink" title="1、kubernetes 基本介绍"></a>1、kubernetes 基本介绍</h3><h4 id="kubernetes-是什么"><a href="#kubernetes-是什么" class="headerlink" title="kubernetes 是什么"></a>kubernetes 是什么</h4><p><code>kubernetes</code>，简称 <code>K8s</code>，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源的，用于管理<code>云平台</code>中多个<code>主机</code>上的<code>容器化的应用</code>，<code>Kubernetes</code> 的<code>目标</code>是让<code>部署容器化</code>的应用简单并且高效（powerful）,<code>Kubernetes</code> 提供了应用部署，规划，更新，维护的一种机制。说白了，K8S，就是基于容器(Docker单机版)的集群管理平台,用于管理多个<code>Docker</code>的。Docker 非常适合在一台主机上运行容器，并为此提供所有必需的功能。但在当今的分布式服务环境中，真正的挑战是管理跨服务器和复杂基础架构的资源和工作负载。</p><p>传统的<code>应用部署</code>方式是通过<code>插件</code>或<code>脚本</code>来安装应用。这样做的缺点是应用的运行、配置、管理、所有<code>生存周期</code>将与当前<code>操作系统</code>绑定，这样做并不利于应用的<code>升级更新/回滚</code>等操作，当然也可以通过<code>创建虚拟机</code>的方式来实现某些功能，但是虚拟机非常重，并不利于可移植性。</p><p>新的方式是通过<code>部署容器</code>方式实现，每个<code>容器</code>之间互相隔离，每个<code>容器</code>有自己的文件系统 ，<code>容器</code>之间进程不会相互影响，能区分计算资源。相对于<code>虚拟机</code>，<code>容器</code>能快速部署(虚拟机可以理解为<code>硬件抽象</code>,容器可以理解为<code>系统抽象,共用Linux内核</code>)，由于<code>容器</code>与底层设施、机器文件系统解耦的，所以它能在不同云、不同版本操作系统间进行<code>迁移</code>。容器占用<code>资源少</code>、<code>部署快</code>，每个应用可以被打包成一个<code>容器镜像</code>，每个应用与容器间成<code>一对一</code>关系也使容器有更大优势，使用容器可以在 <code>build</code> 或 <code>release</code> 的阶段，为应用创建容器镜像，因为每个应用不需要与其余的<code>应用堆栈组合</code>，也不依赖于<code>生产环境</code>基础结构，这使得从研发到测试、生产能提供一致环境。类似地，容器比虚拟机轻量、更“透明”，这更便于监控和管理。</p><h4 id="Kubernetes-是-Google-开源的一个容器编排引擎"><a href="#Kubernetes-是-Google-开源的一个容器编排引擎" class="headerlink" title="Kubernetes 是 Google 开源的一个容器编排引擎"></a><code>Kubernetes</code> 是 <code>Google</code> 开源的一个<code>容器编排引擎</code></h4><p><code>Kubernetes</code> 是 <code>Google</code> 开源的一个<code>容器编排引擎</code>，它支持<code>自动化部署</code>、<code>大规模可伸缩</code>、<code>应用容器化管理</code>。在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便对应用请求进行<code>负载均衡</code>。在 <code>Kubernetes</code> 中，我们可以创建<code>多个容器</code>，每个容器里面运行一个应用实例，然后通过<code>内置</code>的<code>负载均衡策略</code>，实现对这一组<code>应用实例</code>的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。</p><h3 id="2、kubernetes-功能和架构"><a href="#2、kubernetes-功能和架构" class="headerlink" title="2、kubernetes 功能和架构"></a>2、kubernetes 功能和架构</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p><code>Kubernetes</code> 是一个轻便的和可扩展的开源平台，用于<code>管理容器化应用和服务</code>。通过Kubernetes 能够进行应用的<code>自动化部署</code>和<code>扩缩容</code>。在 Kubernetes 中，会将组成应用的<code>容器组合</code>成一个<code>逻辑单元</code>以更易管理和发现。Kubernetes 积累了作为 Google 生产环境运行工作负载 15 年的经验，并吸收了来自于社区的最佳想法和实践。</p><h4 id="2-2-K8s-功能-Kubernetes-适用场景"><a href="#2-2-K8s-功能-Kubernetes-适用场景" class="headerlink" title="2.2 K8s 功能(Kubernetes 适用场景):"></a>2.2 K8s 功能(Kubernetes 适用场景):</h4><ul><li>（1）<code>自动装箱</code>:基于容器对应用运行环境的资源配置要求<code>自动部署应用容器</code></li><li>（2）<code>自我修复(自愈能力)</code>:当容器失败时，会对容器进行<code>重启</code>,当所部署的 Node 节点有问题时，会对容器进行<code>重新部署</code>和<code>重新调度</code>,当容器<code>未通过</code>监控检查时，会<code>关闭</code>此容器直到容器正常运行时，才会对外提供服务</li><li>（3）<code>水平扩展</code>:通过简单的<code>命令</code>、用户 UI 界面或基于 CPU 等资源使用情况，对应用容器进行<code>规模扩大</code>或<code>规模剪裁</code></li><li>（3）<code>服务发现</code>:用户不需使用额外的服务发现机制，就能够基于 <code>Kubernetes</code> 自身能力实现<code>服务发现</code>和<code>负载均衡</code></li><li>（4）<code>滚动更新</code>:可以根据应用的变化，对应用容器运行的应用，进行一次性或<code>批量式更新</code></li><li>（5）<code>版本回退</code>:可以根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退</li><li>（6）<code>密钥和配置管理</code>:在不需要重新构建镜像的情况下，可以<code>部署</code>和<code>更新密钥</code>和<code>应用配置</code>，类似<code>热部署</code>。</li><li>（7）<code>存储编排</code>:自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务</li><li>（8）<code>批处理</code>:提供一次性任务，定时任务；满足批量数据处理和分析的场景</li></ul><h4 id="2-3-应用部署架构分类"><a href="#2-3-应用部署架构分类" class="headerlink" title="2.3 应用部署架构分类"></a>2.3 应用部署架构分类</h4><p>(1) 无中心节点架构： GlusterFS<br>(2) 有中心节点架构： HDFS、K8S</p><h4 id="2-4-k8s-集群架构"><a href="#2-4-k8s-集群架构" class="headerlink" title="2.4 k8s 集群架构"></a>2.4 k8s 集群架构</h4><p><img src="https://img-blog.csdnimg.cn/20210614223114358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pod</span><br><span class="line">#<span class="number">1</span>》一个服务，是k8s管理的<span class="string">`最小单元`</span>，k8s从 Pod中启动和管理容器；</span><br><span class="line">#<span class="number">2</span>》由Pod来管理一组相同功能的容器；</span><br><span class="line">#<span class="number">3</span>》一个Pod可以管理一个容器,也可以管理多个容器；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-5-k8s-集群架构节点角色功能"><a href="#2-5-k8s-集群架构节点角色功能" class="headerlink" title="2.5 k8s 集群架构节点角色功能"></a>2.5 k8s 集群架构节点角色功能</h4><p><img src="https://img-blog.csdnimg.cn/20210615164817794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210615164859297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>Master Node</code>:==集群主控制节点==，对集群进行调度管理，接受集群外用户去集群操作请求；<code>Master Node</code> 由</p><ul><li>API server (管理接口):是整个系统的对外接口，供客户端和其他组件调用，相当于<code>“营业厅”</code></li><li>scheduler（调度器）:负责对集群内部的资源进行调度，相当于<code> “调度室”</code></li><li>controller (控制器):负责管理控制器，相当于<code>“大总管”</code>。</li><li>etcd (键值对数据库):是一个键值存储仓库，<code>存储集群的状态</code><br><code>Worker Node</code>:==集群工作节点==，运行用户业务应用容器；<code>Worker Node</code> 包含 `</li><li>docker：容器管理</li><li>kubelet：主要负责监视指派到它所在的 Pod，包括创建、修改、监控、删除等。</li><li>kube-proxy：主要负责为Pod对象提供代理</li><li>其他附加服务<br><img src="https://img-blog.csdnimg.cn/20210614225128282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="分布式键值存储服务"><a href="#分布式键值存储服务" class="headerlink" title="分布式键值存储服务"></a>分布式键值存储服务</h2><h3 id="Etcd-服务"><a href="#Etcd-服务" class="headerlink" title="Etcd 服务"></a>Etcd 服务</h3><code>etcd</code>是什么：</li><li>etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。CoreOS 项目就希望基于 etcd 来解决这一问题。</li><li>我们使用 etcd 来存储网络配置，解决容器互联互通的问题。<h4 id="2-6-K8S核心概念："><a href="#2-6-K8S核心概念：" class="headerlink" title="2.6 K8S核心概念："></a>2.6 K8S核心概念：</h4>通过<code>Service</code>统一入口进行访问，<code>Controller</code>用于创建<code>Pot</code>，<code>Pot</code>是一组容器的集合。</li></ul><ol><li><code>Pod</code>:<strong><font color="#009688">最小部署单元,一组容器的集合,共享网络,生命周期是短暂的</strong></li><li><code>controller</code>：**<font color="#009688">确保预期的<code>pod副本数量</code>、无状态应用部署（无约定）、有状态应用部署(有特定条件)、确保所有的node运行同一个pod、一次性任务和定时任务**</li><li><code>Service</code>：**<font color="#009688">定义一组pod的访问规则**</li></ol><h5 id="搭建k8环境平台规划"><a href="#搭建k8环境平台规划" class="headerlink" title="搭建k8环境平台规划"></a>搭建k8环境平台规划</h5><p><img src="https://img-blog.csdnimg.cn/20210615133825772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210615134319601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="服务器硬件配置要求搭建"><a href="#服务器硬件配置要求搭建" class="headerlink" title="服务器硬件配置要求搭建"></a>服务器硬件配置要求搭建</h5><p>测试环境：</p><ul><li>master：2核+4G+20G</li><li>node：4核+8G+40G<br>生产环境：<h2 id="二、kubernetes-集群搭建-kubeadm-方式"><a href="#二、kubernetes-集群搭建-kubeadm-方式" class="headerlink" title="二、kubernetes 集群搭建(kubeadm 方式)"></a>二、kubernetes 集群搭建(kubeadm 方式)</h2><h3 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h3>目前生产部署 Kubernetes 集群主要有两种方式：</li><li>（1）kubeadm<br><code>Kubeadm</code> 是一个<code> K8s 部署工具</code>，提供<code>kubeadm init</code>和 <code>kubeadm join</code>，用于<code>快速部署</code> Kubernetes <code>集群</code>。<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">官方地址</a></li><li>（2）二进制包<br>从 github 下载发行版的二进制包，手动部署每个组件，组成 Kubernetes 集群。<br>Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可<br>控，推荐使用二进制包部署 Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很<br>多工作原理，也利于后期维护。</li></ul><h3 id="kubeadm-部署方式介绍"><a href="#kubeadm-部署方式介绍" class="headerlink" title="kubeadm 部署方式介绍"></a>kubeadm 部署方式介绍</h3><p>kubeadm 是官方社区推出的一个用于快速部署 <code>kubernetes</code> 集群的工具，这个工具能通过两条指令完成一个 <code>kubernetes</code> 集群的部署：</p><ul><li>第一、创建一个 <code>Master</code> 节点 <code>kubeadm init</code></li><li>第二， 将 <code>Node </code>节点加入到当前集群中 <code>$ kubeadm join &lt;Master 节点的 IP 和端口 &gt;</code></li></ul><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>在开始之前，部署 Kubernetes 集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB 或更多 RAM，2 个 CPU 或更多 CPU，硬盘 30GB 或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止 swap 分区<h3 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h3></li></ul><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.31.61</td></tr><tr><td>k8s-node1</td><td>192.168.31.62</td></tr><tr><td>k8s-node2</td><td>192.168.31.63</td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20210615135448298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td></tr></tbody></table><h3 id="6、系统初始化"><a href="#6、系统初始化" class="headerlink" title="6、系统初始化"></a>6、系统初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙：</span></span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭 selinux：</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class="comment"># 永久</span></span><br><span class="line">$ setenforce 0 <span class="comment"># 临时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap：</span></span><br><span class="line">$ swapoff -a <span class="comment"># 临时</span></span><br><span class="line">$ vim /etc/fstab <span class="comment"># 永久</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机名：</span></span><br><span class="line">$ hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  在 master 添加 hosts：</span></span><br><span class="line">$ cat &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.31.61 k8s-master</span></span><br><span class="line"><span class="string">192.168.31.62 k8s-node1</span></span><br><span class="line"><span class="string">192.168.31.63 k8s-node2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将桥接的 IPv4 流量传递到 iptables 的链：</span></span><br><span class="line">$ cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">$ sysctl --system <span class="comment"># 生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间同步：</span></span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ ntpdate time.windows.com</span><br></pre></td></tr></table></figure><h3 id="7、所有节点安装-Docker-kubeadm-kubelet"><a href="#7、所有节点安装-Docker-kubeadm-kubelet" class="headerlink" title="7、所有节点安装 Docker/kubeadm/kubelet"></a>7、所有节点安装 Docker/kubeadm/kubelet</h3><h4 id="Kubernetes-默认-CRI（容器运行时）为-Docker，因此先安装-Docker。"><a href="#Kubernetes-默认-CRI（容器运行时）为-Docker，因此先安装-Docker。" class="headerlink" title="Kubernetes 默认 CRI（容器运行时）为 Docker，因此先安装 Docker。"></a>Kubernetes 默认 CRI（容器运行时）为 <code>Docker</code>，因此先安装 Docker。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）安装 Docker</span></span><br><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）添加阿里云 YUM 软件源</span></span><br><span class="line"><span class="comment">#设置仓库地址</span></span><br><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#添加 yum 源</span></span><br><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（3）安装 kubeadm，kubelet 和 kubectl</span></span><br><span class="line">$ yum install -y kubelet kubeadm kubectl</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="8、部署-Kubernetes-Master"><a href="#8、部署-Kubernetes-Master" class="headerlink" title="8、部署 Kubernetes Master"></a>8、部署 Kubernetes Master</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）在 192.168.31.61（Master）执行</span></span><br><span class="line">$ kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.31.61 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.17.0 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br><span class="line"><span class="comment">#由于默认拉取镜像地址 k8s.gcr.io 国内无法访问，这里指定阿里云镜像仓库地址。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（2）使用 kubectl 工具：</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="9、安装-Pod-网络插件（CNI）"><a href="#9、安装-Pod-网络插件（CNI）" class="headerlink" title="9、安装 Pod 网络插件（CNI）"></a>9、安装 Pod 网络插件（CNI）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply –f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kubeflannel.yml</span><br><span class="line"><span class="comment">#检查一下</span></span><br><span class="line">kubect1 get pods -n kube-system</span><br></pre></td></tr></table></figure><p>确保能够访问到 quay.io 这个 registery。如果 Pod 镜像下载失败，可以改这个镜像地址</p><h3 id="10、加入-Kubernetes-Node"><a href="#10、加入-Kubernetes-Node" class="headerlink" title="10、加入 Kubernetes Node"></a>10、加入 Kubernetes Node</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）在 192.168.31.62/63（Node）执行</span></span><br><span class="line">向集群添加新节点，执行在 kubeadm init 输出的 kubeadm join 命令：</span><br><span class="line">$ kubeadm join 192.168.31.61:6443 --token esce21.q6hetwm8si29qxwn \</span><br><span class="line">--discovery-token-ca-cert-hash</span><br><span class="line">sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br></pre></td></tr></table></figure><h3 id="11、测试-kubernetes-集群"><a href="#11、测试-kubernetes-集群" class="headerlink" title="11、测试 kubernetes 集群"></a>11、测试 kubernetes 集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在 Kubernetes 集群中创建一个 pod，验证是否正常运行：</span></span><br><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br><span class="line"><span class="comment">#访问地址：http://NodeIP:Port</span></span><br></pre></td></tr></table></figure><h2 id="三、kubernetes-集群搭建-二进制方式"><a href="#三、kubernetes-集群搭建-二进制方式" class="headerlink" title="三、kubernetes 集群搭建(二进制方式)"></a>三、kubernetes 集群搭建(二进制方式)</h2><p>这个先不看</p><h3 id="嗯，先了解到这里，以后有机会在学。"><a href="#嗯，先了解到这里，以后有机会在学。" class="headerlink" title="嗯，先了解到这里，以后有机会在学。"></a>嗯，先了解到这里，以后有机会在学。</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;太多人活得不像自己。思想是别人的意见,生活是别人的模仿,情感是别人的引述。—-王尔德&lt;/p&gt;</summary>
    
    
    
    <category term="容器" scheme="https://liruilongs.github.io/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="K8S" scheme="https://liruilongs.github.io/tags/K8S/"/>
    
    <category term="容器管理" scheme="https://liruilongs.github.io/tags/%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    
    <category term="kubernetes" scheme="https://liruilongs.github.io/tags/kubernetes/"/>
    
  </entry>
  
</feed>
